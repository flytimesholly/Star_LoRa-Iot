; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\stm32f10x_wwdg.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\stm32f10x_wwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -Iapplications -I. -Idrivers -ILibraries\STM32F10x_StdPeriph_Driver\inc -ILibraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\components\CMSIS\Include -I..\..\include -I..\..\libcpu\arm\cortex-m3 -I..\..\libcpu\arm\common -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\drivers\spi -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\finsh -I..\..\components\libc\compilers\armlibc -I..\..\components\libc\compilers\common -IE:\00_snake.xiao\RT-Thread\rt-thread\bsp\stm32f10x\RTE\_rtthread-stm32 -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\Keil\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DSTM32F10X_HD -DSTM32F10X_HD -DRT_USING_ARM_LIBC -DUSE_STDPERIPH_DRIVER --omf_browse=.\build\stm32f10x_wwdg.crf Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_wwdg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  WWDG_DeInit PROC
;;;101      */
;;;102    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;103    {
;;;104      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;105      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f44f6000          MOV      r0,#0x800
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;106    }
000014  bd10              POP      {r4,pc}
;;;107    
                          ENDP

                  WWDG_SetPrescaler PROC
;;;117      */
;;;118    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000016  b570              PUSH     {r4-r6,lr}
;;;119    {
000018  4604              MOV      r4,r0
;;;120      uint32_t tmpreg = 0;
00001a  2500              MOVS     r5,#0
;;;121      /* Check the parameters */
;;;122      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
00001c  b13c              CBZ      r4,|L1.46|
00001e  2c80              CMP      r4,#0x80
000020  d005              BEQ      |L1.46|
000022  f5b47f80          CMP      r4,#0x100
000026  d002              BEQ      |L1.46|
000028  f5b47fc0          CMP      r4,#0x180
00002c  d100              BNE      |L1.48|
                  |L1.46|
00002e  e003              B        |L1.56|
                  |L1.48|
000030  217a              MOVS     r1,#0x7a
000032  a02a              ADR      r0,|L1.220|
000034  f7fffffe          BL       assert_failed
                  |L1.56|
;;;123      /* Clear WDGTB[1:0] bits */
;;;124      tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
000038  4837              LDR      r0,|L1.280|
00003a  6800              LDR      r0,[r0,#0]
00003c  f42075c0          BIC      r5,r0,#0x180
;;;125      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;126      tmpreg |= WWDG_Prescaler;
000040  4325              ORRS     r5,r5,r4
;;;127      /* Store the new value */
;;;128      WWDG->CFR = tmpreg;
000042  4835              LDR      r0,|L1.280|
000044  6005              STR      r5,[r0,#0]
;;;129    }
000046  bd70              POP      {r4-r6,pc}
;;;130    
                          ENDP

                  WWDG_SetWindowValue PROC
;;;136      */
;;;137    void WWDG_SetWindowValue(uint8_t WindowValue)
000048  b538              PUSH     {r3-r5,lr}
;;;138    {
00004a  4604              MOV      r4,r0
;;;139      __IO uint32_t tmpreg = 0;
00004c  2000              MOVS     r0,#0
00004e  9000              STR      r0,[sp,#0]
;;;140    
;;;141      /* Check the parameters */
;;;142      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
000050  2c7f              CMP      r4,#0x7f
000052  dc00              BGT      |L1.86|
000054  e003              B        |L1.94|
                  |L1.86|
000056  218e              MOVS     r1,#0x8e
000058  a020              ADR      r0,|L1.220|
00005a  f7fffffe          BL       assert_failed
                  |L1.94|
;;;143      /* Clear W[6:0] bits */
;;;144    
;;;145      tmpreg = WWDG->CFR & CFR_W_Mask;
00005e  482e              LDR      r0,|L1.280|
000060  6800              LDR      r0,[r0,#0]
000062  f020007f          BIC      r0,r0,#0x7f
000066  9000              STR      r0,[sp,#0]
;;;146    
;;;147      /* Set W[6:0] bits according to WindowValue value */
;;;148      tmpreg |= WindowValue & (uint32_t) BIT_Mask;
000068  f004007f          AND      r0,r4,#0x7f
00006c  9900              LDR      r1,[sp,#0]
00006e  4308              ORRS     r0,r0,r1
000070  9000              STR      r0,[sp,#0]
;;;149    
;;;150      /* Store the new value */
;;;151      WWDG->CFR = tmpreg;
000072  4929              LDR      r1,|L1.280|
000074  9800              LDR      r0,[sp,#0]
000076  6008              STR      r0,[r1,#0]
;;;152    }
000078  bd38              POP      {r3-r5,pc}
;;;153    
                          ENDP

                  WWDG_EnableIT PROC
;;;158      */
;;;159    void WWDG_EnableIT(void)
00007a  2001              MOVS     r0,#1
;;;160    {
;;;161      *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
00007c  4927              LDR      r1,|L1.284|
00007e  6008              STR      r0,[r1,#0]
;;;162    }
000080  4770              BX       lr
;;;163    
                          ENDP

                  WWDG_SetCounter PROC
;;;169      */
;;;170    void WWDG_SetCounter(uint8_t Counter)
000082  b510              PUSH     {r4,lr}
;;;171    {
000084  4604              MOV      r4,r0
;;;172      /* Check the parameters */
;;;173      assert_param(IS_WWDG_COUNTER(Counter));
000086  2c40              CMP      r4,#0x40
000088  db02              BLT      |L1.144|
00008a  2c7f              CMP      r4,#0x7f
00008c  dc00              BGT      |L1.144|
00008e  e003              B        |L1.152|
                  |L1.144|
000090  21ad              MOVS     r1,#0xad
000092  a012              ADR      r0,|L1.220|
000094  f7fffffe          BL       assert_failed
                  |L1.152|
;;;174      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;175         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;176      WWDG->CR = Counter & BIT_Mask;
000098  f004007f          AND      r0,r4,#0x7f
00009c  491e              LDR      r1,|L1.280|
00009e  1f09              SUBS     r1,r1,#4
0000a0  6008              STR      r0,[r1,#0]
;;;177    }
0000a2  bd10              POP      {r4,pc}
;;;178    
                          ENDP

                  WWDG_Enable PROC
;;;184      */
;;;185    void WWDG_Enable(uint8_t Counter)
0000a4  b510              PUSH     {r4,lr}
;;;186    {
0000a6  4604              MOV      r4,r0
;;;187      /* Check the parameters */
;;;188      assert_param(IS_WWDG_COUNTER(Counter));
0000a8  2c40              CMP      r4,#0x40
0000aa  db02              BLT      |L1.178|
0000ac  2c7f              CMP      r4,#0x7f
0000ae  dc00              BGT      |L1.178|
0000b0  e003              B        |L1.186|
                  |L1.178|
0000b2  21bc              MOVS     r1,#0xbc
0000b4  a009              ADR      r0,|L1.220|
0000b6  f7fffffe          BL       assert_failed
                  |L1.186|
;;;189      WWDG->CR = CR_WDGA_Set | Counter;
0000ba  f0440080          ORR      r0,r4,#0x80
0000be  4916              LDR      r1,|L1.280|
0000c0  1f09              SUBS     r1,r1,#4
0000c2  6008              STR      r0,[r1,#0]
;;;190    }
0000c4  bd10              POP      {r4,pc}
;;;191    
                          ENDP

                  WWDG_GetFlagStatus PROC
;;;196      */
;;;197    FlagStatus WWDG_GetFlagStatus(void)
0000c6  4814              LDR      r0,|L1.280|
;;;198    {
;;;199      return (FlagStatus)(WWDG->SR);
0000c8  1d00              ADDS     r0,r0,#4
0000ca  6800              LDR      r0,[r0,#0]
0000cc  b2c0              UXTB     r0,r0
;;;200    }
0000ce  4770              BX       lr
;;;201    
                          ENDP

                  WWDG_ClearFlag PROC
;;;206      */
;;;207    void WWDG_ClearFlag(void)
0000d0  2000              MOVS     r0,#0
;;;208    {
;;;209      WWDG->SR = (uint32_t)RESET;
0000d2  4911              LDR      r1,|L1.280|
0000d4  1d09              ADDS     r1,r1,#4
0000d6  6008              STR      r0,[r1,#0]
;;;210    }
0000d8  4770              BX       lr
;;;211    
                          ENDP

0000da  0000              DCW      0x0000
                  |L1.220|
0000dc  4c696272          DCB      "Libraries\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_w"
0000e0  61726965
0000e4  735c5354
0000e8  4d333246
0000ec  3130785f
0000f0  53746450
0000f4  65726970
0000f8  685f4472
0000fc  69766572
000100  5c737263
000104  5c73746d
000108  33326631
00010c  30785f77
000110  7764672e          DCB      "wdg.c",0
000114  6300    
000116  00                DCB      0
000117  00                DCB      0
                  |L1.280|
                          DCD      0x40002c04
                  |L1.284|
                          DCD      0x420580a4

;*** Start embedded assembler ***

#line 1 "Libraries\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_wwdg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f10x_wwdg_c_9668c0ca____REV16|
#line 129 "..\\..\\components\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f10x_wwdg_c_9668c0ca____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f10x_wwdg_c_9668c0ca____REVSH|
#line 144
|__asm___16_stm32f10x_wwdg_c_9668c0ca____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
