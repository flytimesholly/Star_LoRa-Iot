; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\bxcan.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\bxcan.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -Iapplications -I. -Idrivers -ILibraries\STM32F10x_StdPeriph_Driver\inc -ILibraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\components\CMSIS\Include -I..\..\include -I..\..\libcpu\arm\cortex-m3 -I..\..\libcpu\arm\common -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\drivers\spi -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\finsh -I..\..\components\libc\compilers\armlibc -I..\..\components\libc\compilers\common -IE:\00_snake.xiao\RT-Thread\rt-thread\bsp\stm32f10x\RTE\_rtthread-stm32 -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\Keil\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DSTM32F10X_HD -DSTM32F10X_HD -DRT_USING_ARM_LIBC -DUSE_STDPERIPH_DRIVER --omf_browse=.\build\bxcan.crf drivers\bxcan.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  calcandormask PROC
;;;581    }
;;;582    static void calcandormask(rt_uint32_t *pmask, rt_uint32_t shift, rt_int32_t count)
000000  b57c              PUSH     {r2-r6,lr}
;;;583    {
000002  4603              MOV      r3,r0
;;;584        rt_uint32_t tmpmask;
;;;585        rt_uint32_t tmpmaskarray[BX_CAN_FILTER_MAX_ARRAY_SIZE] = {0,};
000004  2500              MOVS     r5,#0
000006  9500              STR      r5,[sp,#0]
000008  9501              STR      r5,[sp,#4]
;;;586        rt_int32_t i;
;;;587        i = 0;
00000a  2000              MOVS     r0,#0
;;;588        while (count > 0)
00000c  e00d              B        |L1.42|
                  |L1.14|
;;;589        {
;;;590            if (i >= 32)
00000e  2820              CMP      r0,#0x20
000010  db04              BLT      |L1.28|
;;;591            {
;;;592                tmpmaskarray[i] = 0xFFFFFFFF;
000012  f04f35ff          MOV      r5,#0xffffffff
000016  f84d5020          STR      r5,[sp,r0,LSL #2]
00001a  e004              B        |L1.38|
                  |L1.28|
;;;593            }
;;;594            else
;;;595            {
;;;596                tmpmaskarray[i] = (0x01 << count) - 1;
00001c  2501              MOVS     r5,#1
00001e  4095              LSLS     r5,r5,r2
000020  1e6d              SUBS     r5,r5,#1
000022  f84d5020          STR      r5,[sp,r0,LSL #2]
                  |L1.38|
;;;597            }
;;;598            count -= 32;
000026  3a20              SUBS     r2,r2,#0x20
;;;599            i++;
000028  1c40              ADDS     r0,r0,#1
                  |L1.42|
00002a  2a00              CMP      r2,#0                 ;588
00002c  dcef              BGT      |L1.14|
;;;600        };
;;;601        count = i;
00002e  4602              MOV      r2,r0
;;;602        for (i = 0; i < count && i < BX_CAN_FILTER_MAX_ARRAY_SIZE; i++)
000030  2000              MOVS     r0,#0
000032  e016              B        |L1.98|
                  |L1.52|
;;;603        {
;;;604            tmpmask = tmpmaskarray[i];
000034  f85d4020          LDR      r4,[sp,r0,LSL #2]
;;;605            pmask[i] |= (rt_uint32_t)(tmpmask << shift);
000038  f8535020          LDR      r5,[r3,r0,LSL #2]
00003c  fa04f601          LSL      r6,r4,r1
000040  4335              ORRS     r5,r5,r6
000042  f8435020          STR      r5,[r3,r0,LSL #2]
;;;606            if (i < BX_CAN_FILTER_MAX_ARRAY_SIZE - 1)
000046  2801              CMP      r0,#1
000048  da0a              BGE      |L1.96|
;;;607            {
;;;608                pmask[i + 1] |= (rt_uint32_t)(tmpmask >> (32 - shift));
00004a  1c45              ADDS     r5,r0,#1
00004c  f8535025          LDR      r5,[r3,r5,LSL #2]
000050  f1c10620          RSB      r6,r1,#0x20
000054  fa24f606          LSR      r6,r4,r6
000058  4335              ORRS     r5,r5,r6
00005a  1c46              ADDS     r6,r0,#1
00005c  f8435026          STR      r5,[r3,r6,LSL #2]
                  |L1.96|
000060  1c40              ADDS     r0,r0,#1              ;602
                  |L1.98|
000062  4290              CMP      r0,r2                 ;602
000064  da01              BGE      |L1.106|
000066  2802              CMP      r0,#2                 ;602
000068  dbe4              BLT      |L1.52|
                  |L1.106|
;;;609            }
;;;610        }
;;;611    }
00006a  bd7c              POP      {r2-r6,pc}
;;;612    static void calcfiltermasks(struct stm_bxcan *pbxcan)
                          ENDP

                  calcfiltermasks PROC
00006c  b510              PUSH     {r4,lr}
;;;613    {
00006e  4604              MOV      r4,r0
;;;614        rt_memset(&pbxcan->filtermask, 0, sizeof(pbxcan->filtermask));
000070  2240              MOVS     r2,#0x40
000072  2100              MOVS     r1,#0
000074  f104000c          ADD      r0,r4,#0xc
000078  f7fffffe          BL       rt_memset
;;;615        pbxcan->filtermask.id32maskshift[0] = 0;
00007c  2100              MOVS     r1,#0
00007e  62e1              STR      r1,[r4,#0x2c]
;;;616        if (pbxcan->filtermap[0].id32mask_cnt)
000080  6de0              LDR      r0,[r4,#0x5c]
000082  b128              CBZ      r0,|L1.144|
;;;617        {
;;;618            calcandormask(pbxcan->filtermask.id32maskm, pbxcan->filtermask.id32maskshift[0],
000084  f104000c          ADD      r0,r4,#0xc
000088  6de2              LDR      r2,[r4,#0x5c]
00008a  6ae1              LDR      r1,[r4,#0x2c]
00008c  f7fffffe          BL       calcandormask
                  |L1.144|
;;;619                          pbxcan->filtermap[0].id32mask_cnt);
;;;620        }
;;;621        pbxcan->filtermask.id32maskshift[1] = pbxcan->fifo1filteroff * 4;
000090  6da0              LDR      r0,[r4,#0x58]
000092  0081              LSLS     r1,r0,#2
000094  6321              STR      r1,[r4,#0x30]
;;;622        if (pbxcan->filtermap[1].id32mask_cnt)
000096  6ee0              LDR      r0,[r4,#0x6c]
000098  b128              CBZ      r0,|L1.166|
;;;623        {
;;;624            calcandormask(pbxcan->filtermask.id32maskm, pbxcan->filtermask.id32maskshift[1],
00009a  f104000c          ADD      r0,r4,#0xc
00009e  6ee2              LDR      r2,[r4,#0x6c]
0000a0  6b21              LDR      r1,[r4,#0x30]
0000a2  f7fffffe          BL       calcandormask
                  |L1.166|
;;;625                          pbxcan->filtermap[1].id32mask_cnt);
;;;626        }
;;;627        pbxcan->filtermask.id32bitshift[0] = pbxcan->filtermask.id32maskshift[0] +
0000a6  6de1              LDR      r1,[r4,#0x5c]
0000a8  6ae0              LDR      r0,[r4,#0x2c]
0000aa  4401              ADD      r1,r1,r0
0000ac  6361              STR      r1,[r4,#0x34]
;;;628                                             pbxcan->filtermap[0].id32mask_cnt;
;;;629        if (pbxcan->filtermap[0].id32bit_cnt)
0000ae  6e20              LDR      r0,[r4,#0x60]
0000b0  b128              CBZ      r0,|L1.190|
;;;630        {
;;;631            calcandormask(pbxcan->filtermask.id32bitm, pbxcan->filtermask.id32bitshift[0],
0000b2  f1040014          ADD      r0,r4,#0x14
0000b6  6e22              LDR      r2,[r4,#0x60]
0000b8  6b61              LDR      r1,[r4,#0x34]
0000ba  f7fffffe          BL       calcandormask
                  |L1.190|
;;;632                          pbxcan->filtermap[0].id32bit_cnt);
;;;633        }
;;;634        pbxcan->filtermask.id32bitshift[1] = pbxcan->filtermask.id32maskshift[1] +
0000be  6b21              LDR      r1,[r4,#0x30]
0000c0  6ee0              LDR      r0,[r4,#0x6c]
0000c2  4401              ADD      r1,r1,r0
0000c4  63a1              STR      r1,[r4,#0x38]
;;;635                                             pbxcan->filtermap[1].id32mask_cnt;
;;;636        if (pbxcan->filtermap[1].id32bit_cnt)
0000c6  6f20              LDR      r0,[r4,#0x70]
0000c8  b128              CBZ      r0,|L1.214|
;;;637        {
;;;638            calcandormask(pbxcan->filtermask.id32bitm, pbxcan->filtermask.id32bitshift[1],
0000ca  f1040014          ADD      r0,r4,#0x14
0000ce  6f22              LDR      r2,[r4,#0x70]
0000d0  6ba1              LDR      r1,[r4,#0x38]
0000d2  f7fffffe          BL       calcandormask
                  |L1.214|
;;;639                          pbxcan->filtermap[1].id32bit_cnt);
;;;640        }
;;;641        pbxcan->filtermask.id16maskshift[0] = pbxcan->filtermask.id32bitshift[0] +
0000d6  6b61              LDR      r1,[r4,#0x34]
0000d8  6e20              LDR      r0,[r4,#0x60]
0000da  4401              ADD      r1,r1,r0
0000dc  63e1              STR      r1,[r4,#0x3c]
;;;642                                              pbxcan->filtermap[0].id32bit_cnt;
;;;643        if (pbxcan->filtermap[0].id16mask_cnt)
0000de  6e60              LDR      r0,[r4,#0x64]
0000e0  b128              CBZ      r0,|L1.238|
;;;644        {
;;;645            calcandormask(pbxcan->filtermask.id16maskm, pbxcan->filtermask.id16maskshift[0],
0000e2  f104001c          ADD      r0,r4,#0x1c
0000e6  6e62              LDR      r2,[r4,#0x64]
0000e8  6be1              LDR      r1,[r4,#0x3c]
0000ea  f7fffffe          BL       calcandormask
                  |L1.238|
;;;646                          pbxcan->filtermap[0].id16mask_cnt);
;;;647        }
;;;648        pbxcan->filtermask.id16maskshift[1] = pbxcan->filtermask.id32bitshift[1] +
0000ee  6ba1              LDR      r1,[r4,#0x38]
0000f0  6f20              LDR      r0,[r4,#0x70]
0000f2  4401              ADD      r1,r1,r0
0000f4  6421              STR      r1,[r4,#0x40]
;;;649                                              pbxcan->filtermap[1].id32bit_cnt;
;;;650        if (pbxcan->filtermap[1].id16mask_cnt)
0000f6  6f60              LDR      r0,[r4,#0x74]
0000f8  b128              CBZ      r0,|L1.262|
;;;651        {
;;;652            calcandormask(pbxcan->filtermask.id16maskm, pbxcan->filtermask.id16maskshift[1],
0000fa  f104001c          ADD      r0,r4,#0x1c
0000fe  6f62              LDR      r2,[r4,#0x74]
000100  6c21              LDR      r1,[r4,#0x40]
000102  f7fffffe          BL       calcandormask
                  |L1.262|
;;;653                          pbxcan->filtermap[1].id16mask_cnt);
;;;654        }
;;;655        pbxcan->filtermask.id16bitshift[0] = pbxcan->filtermask.id16maskshift[0] +
000106  6be1              LDR      r1,[r4,#0x3c]
000108  6e60              LDR      r0,[r4,#0x64]
00010a  4401              ADD      r1,r1,r0
00010c  6461              STR      r1,[r4,#0x44]
;;;656                                             pbxcan->filtermap[0].id16mask_cnt;
;;;657        if (pbxcan->filtermap[0].id16bit_cnt)
00010e  6ea0              LDR      r0,[r4,#0x68]
000110  b128              CBZ      r0,|L1.286|
;;;658        {
;;;659            calcandormask(pbxcan->filtermask.id16bitm, pbxcan->filtermask.id16bitshift[0],
000112  f1040024          ADD      r0,r4,#0x24
000116  6ea2              LDR      r2,[r4,#0x68]
000118  6c61              LDR      r1,[r4,#0x44]
00011a  f7fffffe          BL       calcandormask
                  |L1.286|
;;;660                          pbxcan->filtermap[0].id16bit_cnt);
;;;661        }
;;;662        pbxcan->filtermask.id16bitshift[1] = pbxcan->filtermask.id16maskshift[1] +
00011e  6c21              LDR      r1,[r4,#0x40]
000120  6f60              LDR      r0,[r4,#0x74]
000122  4401              ADD      r1,r1,r0
000124  64a1              STR      r1,[r4,#0x48]
;;;663                                             pbxcan->filtermap[1].id16mask_cnt;
;;;664        if (pbxcan->filtermap[1].id16bit_cnt)
000126  6fa0              LDR      r0,[r4,#0x78]
000128  b128              CBZ      r0,|L1.310|
;;;665        {
;;;666            calcandormask(pbxcan->filtermask.id16bitm, pbxcan->filtermask.id16bitshift[1],
00012a  f1040024          ADD      r0,r4,#0x24
00012e  6fa2              LDR      r2,[r4,#0x78]
000130  6ca1              LDR      r1,[r4,#0x48]
000132  f7fffffe          BL       calcandormask
                  |L1.310|
;;;667                          pbxcan->filtermap[1].id16bit_cnt);
;;;668        }
;;;669    }
000136  bd10              POP      {r4,pc}
;;;670    static rt_int32_t bxcanfindfilter(struct stm_bxcan *pbxcan, struct rt_can_filter_item *pitem,
                          ENDP

                  bxcan1_filter_init PROC
;;;76     static void calcfiltermasks(struct stm_bxcan *pbxcan);
;;;77     static void bxcan1_filter_init(struct rt_can_device *can)
000138  e92d41f0          PUSH     {r4-r8,lr}
;;;78     {
00013c  4607              MOV      r7,r0
;;;79         rt_uint32_t i;
;;;80         rt_uint32_t mask;
;;;81         struct stm_bxcan *pbxcan = (struct stm_bxcan *) can->parent.user_data;
00013e  6bfc              LDR      r4,[r7,#0x3c]
;;;82         for (i = 0; i < BX_CAN2_FMRSTART; i++)
000140  2600              MOVS     r6,#0
000142  e121              B        |L1.904|
                  |L1.324|
;;;83         {
;;;84             CAN1->FMR |= FMR_FINIT;
000144  48f6              LDR      r0,|L1.1312|
000146  6800              LDR      r0,[r0,#0]
000148  f0400001          ORR      r0,r0,#1
00014c  49f4              LDR      r1,|L1.1312|
00014e  6008              STR      r0,[r1,#0]
;;;85             mask = 0x01 << (i + 0);
000150  2001              MOVS     r0,#1
000152  fa00f506          LSL      r5,r0,r6
;;;86             if (i < pbxcan->fifo1filteroff)
000156  6da0              LDR      r0,[r4,#0x58]
000158  42b0              CMP      r0,r6
00015a  d97d              BLS      |L1.600|
;;;87             {
;;;88                 if (pbxcan->filtermap[0].id32mask_cnt && i < pbxcan->filtermap[0].id32mask_cnt)
00015c  6de0              LDR      r0,[r4,#0x5c]
00015e  b1c0              CBZ      r0,|L1.402|
000160  6de0              LDR      r0,[r4,#0x5c]
000162  42b0              CMP      r0,r6
000164  d915              BLS      |L1.402|
;;;89                 {
;;;90                     CAN1->FS1R |= mask;
000166  48ee              LDR      r0,|L1.1312|
000168  300c              ADDS     r0,r0,#0xc
00016a  6800              LDR      r0,[r0,#0]
00016c  4328              ORRS     r0,r0,r5
00016e  49ec              LDR      r1,|L1.1312|
000170  310c              ADDS     r1,r1,#0xc
000172  6008              STR      r0,[r1,#0]
;;;91                     CAN1->FM1R &= ~mask;
000174  48ea              LDR      r0,|L1.1312|
000176  1d00              ADDS     r0,r0,#4
000178  6800              LDR      r0,[r0,#0]
00017a  43a8              BICS     r0,r0,r5
00017c  49e8              LDR      r1,|L1.1312|
00017e  1d09              ADDS     r1,r1,#4
000180  6008              STR      r0,[r1,#0]
;;;92                     CAN1->FFA1R &= ~mask;
000182  48e7              LDR      r0,|L1.1312|
000184  3014              ADDS     r0,r0,#0x14
000186  6800              LDR      r0,[r0,#0]
000188  43a8              BICS     r0,r0,r5
00018a  49e5              LDR      r1,|L1.1312|
00018c  3114              ADDS     r1,r1,#0x14
00018e  6008              STR      r0,[r1,#0]
                  |L1.400|
000190  e0ea              B        |L1.872|
                  |L1.402|
;;;93                 }
;;;94                 else if (pbxcan->filtermap[0].id32bit_cnt &&
000192  6e20              LDR      r0,[r4,#0x60]
000194  b1d8              CBZ      r0,|L1.462|
;;;95                          i < pbxcan->filtermap[0].id32mask_cnt + pbxcan->filtermap[0].id32bit_cnt / 2)
000196  e9d41017          LDRD     r1,r0,[r4,#0x5c]
00019a  eb010050          ADD      r0,r1,r0,LSR #1
00019e  42b0              CMP      r0,r6
0001a0  d915              BLS      |L1.462|
;;;96                 {
;;;97                     CAN1->FS1R |= mask;
0001a2  48df              LDR      r0,|L1.1312|
0001a4  300c              ADDS     r0,r0,#0xc
0001a6  6800              LDR      r0,[r0,#0]
0001a8  4328              ORRS     r0,r0,r5
0001aa  49dd              LDR      r1,|L1.1312|
0001ac  310c              ADDS     r1,r1,#0xc
0001ae  6008              STR      r0,[r1,#0]
;;;98                     CAN1->FM1R |= mask;
0001b0  48db              LDR      r0,|L1.1312|
0001b2  1d00              ADDS     r0,r0,#4
0001b4  6800              LDR      r0,[r0,#0]
0001b6  4328              ORRS     r0,r0,r5
0001b8  49d9              LDR      r1,|L1.1312|
0001ba  1d09              ADDS     r1,r1,#4
0001bc  6008              STR      r0,[r1,#0]
;;;99                     CAN1->FFA1R &= ~mask;
0001be  48d8              LDR      r0,|L1.1312|
0001c0  3014              ADDS     r0,r0,#0x14
0001c2  6800              LDR      r0,[r0,#0]
0001c4  43a8              BICS     r0,r0,r5
0001c6  49d6              LDR      r1,|L1.1312|
0001c8  3114              ADDS     r1,r1,#0x14
0001ca  6008              STR      r0,[r1,#0]
0001cc  e0cc              B        |L1.872|
                  |L1.462|
;;;100                }
;;;101                else if (pbxcan->filtermap[0].id16mask_cnt &&
0001ce  6e60              LDR      r0,[r4,#0x64]
0001d0  b1f0              CBZ      r0,|L1.528|
;;;102                         i < pbxcan->filtermap[0].id32mask_cnt + pbxcan->filtermap[0].id32bit_cnt / 2
0001d2  e9d41017          LDRD     r1,r0,[r4,#0x5c]
0001d6  eb010150          ADD      r1,r1,r0,LSR #1
0001da  6e60              LDR      r0,[r4,#0x64]
0001dc  eb010050          ADD      r0,r1,r0,LSR #1
0001e0  42b0              CMP      r0,r6
0001e2  d915              BLS      |L1.528|
;;;103                         + pbxcan->filtermap[0].id16mask_cnt / 2)
;;;104                {
;;;105                    CAN1->FS1R &= ~mask;
0001e4  48ce              LDR      r0,|L1.1312|
0001e6  300c              ADDS     r0,r0,#0xc
0001e8  6800              LDR      r0,[r0,#0]
0001ea  43a8              BICS     r0,r0,r5
0001ec  49cc              LDR      r1,|L1.1312|
0001ee  310c              ADDS     r1,r1,#0xc
0001f0  6008              STR      r0,[r1,#0]
;;;106                    CAN1->FM1R &= ~mask;
0001f2  48cb              LDR      r0,|L1.1312|
0001f4  1d00              ADDS     r0,r0,#4
0001f6  6800              LDR      r0,[r0,#0]
0001f8  43a8              BICS     r0,r0,r5
0001fa  49c9              LDR      r1,|L1.1312|
0001fc  1d09              ADDS     r1,r1,#4
0001fe  6008              STR      r0,[r1,#0]
;;;107                    CAN1->FFA1R &= ~mask;
000200  48c7              LDR      r0,|L1.1312|
000202  3014              ADDS     r0,r0,#0x14
000204  6800              LDR      r0,[r0,#0]
000206  43a8              BICS     r0,r0,r5
000208  49c5              LDR      r1,|L1.1312|
00020a  3114              ADDS     r1,r1,#0x14
00020c  6008              STR      r0,[r1,#0]
00020e  e0ab              B        |L1.872|
                  |L1.528|
;;;108                }
;;;109                else if (pbxcan->filtermap[0].id16bit_cnt &&
000210  6ea0              LDR      r0,[r4,#0x68]
000212  2800              CMP      r0,#0
000214  d0bc              BEQ      |L1.400|
;;;110                         i < pbxcan->filtermap[0].id32mask_cnt + pbxcan->filtermap[0].id32bit_cnt / 2
000216  e9d41017          LDRD     r1,r0,[r4,#0x5c]
00021a  eb010150          ADD      r1,r1,r0,LSR #1
00021e  6e60              LDR      r0,[r4,#0x64]
000220  eb010150          ADD      r1,r1,r0,LSR #1
000224  6ea0              LDR      r0,[r4,#0x68]
000226  eb010090          ADD      r0,r1,r0,LSR #2
00022a  42b0              CMP      r0,r6
00022c  d9b0              BLS      |L1.400|
;;;111                         + pbxcan->filtermap[0].id16mask_cnt / 2 + pbxcan->filtermap[0].id16bit_cnt / 4
;;;112                        )
;;;113                {
;;;114                    CAN1->FS1R &= ~mask;
00022e  48bc              LDR      r0,|L1.1312|
000230  300c              ADDS     r0,r0,#0xc
000232  6800              LDR      r0,[r0,#0]
000234  43a8              BICS     r0,r0,r5
000236  49ba              LDR      r1,|L1.1312|
000238  310c              ADDS     r1,r1,#0xc
00023a  6008              STR      r0,[r1,#0]
;;;115                    CAN1->FM1R |= mask;
00023c  48b8              LDR      r0,|L1.1312|
00023e  1d00              ADDS     r0,r0,#4
000240  6800              LDR      r0,[r0,#0]
000242  4328              ORRS     r0,r0,r5
000244  49b6              LDR      r1,|L1.1312|
000246  1d09              ADDS     r1,r1,#4
000248  6008              STR      r0,[r1,#0]
;;;116                    CAN1->FFA1R &= ~mask;
00024a  48b5              LDR      r0,|L1.1312|
00024c  3014              ADDS     r0,r0,#0x14
00024e  6800              LDR      r0,[r0,#0]
000250  43a8              BICS     r0,r0,r5
000252  49b3              LDR      r1,|L1.1312|
000254  3114              ADDS     r1,r1,#0x14
000256  e000              B        |L1.602|
                  |L1.600|
000258  e001              B        |L1.606|
                  |L1.602|
00025a  6008              STR      r0,[r1,#0]
00025c  e084              B        |L1.872|
                  |L1.606|
;;;117                }
;;;118            }
;;;119            else
;;;120            {
;;;121                if (pbxcan->filtermap[1].id32mask_cnt &&
00025e  6ee0              LDR      r0,[r4,#0x6c]
000260  b1d0              CBZ      r0,|L1.664|
;;;122                        i < pbxcan->filtermap[1].id32mask_cnt + pbxcan->fifo1filteroff)
000262  6da1              LDR      r1,[r4,#0x58]
000264  6ee0              LDR      r0,[r4,#0x6c]
000266  4408              ADD      r0,r0,r1
000268  42b0              CMP      r0,r6
00026a  d915              BLS      |L1.664|
;;;123                {
;;;124                    CAN1->FS1R |= mask;
00026c  48ac              LDR      r0,|L1.1312|
00026e  300c              ADDS     r0,r0,#0xc
000270  6800              LDR      r0,[r0,#0]
000272  4328              ORRS     r0,r0,r5
000274  49aa              LDR      r1,|L1.1312|
000276  310c              ADDS     r1,r1,#0xc
000278  6008              STR      r0,[r1,#0]
;;;125                    CAN1->FM1R &= ~mask;
00027a  48a9              LDR      r0,|L1.1312|
00027c  1d00              ADDS     r0,r0,#4
00027e  6800              LDR      r0,[r0,#0]
000280  43a8              BICS     r0,r0,r5
000282  49a7              LDR      r1,|L1.1312|
000284  1d09              ADDS     r1,r1,#4
000286  6008              STR      r0,[r1,#0]
;;;126                    CAN1->FFA1R |= mask;
000288  48a5              LDR      r0,|L1.1312|
00028a  3014              ADDS     r0,r0,#0x14
00028c  6800              LDR      r0,[r0,#0]
00028e  4328              ORRS     r0,r0,r5
000290  49a3              LDR      r1,|L1.1312|
000292  3114              ADDS     r1,r1,#0x14
000294  6008              STR      r0,[r1,#0]
000296  e067              B        |L1.872|
                  |L1.664|
;;;127                }
;;;128                else if (pbxcan->filtermap[1].id32bit_cnt &&
000298  6f20              LDR      r0,[r4,#0x70]
00029a  b1e8              CBZ      r0,|L1.728|
;;;129                         i < pbxcan->filtermap[1].id32mask_cnt + pbxcan->filtermap[1].id32bit_cnt / 2
00029c  e9d4101b          LDRD     r1,r0,[r4,#0x6c]
0002a0  eb010050          ADD      r0,r1,r0,LSR #1
0002a4  6da1              LDR      r1,[r4,#0x58]
0002a6  4408              ADD      r0,r0,r1
0002a8  42b0              CMP      r0,r6
0002aa  d915              BLS      |L1.728|
;;;130                         + pbxcan->fifo1filteroff)
;;;131                {
;;;132                    CAN1->FS1R |= mask;
0002ac  489c              LDR      r0,|L1.1312|
0002ae  300c              ADDS     r0,r0,#0xc
0002b0  6800              LDR      r0,[r0,#0]
0002b2  4328              ORRS     r0,r0,r5
0002b4  499a              LDR      r1,|L1.1312|
0002b6  310c              ADDS     r1,r1,#0xc
0002b8  6008              STR      r0,[r1,#0]
;;;133                    CAN1->FM1R |= mask;
0002ba  4899              LDR      r0,|L1.1312|
0002bc  1d00              ADDS     r0,r0,#4
0002be  6800              LDR      r0,[r0,#0]
0002c0  4328              ORRS     r0,r0,r5
0002c2  4997              LDR      r1,|L1.1312|
0002c4  1d09              ADDS     r1,r1,#4
0002c6  6008              STR      r0,[r1,#0]
;;;134                    CAN1->FFA1R |= mask;
0002c8  4895              LDR      r0,|L1.1312|
0002ca  3014              ADDS     r0,r0,#0x14
0002cc  6800              LDR      r0,[r0,#0]
0002ce  4328              ORRS     r0,r0,r5
0002d0  4993              LDR      r1,|L1.1312|
0002d2  3114              ADDS     r1,r1,#0x14
0002d4  6008              STR      r0,[r1,#0]
0002d6  e047              B        |L1.872|
                  |L1.728|
;;;135                }
;;;136                else if (pbxcan->filtermap[1].id16mask_cnt &&
0002d8  6f60              LDR      r0,[r4,#0x74]
0002da  b300              CBZ      r0,|L1.798|
;;;137                         i < pbxcan->filtermap[1].id32mask_cnt + pbxcan->filtermap[1].id32bit_cnt / 2
0002dc  e9d4101b          LDRD     r1,r0,[r4,#0x6c]
0002e0  eb010150          ADD      r1,r1,r0,LSR #1
0002e4  6f60              LDR      r0,[r4,#0x74]
0002e6  eb010050          ADD      r0,r1,r0,LSR #1
0002ea  6da1              LDR      r1,[r4,#0x58]
0002ec  4408              ADD      r0,r0,r1
0002ee  42b0              CMP      r0,r6
0002f0  d915              BLS      |L1.798|
;;;138                         + pbxcan->filtermap[1].id16mask_cnt / 2 + pbxcan->fifo1filteroff)
;;;139                {
;;;140                    CAN1->FS1R &= ~mask;
0002f2  488b              LDR      r0,|L1.1312|
0002f4  300c              ADDS     r0,r0,#0xc
0002f6  6800              LDR      r0,[r0,#0]
0002f8  43a8              BICS     r0,r0,r5
0002fa  4989              LDR      r1,|L1.1312|
0002fc  310c              ADDS     r1,r1,#0xc
0002fe  6008              STR      r0,[r1,#0]
;;;141                    CAN1->FM1R &= ~mask;
000300  4887              LDR      r0,|L1.1312|
000302  1d00              ADDS     r0,r0,#4
000304  6800              LDR      r0,[r0,#0]
000306  43a8              BICS     r0,r0,r5
000308  4985              LDR      r1,|L1.1312|
00030a  1d09              ADDS     r1,r1,#4
00030c  6008              STR      r0,[r1,#0]
;;;142                    CAN1->FFA1R |= mask;
00030e  4884              LDR      r0,|L1.1312|
000310  3014              ADDS     r0,r0,#0x14
000312  6800              LDR      r0,[r0,#0]
000314  4328              ORRS     r0,r0,r5
000316  4982              LDR      r1,|L1.1312|
000318  3114              ADDS     r1,r1,#0x14
00031a  6008              STR      r0,[r1,#0]
00031c  e024              B        |L1.872|
                  |L1.798|
;;;143                }
;;;144                else if (pbxcan->filtermap[1].id16bit_cnt &&
00031e  6fa0              LDR      r0,[r4,#0x78]
000320  b310              CBZ      r0,|L1.872|
;;;145                         i < pbxcan->filtermap[1].id32mask_cnt + pbxcan->filtermap[1].id32bit_cnt / 2
000322  e9d4101b          LDRD     r1,r0,[r4,#0x6c]
000326  eb010150          ADD      r1,r1,r0,LSR #1
00032a  6f60              LDR      r0,[r4,#0x74]
00032c  eb010150          ADD      r1,r1,r0,LSR #1
000330  6fa0              LDR      r0,[r4,#0x78]
000332  eb010090          ADD      r0,r1,r0,LSR #2
000336  6da1              LDR      r1,[r4,#0x58]
000338  4408              ADD      r0,r0,r1
00033a  42b0              CMP      r0,r6
00033c  d914              BLS      |L1.872|
;;;146                         + pbxcan->filtermap[1].id16mask_cnt / 2 + pbxcan->filtermap[1].id16bit_cnt / 4
;;;147                         + pbxcan->fifo1filteroff)
;;;148                {
;;;149                    CAN1->FS1R &= ~mask;
00033e  4878              LDR      r0,|L1.1312|
000340  300c              ADDS     r0,r0,#0xc
000342  6800              LDR      r0,[r0,#0]
000344  43a8              BICS     r0,r0,r5
000346  4976              LDR      r1,|L1.1312|
000348  310c              ADDS     r1,r1,#0xc
00034a  6008              STR      r0,[r1,#0]
;;;150                    CAN1->FM1R |= mask;
00034c  4874              LDR      r0,|L1.1312|
00034e  1d00              ADDS     r0,r0,#4
000350  6800              LDR      r0,[r0,#0]
000352  4328              ORRS     r0,r0,r5
000354  4972              LDR      r1,|L1.1312|
000356  1d09              ADDS     r1,r1,#4
000358  6008              STR      r0,[r1,#0]
;;;151                    CAN1->FFA1R |= mask;
00035a  4871              LDR      r0,|L1.1312|
00035c  3014              ADDS     r0,r0,#0x14
00035e  6800              LDR      r0,[r0,#0]
000360  4328              ORRS     r0,r0,r5
000362  496f              LDR      r1,|L1.1312|
000364  3114              ADDS     r1,r1,#0x14
000366  6008              STR      r0,[r1,#0]
                  |L1.872|
;;;152                }
;;;153            }
;;;154            CAN1->sFilterRegister[i].FR1 = 0xFFFFFFFF;
000368  f04f31ff          MOV      r1,#0xffffffff
00036c  486c              LDR      r0,|L1.1312|
00036e  3040              ADDS     r0,r0,#0x40
000370  f8401036          STR      r1,[r0,r6,LSL #3]
;;;155            CAN1->sFilterRegister[i].FR2 = 0xFFFFFFFF;
000374  eb0000c6          ADD      r0,r0,r6,LSL #3
000378  6041              STR      r1,[r0,#4]
;;;156            CAN1->FMR &= ~FMR_FINIT;
00037a  4869              LDR      r0,|L1.1312|
00037c  6800              LDR      r0,[r0,#0]
00037e  f0200001          BIC      r0,r0,#1
000382  4967              LDR      r1,|L1.1312|
000384  6008              STR      r0,[r1,#0]
000386  1c76              ADDS     r6,r6,#1              ;82
                  |L1.904|
000388  2e07              CMP      r6,#7                 ;82
00038a  f4ffaedb          BCC      |L1.324|
;;;157        }
;;;158        calcfiltermasks(pbxcan);
00038e  4620              MOV      r0,r4
000390  f7fffffe          BL       calcfiltermasks
;;;159    }
000394  e8bd81f0          POP      {r4-r8,pc}
;;;160    #ifdef USING_BXCAN2
                          ENDP

                  bxcan_get_baud_index PROC
;;;290    
;;;291    static rt_uint32_t bxcan_get_baud_index(rt_uint32_t baud)
000398  b530              PUSH     {r4,r5,lr}
;;;292    {
00039a  4603              MOV      r3,r0
;;;293    	rt_uint32_t len, index, default_index;
;;;294    	
;;;295    	len = sizeof(bxcan_baud_rate_tab)/sizeof(bxcan_baud_rate_tab[0]);
00039c  2209              MOVS     r2,#9
;;;296    	default_index = len;
00039e  4614              MOV      r4,r2
;;;297    
;;;298    	for(index = 0; index < len; index++)
0003a0  2100              MOVS     r1,#0
0003a2  e00e              B        |L1.962|
                  |L1.932|
;;;299    	{
;;;300    		if(bxcan_baud_rate_tab[index].baud_rate == baud)
0003a4  485f              LDR      r0,|L1.1316|
0003a6  f8500031          LDR      r0,[r0,r1,LSL #3]
0003aa  4298              CMP      r0,r3
0003ac  d101              BNE      |L1.946|
;;;301    			return index;
0003ae  4608              MOV      r0,r1
                  |L1.944|
;;;302    
;;;303    		if(bxcan_baud_rate_tab[index].baud_rate == 1000UL * 250)
;;;304    			default_index = index;
;;;305    	}
;;;306    
;;;307    	if(default_index != len)
;;;308    		return default_index;
;;;309    
;;;310    	return 0;	
;;;311    }
0003b0  bd30              POP      {r4,r5,pc}
                  |L1.946|
0003b2  485c              LDR      r0,|L1.1316|
0003b4  f8500031          LDR      r0,[r0,r1,LSL #3]     ;303
0003b8  4d5b              LDR      r5,|L1.1320|
0003ba  42a8              CMP      r0,r5                 ;303
0003bc  d100              BNE      |L1.960|
0003be  460c              MOV      r4,r1                 ;304
                  |L1.960|
0003c0  1c49              ADDS     r1,r1,#1              ;298
                  |L1.962|
0003c2  4291              CMP      r1,r2                 ;298
0003c4  d3ee              BCC      |L1.932|
0003c6  4294              CMP      r4,r2                 ;307
0003c8  d001              BEQ      |L1.974|
0003ca  4620              MOV      r0,r4                 ;308
0003cc  e7f0              B        |L1.944|
                  |L1.974|
0003ce  2000              MOVS     r0,#0                 ;310
0003d0  e7ee              B        |L1.944|
;;;312    
                          ENDP

                  bxcan_init PROC
;;;313    
;;;314    static void bxcan_init(CAN_TypeDef *pcan, rt_uint32_t baud, rt_uint32_t mode)
0003d2  b5fe              PUSH     {r1-r7,lr}
;;;315    {
0003d4  4607              MOV      r7,r0
0003d6  460d              MOV      r5,r1
0003d8  4616              MOV      r6,r2
;;;316        CAN_InitTypeDef        CAN_InitStructure;
;;;317    	
;;;318    	rt_uint32_t baud_index = bxcan_get_baud_index(baud);
0003da  4628              MOV      r0,r5
0003dc  f7fffffe          BL       bxcan_get_baud_index
0003e0  4604              MOV      r4,r0
;;;319    
;;;320        CAN_InitStructure.CAN_TTCM = DISABLE;
0003e2  2000              MOVS     r0,#0
0003e4  f88d0006          STRB     r0,[sp,#6]
;;;321        CAN_InitStructure.CAN_ABOM = ENABLE;
0003e8  2001              MOVS     r0,#1
0003ea  f88d0007          STRB     r0,[sp,#7]
;;;322        CAN_InitStructure.CAN_AWUM = DISABLE;
0003ee  2000              MOVS     r0,#0
0003f0  f88d0008          STRB     r0,[sp,#8]
;;;323        CAN_InitStructure.CAN_NART = DISABLE;
0003f4  f88d0009          STRB     r0,[sp,#9]
;;;324        CAN_InitStructure.CAN_RFLM = DISABLE;
0003f8  f88d000a          STRB     r0,[sp,#0xa]
;;;325        CAN_InitStructure.CAN_TXFP = ENABLE;
0003fc  2001              MOVS     r0,#1
0003fe  f88d000b          STRB     r0,[sp,#0xb]
;;;326        switch (mode)
000402  b136              CBZ      r6,|L1.1042|
000404  2e01              CMP      r6,#1
000406  d008              BEQ      |L1.1050|
000408  2e02              CMP      r6,#2
00040a  d00a              BEQ      |L1.1058|
00040c  2e03              CMP      r6,#3
00040e  d110              BNE      |L1.1074|
000410  e00b              B        |L1.1066|
                  |L1.1042|
;;;327        {
;;;328        case RT_CAN_MODE_NORMAL:
;;;329            CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;
000412  2000              MOVS     r0,#0
000414  f88d0002          STRB     r0,[sp,#2]
;;;330            break;
000418  e00b              B        |L1.1074|
                  |L1.1050|
;;;331        case RT_CAN_MODE_LISEN:
;;;332            CAN_InitStructure.CAN_Mode = CAN_Mode_Silent;
00041a  2002              MOVS     r0,#2
00041c  f88d0002          STRB     r0,[sp,#2]
;;;333            break;
000420  e007              B        |L1.1074|
                  |L1.1058|
;;;334        case RT_CAN_MODE_LOOPBACK:
;;;335            CAN_InitStructure.CAN_Mode = CAN_Mode_LoopBack;
000422  2001              MOVS     r0,#1
000424  f88d0002          STRB     r0,[sp,#2]
;;;336            break;
000428  e003              B        |L1.1074|
                  |L1.1066|
;;;337        case RT_CAN_MODE_LOOPBACKANLISEN:
;;;338            CAN_InitStructure.CAN_Mode = CAN_Mode_Silent_LoopBack;
00042a  2003              MOVS     r0,#3
00042c  f88d0002          STRB     r0,[sp,#2]
;;;339            break;
000430  bf00              NOP      
                  |L1.1074|
000432  bf00              NOP                            ;330
;;;340        }
;;;341        CAN_InitStructure.CAN_SJW = BAUD_DATA(SJW, baud_index);
000434  483b              LDR      r0,|L1.1316|
000436  eb0000c4          ADD      r0,r0,r4,LSL #3
00043a  6840              LDR      r0,[r0,#4]
00043c  f3c06001          UBFX     r0,r0,#24,#2
000440  f88d0003          STRB     r0,[sp,#3]
;;;342        CAN_InitStructure.CAN_BS1 = BAUD_DATA(BS1, baud_index);
000444  4837              LDR      r0,|L1.1316|
000446  eb0000c4          ADD      r0,r0,r4,LSL #3
00044a  6840              LDR      r0,[r0,#4]
00044c  f3c04003          UBFX     r0,r0,#16,#4
000450  f88d0004          STRB     r0,[sp,#4]
;;;343        CAN_InitStructure.CAN_BS2 = BAUD_DATA(BS2, baud_index);
000454  4833              LDR      r0,|L1.1316|
000456  eb0000c4          ADD      r0,r0,r4,LSL #3
00045a  6840              LDR      r0,[r0,#4]
00045c  f3c05002          UBFX     r0,r0,#20,#3
000460  f88d0005          STRB     r0,[sp,#5]
;;;344        CAN_InitStructure.CAN_Prescaler = BAUD_DATA(RRESCL, baud_index);
000464  482f              LDR      r0,|L1.1316|
000466  eb0000c4          ADD      r0,r0,r4,LSL #3
00046a  8880              LDRH     r0,[r0,#4]
00046c  f3c00009          UBFX     r0,r0,#0,#10
000470  f8ad0000          STRH     r0,[sp,#0]
;;;345    
;;;346        CAN_Init(pcan, &CAN_InitStructure);
000474  4669              MOV      r1,sp
000476  4638              MOV      r0,r7
000478  f7fffffe          BL       CAN_Init
;;;347    }
00047c  bdfe              POP      {r1-r7,pc}
;;;348    static void bxcan1_hw_init(void)
                          ENDP

                  bxcan1_hw_init PROC
00047e  b51c              PUSH     {r2-r4,lr}
;;;349    {
;;;350        GPIO_InitTypeDef  GPIO_InitStructure;
;;;351        NVIC_InitTypeDef  NVIC_InitStructure;
;;;352    
;;;353        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
000480  f44f6000          MOV      r0,#0x800
000484  f8ad0004          STRH     r0,[sp,#4]
;;;354        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
000488  2048              MOVS     r0,#0x48
00048a  f88d0007          STRB     r0,[sp,#7]
;;;355        GPIO_Init(GPIOA, &GPIO_InitStructure);
00048e  a901              ADD      r1,sp,#4
000490  4826              LDR      r0,|L1.1324|
000492  f7fffffe          BL       GPIO_Init
;;;356    
;;;357        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
000496  f44f5080          MOV      r0,#0x1000
00049a  f8ad0004          STRH     r0,[sp,#4]
;;;358        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00049e  2018              MOVS     r0,#0x18
0004a0  f88d0007          STRB     r0,[sp,#7]
;;;359        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0004a4  2003              MOVS     r0,#3
0004a6  f88d0006          STRB     r0,[sp,#6]
;;;360        GPIO_Init(GPIOA, &GPIO_InitStructure);
0004aa  a901              ADD      r1,sp,#4
0004ac  481f              LDR      r0,|L1.1324|
0004ae  f7fffffe          BL       GPIO_Init
;;;361    
;;;362        NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
0004b2  f44f60c0          MOV      r0,#0x600
0004b6  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;363        NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX0_IRQn;
0004ba  2014              MOVS     r0,#0x14
0004bc  f88d0000          STRB     r0,[sp,#0]
;;;364        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x1;
0004c0  2001              MOVS     r0,#1
0004c2  f88d0001          STRB     r0,[sp,#1]
;;;365        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0;
0004c6  2000              MOVS     r0,#0
0004c8  f88d0002          STRB     r0,[sp,#2]
;;;366        NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
0004cc  f88d0003          STRB     r0,[sp,#3]
;;;367        NVIC_Init(&NVIC_InitStructure);
0004d0  4668              MOV      r0,sp
0004d2  f7fffffe          BL       NVIC_Init
;;;368        NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX1_IRQn;
0004d6  2015              MOVS     r0,#0x15
0004d8  f88d0000          STRB     r0,[sp,#0]
;;;369        NVIC_Init(&NVIC_InitStructure);
0004dc  4668              MOV      r0,sp
0004de  f7fffffe          BL       NVIC_Init
;;;370        NVIC_InitStructure.NVIC_IRQChannel = CAN1_TX_IRQn;
0004e2  2013              MOVS     r0,#0x13
0004e4  f88d0000          STRB     r0,[sp,#0]
;;;371        NVIC_Init(&NVIC_InitStructure);
0004e8  4668              MOV      r0,sp
0004ea  f7fffffe          BL       NVIC_Init
;;;372    }
0004ee  bd1c              POP      {r2-r4,pc}
;;;373    #ifdef USING_BXCAN2
                          ENDP

                  bxcan_enter_init PROC
;;;399    #endif
;;;400    rt_inline rt_err_t bxcan_enter_init(CAN_TypeDef *pcan)
0004f0  4601              MOV      r1,r0
;;;401    {
;;;402        uint32_t wait_ack = 0x00000000;
0004f2  2200              MOVS     r2,#0
;;;403    
;;;404        pcan->MCR |= CAN_MCR_INRQ ;
0004f4  6808              LDR      r0,[r1,#0]
0004f6  f0400001          ORR      r0,r0,#1
0004fa  6008              STR      r0,[r1,#0]
;;;405    
;;;406        while (((pcan->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
0004fc  e000              B        |L1.1280|
                  |L1.1278|
;;;407        {
;;;408            wait_ack++;
0004fe  1c52              ADDS     r2,r2,#1
                  |L1.1280|
000500  6848              LDR      r0,[r1,#4]            ;406
000502  f0000001          AND      r0,r0,#1              ;406
000506  b918              CBNZ     r0,|L1.1296|
000508  f64f70ff          MOV      r0,#0xffff            ;406
00050c  4282              CMP      r2,r0                 ;406
00050e  d1f6              BNE      |L1.1278|
                  |L1.1296|
;;;409        }
;;;410        if ((pcan->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
000510  6848              LDR      r0,[r1,#4]
000512  f0000001          AND      r0,r0,#1
000516  b908              CBNZ     r0,|L1.1308|
;;;411        {
;;;412            return RT_ERROR;
000518  2001              MOVS     r0,#1
                  |L1.1306|
;;;413        }
;;;414        return RT_EOK;
;;;415    }
00051a  4770              BX       lr
                  |L1.1308|
00051c  2000              MOVS     r0,#0                 ;414
00051e  e7fc              B        |L1.1306|
                  |L1.1312|
                          DCD      0x40006600
                  |L1.1316|
                          DCD      bxcan_baud_rate_tab
                  |L1.1320|
                          DCD      0x0003d090
                  |L1.1324|
                          DCD      0x40010800
                          ENDP

                  bxcan_exit_init PROC
;;;416    rt_inline rt_err_t bxcan_exit_init(CAN_TypeDef *pcan)
000530  4601              MOV      r1,r0
;;;417    {
;;;418        uint32_t wait_ack = 0x00000000;
000532  2200              MOVS     r2,#0
;;;419    
;;;420        pcan->MCR &= ~(uint32_t)CAN_MCR_INRQ;
000534  6808              LDR      r0,[r1,#0]
000536  f0200001          BIC      r0,r0,#1
00053a  6008              STR      r0,[r1,#0]
;;;421    
;;;422        while (((pcan->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
00053c  e000              B        |L1.1344|
                  |L1.1342|
;;;423        {
;;;424            wait_ack++;
00053e  1c52              ADDS     r2,r2,#1
                  |L1.1344|
000540  6848              LDR      r0,[r1,#4]            ;422
000542  f0000001          AND      r0,r0,#1              ;422
000546  b118              CBZ      r0,|L1.1360|
000548  f64f70ff          MOV      r0,#0xffff            ;422
00054c  4282              CMP      r2,r0                 ;422
00054e  d1f6              BNE      |L1.1342|
                  |L1.1360|
;;;425        }
;;;426        if ((pcan->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
000550  6848              LDR      r0,[r1,#4]
000552  f0000001          AND      r0,r0,#1
000556  b908              CBNZ     r0,|L1.1372|
;;;427        {
;;;428            return RT_ERROR;
000558  2001              MOVS     r0,#1
                  |L1.1370|
;;;429        }
;;;430        return RT_EOK;
;;;431    }
00055a  4770              BX       lr
                  |L1.1372|
00055c  2000              MOVS     r0,#0                 ;430
00055e  e7fc              B        |L1.1370|
;;;432    static rt_err_t bxcan_set_mode(CAN_TypeDef *pcan, rt_uint32_t mode)
                          ENDP

                  bxcan_set_mode PROC
000560  b570              PUSH     {r4-r6,lr}
;;;433    {
000562  4604              MOV      r4,r0
000564  460d              MOV      r5,r1
;;;434        if (bxcan_enter_init(pcan) != RT_EOK)
000566  4620              MOV      r0,r4
000568  f7fffffe          BL       bxcan_enter_init
00056c  b108              CBZ      r0,|L1.1394|
;;;435        {
;;;436            return RT_ERROR;
00056e  2001              MOVS     r0,#1
                  |L1.1392|
;;;437        }
;;;438        pcan->BTR &= ~(uint32_t)((uint32_t)0x03 << 30);
;;;439        switch (mode)
;;;440        {
;;;441        case RT_CAN_MODE_NORMAL:
;;;442            mode = CAN_Mode_Normal;
;;;443            break;
;;;444        case RT_CAN_MODE_LISEN:
;;;445            mode = CAN_Mode_Silent;
;;;446            break;
;;;447        case RT_CAN_MODE_LOOPBACK:
;;;448            mode = CAN_Mode_LoopBack;
;;;449            break;
;;;450        case RT_CAN_MODE_LOOPBACKANLISEN:
;;;451            mode = CAN_Mode_Silent_LoopBack;
;;;452            break;
;;;453        }
;;;454        pcan->BTR |= ~(uint32_t)(mode << 30);
;;;455        if (bxcan_exit_init(pcan) != RT_EOK)
;;;456        {
;;;457            return RT_ERROR;
;;;458        }
;;;459        return RT_EOK;
;;;460    }
000570  bd70              POP      {r4-r6,pc}
                  |L1.1394|
000572  69e0              LDR      r0,[r4,#0x1c]         ;438
000574  f0204040          BIC      r0,r0,#0xc0000000     ;438
000578  61e0              STR      r0,[r4,#0x1c]         ;438
00057a  b135              CBZ      r5,|L1.1418|
00057c  2d01              CMP      r5,#1                 ;439
00057e  d006              BEQ      |L1.1422|
000580  2d02              CMP      r5,#2                 ;439
000582  d006              BEQ      |L1.1426|
000584  2d03              CMP      r5,#3                 ;439
000586  d108              BNE      |L1.1434|
000588  e005              B        |L1.1430|
                  |L1.1418|
00058a  2500              MOVS     r5,#0                 ;442
00058c  e005              B        |L1.1434|
                  |L1.1422|
00058e  2502              MOVS     r5,#2                 ;445
000590  e003              B        |L1.1434|
                  |L1.1426|
000592  2501              MOVS     r5,#1                 ;448
000594  e001              B        |L1.1434|
                  |L1.1430|
000596  2503              MOVS     r5,#3                 ;451
000598  bf00              NOP                            ;452
                  |L1.1434|
00059a  bf00              NOP                            ;443
00059c  69e0              LDR      r0,[r4,#0x1c]         ;454
00059e  ea6f7185          MVN      r1,r5,LSL #30         ;454
0005a2  4308              ORRS     r0,r0,r1              ;454
0005a4  61e0              STR      r0,[r4,#0x1c]         ;454
0005a6  4620              MOV      r0,r4                 ;455
0005a8  f7fffffe          BL       bxcan_exit_init
0005ac  b108              CBZ      r0,|L1.1458|
0005ae  2001              MOVS     r0,#1                 ;457
0005b0  e7de              B        |L1.1392|
                  |L1.1458|
0005b2  2000              MOVS     r0,#0                 ;459
0005b4  e7dc              B        |L1.1392|
;;;461    static rt_err_t bxcan_set_privmode(CAN_TypeDef *pcan, rt_uint32_t mode)
                          ENDP

                  bxcan_set_privmode PROC
0005b6  b570              PUSH     {r4-r6,lr}
;;;462    {
0005b8  4604              MOV      r4,r0
0005ba  460d              MOV      r5,r1
;;;463        if (bxcan_enter_init(pcan) != RT_EOK)
0005bc  4620              MOV      r0,r4
0005be  f7fffffe          BL       bxcan_enter_init
0005c2  b108              CBZ      r0,|L1.1480|
;;;464        {
;;;465            return RT_ERROR;
0005c4  2001              MOVS     r0,#1
                  |L1.1478|
;;;466        }
;;;467        if (mode == ENABLE)
;;;468        {
;;;469            pcan->MCR |= CAN_MCR_TXFP;
;;;470        }
;;;471        else
;;;472        {
;;;473            pcan->MCR &= ~(uint32_t)CAN_MCR_TXFP;
;;;474        }
;;;475        if (bxcan_exit_init(pcan) != RT_EOK)
;;;476        {
;;;477            return RT_ERROR;
;;;478        }
;;;479        return RT_EOK;
;;;480    }
0005c6  bd70              POP      {r4-r6,pc}
                  |L1.1480|
0005c8  2d01              CMP      r5,#1                 ;467
0005ca  d104              BNE      |L1.1494|
0005cc  6820              LDR      r0,[r4,#0]            ;469
0005ce  f0400004          ORR      r0,r0,#4              ;469
0005d2  6020              STR      r0,[r4,#0]            ;469
0005d4  e003              B        |L1.1502|
                  |L1.1494|
0005d6  6820              LDR      r0,[r4,#0]            ;473
0005d8  f0200004          BIC      r0,r0,#4              ;473
0005dc  6020              STR      r0,[r4,#0]            ;473
                  |L1.1502|
0005de  4620              MOV      r0,r4                 ;475
0005e0  f7fffffe          BL       bxcan_exit_init
0005e4  b108              CBZ      r0,|L1.1514|
0005e6  2001              MOVS     r0,#1                 ;477
0005e8  e7ed              B        |L1.1478|
                  |L1.1514|
0005ea  2000              MOVS     r0,#0                 ;479
0005ec  e7eb              B        |L1.1478|
;;;481    static rt_err_t bxcan_set_baud_rate(CAN_TypeDef *pcan, rt_uint32_t baud)
                          ENDP

                  bxcan_set_baud_rate PROC
0005ee  e92d41f0          PUSH     {r4-r8,lr}
;;;482    {
0005f2  4604              MOV      r4,r0
0005f4  460e              MOV      r6,r1
;;;483        rt_uint32_t mode;
;;;484    
;;;485    	rt_uint32_t baud_index = bxcan_get_baud_index(baud);
0005f6  4630              MOV      r0,r6
0005f8  f7fffffe          BL       bxcan_get_baud_index
0005fc  4605              MOV      r5,r0
;;;486    	
;;;487        if (bxcan_enter_init(pcan) != RT_EOK)
0005fe  4620              MOV      r0,r4
000600  f7fffffe          BL       bxcan_enter_init
000604  b110              CBZ      r0,|L1.1548|
;;;488        {
;;;489            return RT_ERROR;
000606  2001              MOVS     r0,#1
                  |L1.1544|
;;;490        }
;;;491        pcan->BTR = 0;
;;;492        mode = pcan->BTR & ((rt_uint32_t)0x03 << 30);
;;;493        pcan->BTR = (mode                         | \
;;;494                     ((BAUD_DATA(SJW, baud_index)) << 24) | \
;;;495                     ((BAUD_DATA(BS1, baud_index)) << 16) | \
;;;496                     ((BAUD_DATA(BS2, baud_index)) << 20) | \
;;;497                     (BAUD_DATA(RRESCL, baud_index)));
;;;498        if (bxcan_exit_init(pcan) != RT_EOK)
;;;499        {
;;;500            return RT_ERROR;
;;;501        }
;;;502        return RT_EOK;
;;;503    }
000608  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1548|
00060c  2000              MOVS     r0,#0                 ;491
00060e  61e0              STR      r0,[r4,#0x1c]         ;491
000610  69e0              LDR      r0,[r4,#0x1c]         ;492
000612  f0004740          AND      r7,r0,#0xc0000000     ;492
000616  48fd              LDR      r0,|L1.2572|
000618  eb0000c5          ADD      r0,r0,r5,LSL #3       ;493
00061c  6840              LDR      r0,[r0,#4]            ;493
00061e  f3c06001          UBFX     r0,r0,#24,#2          ;493
000622  ea476000          ORR      r0,r7,r0,LSL #24      ;493
000626  49f9              LDR      r1,|L1.2572|
000628  eb0101c5          ADD      r1,r1,r5,LSL #3       ;493
00062c  6849              LDR      r1,[r1,#4]            ;493
00062e  f3c14103          UBFX     r1,r1,#16,#4          ;493
000632  ea404001          ORR      r0,r0,r1,LSL #16      ;493
000636  49f5              LDR      r1,|L1.2572|
000638  eb0101c5          ADD      r1,r1,r5,LSL #3       ;493
00063c  6849              LDR      r1,[r1,#4]            ;493
00063e  f3c15102          UBFX     r1,r1,#20,#3          ;493
000642  ea405001          ORR      r0,r0,r1,LSL #20      ;493
000646  49f1              LDR      r1,|L1.2572|
000648  eb0101c5          ADD      r1,r1,r5,LSL #3       ;493
00064c  8889              LDRH     r1,[r1,#4]            ;493
00064e  f3c10109          UBFX     r1,r1,#0,#10          ;493
000652  4308              ORRS     r0,r0,r1              ;493
000654  61e0              STR      r0,[r4,#0x1c]         ;493
000656  4620              MOV      r0,r4                 ;498
000658  f7fffffe          BL       bxcan_exit_init
00065c  b108              CBZ      r0,|L1.1634|
00065e  2001              MOVS     r0,#1                 ;500
000660  e7d2              B        |L1.1544|
                  |L1.1634|
000662  2000              MOVS     r0,#0                 ;502
000664  e7d0              B        |L1.1544|
;;;504    static rt_err_t bxcancalcbaseoff(struct stm_bxcan *pbxcan, rt_int32_t hdr,
                          ENDP

                  bxcancalcbaseoff PROC
000666  e92d47f0          PUSH     {r4-r10,lr}
;;;505                                     rt_int32_t *pbase, rt_int32_t   *poff)
;;;506    {
00066a  4604              MOV      r4,r0
00066c  461d              MOV      r5,r3
;;;507        rt_uint32_t fifo0start, fifo0end;
;;;508        rt_uint32_t fifo1start, fifo1end;
;;;509        rt_uint32_t ptr;
;;;510        fifo0start = 0;
00066e  2600              MOVS     r6,#0
;;;511        fifo0end = fifo0start 
000670  6de0              LDR      r0,[r4,#0x5c]
000672  eb000906          ADD      r9,r0,r6
000676  6e20              LDR      r0,[r4,#0x60]
000678  4481              ADD      r9,r9,r0
00067a  6e60              LDR      r0,[r4,#0x64]
00067c  4481              ADD      r9,r9,r0
00067e  6ea0              LDR      r0,[r4,#0x68]
000680  eb090c00          ADD      r12,r9,r0
;;;512                   + pbxcan->filtermap[0].id32mask_cnt
;;;513                   + pbxcan->filtermap[0].id32bit_cnt
;;;514                   + pbxcan->filtermap[0].id16mask_cnt
;;;515                   + pbxcan->filtermap[0].id16bit_cnt ;
;;;516        fifo1start = pbxcan->fifo1filteroff * 4;
000684  6da0              LDR      r0,[r4,#0x58]
000686  0087              LSLS     r7,r0,#2
;;;517        fifo1end = fifo1start 
000688  6ee0              LDR      r0,[r4,#0x6c]
00068a  eb000907          ADD      r9,r0,r7
00068e  6f20              LDR      r0,[r4,#0x70]
000690  4481              ADD      r9,r9,r0
000692  6f60              LDR      r0,[r4,#0x74]
000694  4481              ADD      r9,r9,r0
000696  6fa0              LDR      r0,[r4,#0x78]
000698  eb090800          ADD      r8,r9,r0
;;;518                   + pbxcan->filtermap[1].id32mask_cnt
;;;519                   + pbxcan->filtermap[1].id32bit_cnt
;;;520                   + pbxcan->filtermap[1].id16mask_cnt
;;;521                   + pbxcan->filtermap[1].id16bit_cnt ;
;;;522        if (hdr >= fifo0start && hdr < fifo0end)
00069c  42b1              CMP      r1,r6
00069e  d306              BCC      |L1.1710|
0006a0  4561              CMP      r1,r12
0006a2  d204              BCS      |L1.1710|
;;;523        {
;;;524            *pbase = 0;
0006a4  2000              MOVS     r0,#0
0006a6  6010              STR      r0,[r2,#0]
;;;525            ptr = 0;
0006a8  2300              MOVS     r3,#0
;;;526            hdr -= fifo0start; 
0006aa  1b89              SUBS     r1,r1,r6
0006ac  e00b              B        |L1.1734|
                  |L1.1710|
;;;527        }
;;;528        else if (hdr >= fifo1start && hdr < fifo1end)
0006ae  42b9              CMP      r1,r7
0006b0  d306              BCC      |L1.1728|
0006b2  4541              CMP      r1,r8
0006b4  d204              BCS      |L1.1728|
;;;529        {
;;;530            *pbase = pbxcan->fifo1filteroff;
0006b6  6da0              LDR      r0,[r4,#0x58]
0006b8  6010              STR      r0,[r2,#0]
;;;531            ptr = 1;
0006ba  2301              MOVS     r3,#1
;;;532            hdr -= fifo1start; 
0006bc  1bc9              SUBS     r1,r1,r7
0006be  e002              B        |L1.1734|
                  |L1.1728|
;;;533        }
;;;534        else
;;;535        {
;;;536            return RT_ERROR;
0006c0  2001              MOVS     r0,#1
                  |L1.1730|
;;;537        }
;;;538        if (hdr > pbxcan->filtermap[ptr].id32mask_cnt)
;;;539        {
;;;540            hdr -= pbxcan->filtermap[ptr].id32mask_cnt;
;;;541            *pbase += pbxcan->filtermap[ptr].id32mask_cnt;
;;;542        }
;;;543        else
;;;544        {
;;;545            *pbase += hdr;
;;;546            *poff = 0;
;;;547            return RT_EOK;
;;;548        }
;;;549        if (hdr > pbxcan->filtermap[ptr].id32bit_cnt)
;;;550        {
;;;551            hdr -= pbxcan->filtermap[ptr].id32bit_cnt;
;;;552            *pbase += pbxcan->filtermap[ptr].id32bit_cnt / 2;
;;;553        }
;;;554        else
;;;555        {
;;;556            *pbase += hdr / 2;
;;;557            *poff = hdr % 2;
;;;558            return RT_EOK;
;;;559        }
;;;560        if (hdr > pbxcan->filtermap[ptr].id16mask_cnt)
;;;561        {
;;;562            hdr -= pbxcan->filtermap[ptr].id16mask_cnt;
;;;563            *pbase += pbxcan->filtermap[ptr].id16mask_cnt / 2;
;;;564        }
;;;565        else
;;;566        {
;;;567            *pbase += hdr / 2;
;;;568            *poff = hdr % 2;
;;;569            return RT_EOK;
;;;570        }
;;;571        if (hdr > pbxcan->filtermap[ptr].id16bit_cnt)
;;;572        {
;;;573            return RT_ERROR;
;;;574        }
;;;575        else
;;;576        {
;;;577            *pbase += hdr / 4;
;;;578            *poff = hdr % 4;
;;;579            return RT_EOK;
;;;580        }
;;;581    }
0006c2  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1734|
0006c6  f104005c          ADD      r0,r4,#0x5c           ;538
0006ca  eb001003          ADD      r0,r0,r3,LSL #4       ;538
0006ce  6800              LDR      r0,[r0,#0]            ;538
0006d0  4288              CMP      r0,r1                 ;538
0006d2  d20f              BCS      |L1.1780|
0006d4  f104005c          ADD      r0,r4,#0x5c           ;540
0006d8  eb001003          ADD      r0,r0,r3,LSL #4       ;540
0006dc  6800              LDR      r0,[r0,#0]            ;540
0006de  1a09              SUBS     r1,r1,r0              ;540
0006e0  f104005c          ADD      r0,r4,#0x5c           ;541
0006e4  eb001003          ADD      r0,r0,r3,LSL #4       ;541
0006e8  f8d29000          LDR      r9,[r2,#0]            ;541
0006ec  6800              LDR      r0,[r0,#0]            ;541
0006ee  4448              ADD      r0,r0,r9              ;541
0006f0  6010              STR      r0,[r2,#0]            ;541
0006f2  e005              B        |L1.1792|
                  |L1.1780|
0006f4  6810              LDR      r0,[r2,#0]            ;545
0006f6  4408              ADD      r0,r0,r1              ;545
0006f8  6010              STR      r0,[r2,#0]            ;545
0006fa  2000              MOVS     r0,#0                 ;546
0006fc  6028              STR      r0,[r5,#0]            ;546
0006fe  e7e0              B        |L1.1730|
                  |L1.1792|
000700  f104005c          ADD      r0,r4,#0x5c           ;549
000704  eb001003          ADD      r0,r0,r3,LSL #4       ;549
000708  6840              LDR      r0,[r0,#4]            ;549
00070a  4288              CMP      r0,r1                 ;549
00070c  d210              BCS      |L1.1840|
00070e  f104005c          ADD      r0,r4,#0x5c           ;551
000712  eb001003          ADD      r0,r0,r3,LSL #4       ;551
000716  6840              LDR      r0,[r0,#4]            ;551
000718  1a09              SUBS     r1,r1,r0              ;551
00071a  f104005c          ADD      r0,r4,#0x5c           ;552
00071e  eb001003          ADD      r0,r0,r3,LSL #4       ;552
000722  f8d29000          LDR      r9,[r2,#0]            ;552
000726  6840              LDR      r0,[r0,#4]            ;552
000728  eb090050          ADD      r0,r9,r0,LSR #1       ;552
00072c  6010              STR      r0,[r2,#0]            ;552
00072e  e012              B        |L1.1878|
                  |L1.1840|
000730  4608              MOV      r0,r1                 ;556
000732  eb0179d0          ADD      r9,r1,r0,LSR #31      ;556
000736  f8d2a000          LDR      r10,[r2,#0]           ;556
00073a  eb0a0969          ADD      r9,r10,r9,ASR #1      ;556
00073e  f8c29000          STR      r9,[r2,#0]            ;556
000742  eb0179d0          ADD      r9,r1,r0,LSR #31      ;557
000746  ea4f0969          ASR      r9,r9,#1              ;557
00074a  eba10949          SUB      r9,r1,r9,LSL #1       ;557
00074e  f8c59000          STR      r9,[r5,#0]            ;557
000752  2000              MOVS     r0,#0                 ;558
000754  e7b5              B        |L1.1730|
                  |L1.1878|
000756  f104005c          ADD      r0,r4,#0x5c           ;560
00075a  eb001003          ADD      r0,r0,r3,LSL #4       ;560
00075e  6880              LDR      r0,[r0,#8]            ;560
000760  4288              CMP      r0,r1                 ;560
000762  d210              BCS      |L1.1926|
000764  f104005c          ADD      r0,r4,#0x5c           ;562
000768  eb001003          ADD      r0,r0,r3,LSL #4       ;562
00076c  6880              LDR      r0,[r0,#8]            ;562
00076e  1a09              SUBS     r1,r1,r0              ;562
000770  f104005c          ADD      r0,r4,#0x5c           ;563
000774  eb001003          ADD      r0,r0,r3,LSL #4       ;563
000778  f8d29000          LDR      r9,[r2,#0]            ;563
00077c  6880              LDR      r0,[r0,#8]            ;563
00077e  eb090050          ADD      r0,r9,r0,LSR #1       ;563
000782  6010              STR      r0,[r2,#0]            ;563
000784  e012              B        |L1.1964|
                  |L1.1926|
000786  4608              MOV      r0,r1                 ;567
000788  eb0179d0          ADD      r9,r1,r0,LSR #31      ;567
00078c  f8d2a000          LDR      r10,[r2,#0]           ;567
000790  eb0a0969          ADD      r9,r10,r9,ASR #1      ;567
000794  f8c29000          STR      r9,[r2,#0]            ;567
000798  eb0179d0          ADD      r9,r1,r0,LSR #31      ;568
00079c  ea4f0969          ASR      r9,r9,#1              ;568
0007a0  eba10949          SUB      r9,r1,r9,LSL #1       ;568
0007a4  f8c59000          STR      r9,[r5,#0]            ;568
0007a8  2000              MOVS     r0,#0                 ;569
0007aa  e78a              B        |L1.1730|
                  |L1.1964|
0007ac  f104005c          ADD      r0,r4,#0x5c           ;571
0007b0  eb001003          ADD      r0,r0,r3,LSL #4       ;571
0007b4  68c0              LDR      r0,[r0,#0xc]          ;571
0007b6  4288              CMP      r0,r1                 ;571
0007b8  d201              BCS      |L1.1982|
0007ba  2001              MOVS     r0,#1                 ;573
0007bc  e781              B        |L1.1730|
                  |L1.1982|
0007be  4608              MOV      r0,r1                 ;577
0007c0  ea4f79e1          ASR      r9,r1,#31             ;577
0007c4  eb017999          ADD      r9,r1,r9,LSR #30      ;577
0007c8  f8d2a000          LDR      r10,[r2,#0]           ;577
0007cc  eb0a09a9          ADD      r9,r10,r9,ASR #2      ;577
0007d0  f8c29000          STR      r9,[r2,#0]            ;577
0007d4  ea4f79e1          ASR      r9,r1,#31             ;578
0007d8  eb017999          ADD      r9,r1,r9,LSR #30      ;578
0007dc  ea4f09a9          ASR      r9,r9,#2              ;578
0007e0  eba10989          SUB      r9,r1,r9,LSL #2       ;578
0007e4  f8c59000          STR      r9,[r5,#0]            ;578
0007e8  2000              MOVS     r0,#0                 ;579
0007ea  e76a              B        |L1.1730|
;;;582    static void calcandormask(rt_uint32_t *pmask, rt_uint32_t shift, rt_int32_t count)
                          ENDP

                  bxcanfindfilter PROC
;;;669    }
;;;670    static rt_int32_t bxcanfindfilter(struct stm_bxcan *pbxcan, struct rt_can_filter_item *pitem,
0007ec  e92d4fff          PUSH     {r0-r11,lr}
;;;671                                      rt_int32_t type, rt_int32_t *base, rt_int32_t *off)
;;;672    {
0007f0  b083              SUB      sp,sp,#0xc
0007f2  4606              MOV      r6,r0
0007f4  460d              MOV      r5,r1
0007f6  f8dda040          LDR      r10,[sp,#0x40]
;;;673        rt_int32_t i;
;;;674        rt_uint32_t bits, thisid, thismask, shift, found;
;;;675        CAN_FilterRegister_TypeDef *pfilterreg;
;;;676        found = 0;
0007fa  2000              MOVS     r0,#0
0007fc  9001              STR      r0,[sp,#4]
;;;677        switch (type)
0007fe  9805              LDR      r0,[sp,#0x14]
000800  2800              CMP      r0,#0
000802  d07d              BEQ      |L1.2304|
000804  2801              CMP      r0,#1
000806  d07c              BEQ      |L1.2306|
000808  2802              CMP      r0,#2
00080a  d051              BEQ      |L1.2224|
00080c  2803              CMP      r0,#3
00080e  d14e              BNE      |L1.2222|
;;;678        {
;;;679        case 3:
;;;680            shift = 3;
000810  4680              MOV      r8,r0
;;;681            for (i = 0; i < BX_CAN_MAX_FILTERS; i++)
000812  2400              MOVS     r4,#0
000814  e048              B        |L1.2216|
                  |L1.2070|
;;;682            {
;;;683                bits = 0x01 << (i & 0x1F);
000816  f004011f          AND      r1,r4,#0x1f
00081a  2001              MOVS     r0,#1
00081c  fa00fb01          LSL      r11,r0,r1
;;;684                if (bits & (pbxcan->filtermask.id32maskm[i >> 5] & pbxcan->alocmask[i >> 5]))
000820  1161              ASRS     r1,r4,#5
000822  f106000c          ADD      r0,r6,#0xc
000826  f8500021          LDR      r0,[r0,r1,LSL #2]
00082a  1162              ASRS     r2,r4,#5
00082c  f106014c          ADD      r1,r6,#0x4c
000830  f8511022          LDR      r1,[r1,r2,LSL #2]
000834  4008              ANDS     r0,r0,r1
000836  ea00000b          AND      r0,r0,r11
00083a  b398              CBZ      r0,|L1.2212|
;;;685                {
;;;686                    bxcancalcbaseoff(pbxcan, i, base, off);
00083c  4653              MOV      r3,r10
00083e  4621              MOV      r1,r4
000840  4630              MOV      r0,r6
000842  9a06              LDR      r2,[sp,#0x18]
000844  f7fffffe          BL       bxcancalcbaseoff
;;;687                    pfilterreg = &((CAN_FilterRegister_TypeDef *)pbxcan->mfrbase)[*base];
000848  6871              LDR      r1,[r6,#4]
00084a  9806              LDR      r0,[sp,#0x18]
00084c  6800              LDR      r0,[r0,#0]
00084e  eb0109c0          ADD      r9,r1,r0,LSL #3
;;;688                    thisid = (rt_uint32_t)pitem->id << shift;
000852  6828              LDR      r0,[r5,#0]
000854  f0204060          BIC      r0,r0,#0xe0000000
000858  fa00f708          LSL      r7,r0,r8
;;;689                    thismask = (rt_uint32_t)pitem->mask << shift;
00085c  6868              LDR      r0,[r5,#4]
00085e  fa00f008          LSL      r0,r0,r8
000862  9002              STR      r0,[sp,#8]
;;;690                    if (pitem->ide)
000864  6828              LDR      r0,[r5,#0]
000866  f3c07040          UBFX     r0,r0,#29,#1
00086a  b128              CBZ      r0,|L1.2168|
;;;691                    {
;;;692                        thisid |= CAN_ID_EXT;
00086c  f0470704          ORR      r7,r7,#4
;;;693                        thismask |= CAN_ID_EXT;
000870  9802              LDR      r0,[sp,#8]
000872  f0400004          ORR      r0,r0,#4
000876  9002              STR      r0,[sp,#8]
                  |L1.2168|
;;;694                    }
;;;695                    if (pitem->rtr)
000878  6828              LDR      r0,[r5,#0]
00087a  f3c07080          UBFX     r0,r0,#30,#1
00087e  b128              CBZ      r0,|L1.2188|
;;;696                    {
;;;697                        thisid |= CAN_RTR_REMOTE;
000880  f0470702          ORR      r7,r7,#2
;;;698                        thismask |= CAN_RTR_REMOTE;
000884  9802              LDR      r0,[sp,#8]
000886  f0400002          ORR      r0,r0,#2
00088a  9002              STR      r0,[sp,#8]
                  |L1.2188|
;;;699                    }
;;;700                    if (pfilterreg->FR1 == thisid && pfilterreg->FR2 == thismask)
00088c  f8d90000          LDR      r0,[r9,#0]
000890  42b8              CMP      r0,r7
000892  d108              BNE      |L1.2214|
000894  f8d91004          LDR      r1,[r9,#4]
000898  9802              LDR      r0,[sp,#8]
00089a  4281              CMP      r1,r0
00089c  d103              BNE      |L1.2214|
;;;701                    {
;;;702                        found = 1;
00089e  2001              MOVS     r0,#1
0008a0  9001              STR      r0,[sp,#4]
;;;703                        break;
0008a2  e003              B        |L1.2220|
                  |L1.2212|
0008a4  e7ff              B        |L1.2214|
                  |L1.2214|
0008a6  1c64              ADDS     r4,r4,#1              ;681
                  |L1.2216|
0008a8  2c38              CMP      r4,#0x38              ;681
0008aa  dbb4              BLT      |L1.2070|
                  |L1.2220|
0008ac  bf00              NOP      
                  |L1.2222|
;;;704                    }
;;;705                }
;;;706            }
;;;707            break;
0008ae  e114              B        |L1.2778|
                  |L1.2224|
;;;708        case 2:
;;;709            shift = 3;
0008b0  f04f0803          MOV      r8,#3
;;;710            for (i = 0; i < BX_CAN_MAX_FILTERS; i++)
0008b4  2400              MOVS     r4,#0
0008b6  e04a              B        |L1.2382|
                  |L1.2232|
;;;711            {
;;;712                bits = 0x01 << (i % 32);
0008b8  4620              MOV      r0,r4
0008ba  17e1              ASRS     r1,r4,#31
0008bc  eb0461d1          ADD      r1,r4,r1,LSR #27
0008c0  1149              ASRS     r1,r1,#5
0008c2  eba41241          SUB      r2,r4,r1,LSL #5
0008c6  2101              MOVS     r1,#1
0008c8  fa01fb02          LSL      r11,r1,r2
;;;713                if (bits & (pbxcan->filtermask.id32bitm[i >> 5] & pbxcan->alocmask[i >> 5]))
0008cc  1161              ASRS     r1,r4,#5
0008ce  f1060014          ADD      r0,r6,#0x14
0008d2  f8500021          LDR      r0,[r0,r1,LSL #2]
0008d6  1162              ASRS     r2,r4,#5
0008d8  f106014c          ADD      r1,r6,#0x4c
0008dc  f8511022          LDR      r1,[r1,r2,LSL #2]
0008e0  4008              ANDS     r0,r0,r1
0008e2  ea00000b          AND      r0,r0,r11
0008e6  b380              CBZ      r0,|L1.2378|
;;;714                {
;;;715                    bxcancalcbaseoff(pbxcan, i, base, off);
0008e8  4653              MOV      r3,r10
0008ea  4621              MOV      r1,r4
0008ec  4630              MOV      r0,r6
0008ee  9a06              LDR      r2,[sp,#0x18]
0008f0  f7fffffe          BL       bxcancalcbaseoff
;;;716                    pfilterreg = &((CAN_FilterRegister_TypeDef *)pbxcan->mfrbase)[*base];
0008f4  6871              LDR      r1,[r6,#4]
0008f6  9806              LDR      r0,[sp,#0x18]
0008f8  6800              LDR      r0,[r0,#0]
0008fa  eb0109c0          ADD      r9,r1,r0,LSL #3
;;;717                    thisid = (rt_uint32_t)pitem->id << shift;
0008fe  e001              B        |L1.2308|
                  |L1.2304|
000900  e092              B        |L1.2600|
                  |L1.2306|
000902  e028              B        |L1.2390|
                  |L1.2308|
000904  6828              LDR      r0,[r5,#0]
000906  f0204060          BIC      r0,r0,#0xe0000000
00090a  fa00f708          LSL      r7,r0,r8
;;;718                    if (pitem->ide)
00090e  6828              LDR      r0,[r5,#0]
000910  f3c07040          UBFX     r0,r0,#29,#1
000914  b108              CBZ      r0,|L1.2330|
;;;719                    {
;;;720                        thisid |= CAN_ID_EXT;
000916  f0470704          ORR      r7,r7,#4
                  |L1.2330|
;;;721                    }
;;;722                    if (pitem->rtr)
00091a  6828              LDR      r0,[r5,#0]
00091c  f3c07080          UBFX     r0,r0,#30,#1
000920  b108              CBZ      r0,|L1.2342|
;;;723                    {
;;;724                        thisid |= CAN_RTR_REMOTE;
000922  f0470702          ORR      r7,r7,#2
                  |L1.2342|
;;;725                    }
;;;726                    if ((*off == 0 && pfilterreg->FR1 == thisid) ||
000926  f8da0000          LDR      r0,[r10,#0]
00092a  b918              CBNZ     r0,|L1.2356|
00092c  f8d90000          LDR      r0,[r9,#0]
000930  42b8              CMP      r0,r7
000932  d007              BEQ      |L1.2372|
                  |L1.2356|
;;;727                            (*off == 1 && pfilterreg->FR2 == thisid)
000934  f8da0000          LDR      r0,[r10,#0]
000938  2801              CMP      r0,#1
00093a  d107              BNE      |L1.2380|
00093c  f8d90004          LDR      r0,[r9,#4]
000940  42b8              CMP      r0,r7
000942  d103              BNE      |L1.2380|
                  |L1.2372|
;;;728                       )
;;;729                    {
;;;730                        found = 1;
000944  2001              MOVS     r0,#1
000946  9001              STR      r0,[sp,#4]
;;;731                        break;
000948  e003              B        |L1.2386|
                  |L1.2378|
00094a  e7ff              B        |L1.2380|
                  |L1.2380|
00094c  1c64              ADDS     r4,r4,#1              ;710
                  |L1.2382|
00094e  2c38              CMP      r4,#0x38              ;710
000950  dbb2              BLT      |L1.2232|
                  |L1.2386|
000952  bf00              NOP      
;;;732                    }
;;;733                }
;;;734            }
;;;735            break;
000954  e0c1              B        |L1.2778|
                  |L1.2390|
;;;736        case 1:
;;;737            shift = 5;
000956  f04f0805          MOV      r8,#5
;;;738            for (i = 0; i < BX_CAN_MAX_FILTERS; i++)
00095a  2400              MOVS     r4,#0
00095c  e060              B        |L1.2592|
                  |L1.2398|
;;;739            {
;;;740                bits = 0x01 << (i % 32);
00095e  4620              MOV      r0,r4
000960  17e1              ASRS     r1,r4,#31
000962  eb0461d1          ADD      r1,r4,r1,LSR #27
000966  1149              ASRS     r1,r1,#5
000968  eba41241          SUB      r2,r4,r1,LSL #5
00096c  2101              MOVS     r1,#1
00096e  fa01fb02          LSL      r11,r1,r2
;;;741                if (bits & (pbxcan->filtermask.id16maskm[i >> 5] & pbxcan->alocmask[i >> 5]))
000972  1161              ASRS     r1,r4,#5
000974  f106001c          ADD      r0,r6,#0x1c
000978  f8500021          LDR      r0,[r0,r1,LSL #2]
00097c  1162              ASRS     r2,r4,#5
00097e  f106014c          ADD      r1,r6,#0x4c
000982  f8511022          LDR      r1,[r1,r2,LSL #2]
000986  4008              ANDS     r0,r0,r1
000988  ea00000b          AND      r0,r0,r11
00098c  b3e8              CBZ      r0,|L1.2570|
;;;742                {
;;;743                    bxcancalcbaseoff(pbxcan, i, base, off);
00098e  4653              MOV      r3,r10
000990  4621              MOV      r1,r4
000992  4630              MOV      r0,r6
000994  9a06              LDR      r2,[sp,#0x18]
000996  f7fffffe          BL       bxcancalcbaseoff
;;;744                    pfilterreg = &((CAN_FilterRegister_TypeDef *)pbxcan->mfrbase)[*base];
00099a  6871              LDR      r1,[r6,#4]
00099c  9806              LDR      r0,[sp,#0x18]
00099e  6800              LDR      r0,[r0,#0]
0009a0  eb0109c0          ADD      r9,r1,r0,LSL #3
;;;745                    thisid = pitem->id << shift;
0009a4  6828              LDR      r0,[r5,#0]
0009a6  f0204060          BIC      r0,r0,#0xe0000000
0009aa  fa00f708          LSL      r7,r0,r8
;;;746                    if (pitem->rtr)
0009ae  6828              LDR      r0,[r5,#0]
0009b0  f3c07080          UBFX     r0,r0,#30,#1
0009b4  b128              CBZ      r0,|L1.2498|
;;;747                    {
;;;748                        thisid |= CAN_RTR_REMOTE << (shift - 2);
0009b6  f1a80002          SUB      r0,r8,#2
0009ba  2102              MOVS     r1,#2
0009bc  fa01f000          LSL      r0,r1,r0
0009c0  4307              ORRS     r7,r7,r0
                  |L1.2498|
;;;749                    }
;;;750                    thismask = pitem->mask << shift;
0009c2  6868              LDR      r0,[r5,#4]
0009c4  fa00f008          LSL      r0,r0,r8
0009c8  9002              STR      r0,[sp,#8]
;;;751                    if (pitem->rtr)
0009ca  6828              LDR      r0,[r5,#0]
0009cc  f3c07080          UBFX     r0,r0,#30,#1
0009d0  b138              CBZ      r0,|L1.2530|
;;;752                    {
;;;753                        thismask |= CAN_RTR_REMOTE << (shift - 2);
0009d2  f1a80002          SUB      r0,r8,#2
0009d6  2102              MOVS     r1,#2
0009d8  fa01f000          LSL      r0,r1,r0
0009dc  9902              LDR      r1,[sp,#8]
0009de  4308              ORRS     r0,r0,r1
0009e0  9002              STR      r0,[sp,#8]
                  |L1.2530|
;;;754                    }
;;;755                    if (*off == 0 && pfilterreg->FR1 == ((thisid & 0x0000FFFF) | ((thismask & 0x0000FFFF) << 16)) ||
0009e2  f8da0000          LDR      r0,[r10,#0]
0009e6  b938              CBNZ     r0,|L1.2552|
0009e8  f8d92000          LDR      r2,[r9,#0]
0009ec  4639              MOV      r1,r7
0009ee  9802              LDR      r0,[sp,#8]
0009f0  f360411f          BFI      r1,r0,#16,#16
0009f4  428a              CMP      r2,r1
0009f6  d00f              BEQ      |L1.2584|
                  |L1.2552|
;;;756                            *off == 1 && pfilterreg->FR2 == ((thisid & 0x0000FFFF) | ((thismask & 0x0000FFFF) << 16))
0009f8  f8da0000          LDR      r0,[r10,#0]
0009fc  2801              CMP      r0,#1
0009fe  d10e              BNE      |L1.2590|
000a00  f8d92004          LDR      r2,[r9,#4]
000a04  4639              MOV      r1,r7
000a06  9802              LDR      r0,[sp,#8]
000a08  e002              B        |L1.2576|
                  |L1.2570|
000a0a  e008              B        |L1.2590|
                  |L1.2572|
                          DCD      bxcan_baud_rate_tab
                  |L1.2576|
000a10  f360411f          BFI      r1,r0,#16,#16
000a14  428a              CMP      r2,r1
000a16  d102              BNE      |L1.2590|
                  |L1.2584|
;;;757                       )
;;;758                    {
;;;759                        found = 1;
000a18  2001              MOVS     r0,#1
000a1a  9001              STR      r0,[sp,#4]
;;;760                        break;
000a1c  e002              B        |L1.2596|
                  |L1.2590|
000a1e  1c64              ADDS     r4,r4,#1              ;738
                  |L1.2592|
000a20  2c38              CMP      r4,#0x38              ;738
000a22  db9c              BLT      |L1.2398|
                  |L1.2596|
000a24  bf00              NOP      
;;;761                    }
;;;762                }
;;;763            }
;;;764            break;
000a26  e058              B        |L1.2778|
                  |L1.2600|
;;;765        case 0:
;;;766            shift = 5;
000a28  f04f0805          MOV      r8,#5
;;;767            for (i = 0; i < BX_CAN_MAX_FILTERS; i++)
000a2c  2400              MOVS     r4,#0
000a2e  e050              B        |L1.2770|
                  |L1.2608|
;;;768            {
;;;769                bits = 0x01 << (i % 32);
000a30  4620              MOV      r0,r4
000a32  17e1              ASRS     r1,r4,#31
000a34  eb0461d1          ADD      r1,r4,r1,LSR #27
000a38  1149              ASRS     r1,r1,#5
000a3a  eba41241          SUB      r2,r4,r1,LSL #5
000a3e  2101              MOVS     r1,#1
000a40  fa01fb02          LSL      r11,r1,r2
;;;770                if (bits & (pbxcan->filtermask.id16bitm[i >> 5] & pbxcan->alocmask[i >> 5]))
000a44  1161              ASRS     r1,r4,#5
000a46  f1060024          ADD      r0,r6,#0x24
000a4a  f8500021          LDR      r0,[r0,r1,LSL #2]
000a4e  1162              ASRS     r2,r4,#5
000a50  f106014c          ADD      r1,r6,#0x4c
000a54  f8511022          LDR      r1,[r1,r2,LSL #2]
000a58  4008              ANDS     r0,r0,r1
000a5a  ea00000b          AND      r0,r0,r11
000a5e  b3b0              CBZ      r0,|L1.2766|
;;;771                {
;;;772                    bxcancalcbaseoff(pbxcan, i, base, off);
000a60  4653              MOV      r3,r10
000a62  4621              MOV      r1,r4
000a64  4630              MOV      r0,r6
000a66  9a06              LDR      r2,[sp,#0x18]
000a68  f7fffffe          BL       bxcancalcbaseoff
;;;773                    pfilterreg = &((CAN_FilterRegister_TypeDef *)pbxcan->mfrbase)[*base];
000a6c  6871              LDR      r1,[r6,#4]
000a6e  9806              LDR      r0,[sp,#0x18]
000a70  6800              LDR      r0,[r0,#0]
000a72  eb0109c0          ADD      r9,r1,r0,LSL #3
;;;774                    thisid = pitem->id << shift;
000a76  6828              LDR      r0,[r5,#0]
000a78  f0204060          BIC      r0,r0,#0xe0000000
000a7c  fa00f708          LSL      r7,r0,r8
;;;775                    if (pitem->rtr)
000a80  6828              LDR      r0,[r5,#0]
000a82  f3c07080          UBFX     r0,r0,#30,#1
000a86  b128              CBZ      r0,|L1.2708|
;;;776                    {
;;;777                        thisid |= CAN_RTR_REMOTE << (shift - 2);
000a88  f1a80002          SUB      r0,r8,#2
000a8c  2102              MOVS     r1,#2
000a8e  fa01f000          LSL      r0,r1,r0
000a92  4307              ORRS     r7,r7,r0
                  |L1.2708|
;;;778                    }
;;;779                    if (*off < 2 && ((rt_uint16_t *)&pfilterreg->FR1)[*off & 0x01] == thisid ||
000a94  f8da0000          LDR      r0,[r10,#0]
000a98  2802              CMP      r0,#2
000a9a  da07              BGE      |L1.2732|
000a9c  f89a0000          LDRB     r0,[r10,#0]
000aa0  f0000001          AND      r0,r0,#1
000aa4  f8390010          LDRH     r0,[r9,r0,LSL #1]
000aa8  42b8              CMP      r0,r7
000aaa  d00d              BEQ      |L1.2760|
                  |L1.2732|
;;;780                            *off >= 2 && ((rt_uint16_t *)&pfilterreg->FR2)[*off & 0x01] == thisid)
000aac  f8da0000          LDR      r0,[r10,#0]
000ab0  2802              CMP      r0,#2
000ab2  db0d              BLT      |L1.2768|
000ab4  f89a0000          LDRB     r0,[r10,#0]
000ab8  f0000101          AND      r1,r0,#1
000abc  f1090004          ADD      r0,r9,#4
000ac0  f8300011          LDRH     r0,[r0,r1,LSL #1]
000ac4  42b8              CMP      r0,r7
000ac6  d103              BNE      |L1.2768|
                  |L1.2760|
;;;781                    {
;;;782                        found = 1;
000ac8  2001              MOVS     r0,#1
000aca  9001              STR      r0,[sp,#4]
;;;783                        break;
000acc  e003              B        |L1.2774|
                  |L1.2766|
000ace  e7ff              B        |L1.2768|
                  |L1.2768|
000ad0  1c64              ADDS     r4,r4,#1              ;767
                  |L1.2770|
000ad2  2c38              CMP      r4,#0x38              ;767
000ad4  dbac              BLT      |L1.2608|
                  |L1.2774|
000ad6  bf00              NOP      
;;;784                    }
;;;785                }
;;;786            }
;;;787            break;
000ad8  bf00              NOP      
                  |L1.2778|
000ada  bf00              NOP                            ;707
;;;788        }
;;;789        if (found)
000adc  9801              LDR      r0,[sp,#4]
000ade  b118              CBZ      r0,|L1.2792|
;;;790        {
;;;791            return i;
000ae0  4620              MOV      r0,r4
                  |L1.2786|
;;;792        }
;;;793        return -1;
;;;794    }
000ae2  b007              ADD      sp,sp,#0x1c
000ae4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2792|
000ae8  f04f30ff          MOV      r0,#0xffffffff        ;793
000aec  e7f9              B        |L1.2786|
;;;795    extern int __rt_ffs(int value);
                          ENDP

                  bxcanallocfilter PROC
;;;796    static rt_err_t bxcanallocfilter(rt_uint32_t *pmask, rt_uint32_t *palocmask,
000aee  e92d41f0          PUSH     {r4-r8,lr}
;;;797                                     rt_uint32_t count, rt_int32_t *hdr)
;;;798    {
000af2  4606              MOV      r6,r0
000af4  460d              MOV      r5,r1
000af6  4617              MOV      r7,r2
000af8  4698              MOV      r8,r3
;;;799        rt_int32_t i;
;;;800        for (i = 0; i < count; i++)
000afa  2400              MOVS     r4,#0
000afc  e02a              B        |L1.2900|
                  |L1.2814|
;;;801        {
;;;802            rt_enter_critical();
000afe  f7fffffe          BL       rt_enter_critical
;;;803            if ((pmask[i] & ~palocmask[i]) != 0)
000b02  f8560024          LDR      r0,[r6,r4,LSL #2]
000b06  f8551024          LDR      r1,[r5,r4,LSL #2]
000b0a  4388              BICS     r0,r0,r1
000b0c  b1f8              CBZ      r0,|L1.2894|
;;;804            {
;;;805                *hdr = __rt_ffs(pmask[i] & ~palocmask[i]) - 1 + i * 32;
000b0e  f8561024          LDR      r1,[r6,r4,LSL #2]
000b12  f8552024          LDR      r2,[r5,r4,LSL #2]
000b16  ea210002          BIC      r0,r1,r2
000b1a  f7fffffe          BL       __rt_ffs
000b1e  1e40              SUBS     r0,r0,#1
000b20  eb001044          ADD      r0,r0,r4,LSL #5
000b24  f8c80000          STR      r0,[r8,#0]
;;;806                palocmask[i] |= 0x01 << (*hdr % 0x1F);
000b28  211f              MOVS     r1,#0x1f
000b2a  f8d80000          LDR      r0,[r8,#0]
000b2e  fb90f2f1          SDIV     r2,r0,r1
000b32  fb010112          MLS      r1,r1,r2,r0
000b36  2001              MOVS     r0,#1
000b38  4088              LSLS     r0,r0,r1
000b3a  f8551024          LDR      r1,[r5,r4,LSL #2]
000b3e  4308              ORRS     r0,r0,r1
000b40  f8450024          STR      r0,[r5,r4,LSL #2]
;;;807                rt_exit_critical();
000b44  f7fffffe          BL       rt_exit_critical
;;;808                return RT_EOK;
000b48  2000              MOVS     r0,#0
                  |L1.2890|
;;;809            }
;;;810            rt_exit_critical();
;;;811        }
;;;812        if (i >= count)
;;;813        {
;;;814            return RT_ENOMEM;
;;;815        }
;;;816        return RT_EOK;
;;;817    }
000b4a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2894|
000b4e  f7fffffe          BL       rt_exit_critical
000b52  1c64              ADDS     r4,r4,#1              ;800
                  |L1.2900|
000b54  42bc              CMP      r4,r7                 ;800
000b56  d3d2              BCC      |L1.2814|
000b58  42bc              CMP      r4,r7                 ;812
000b5a  d301              BCC      |L1.2912|
000b5c  2005              MOVS     r0,#5                 ;814
000b5e  e7f4              B        |L1.2890|
                  |L1.2912|
000b60  2000              MOVS     r0,#0                 ;816
000b62  e7f2              B        |L1.2890|
;;;818    static rt_err_t bxcanallocnewfilter(struct stm_bxcan *pbxcan, rt_int32_t actived,
                          ENDP

                  bxcanallocnewfilter PROC
000b64  e92d47f0          PUSH     {r4-r10,lr}
;;;819                                        rt_int32_t type, rt_int32_t *hdr, rt_int32_t *base, rt_int32_t *off)
;;;820    {
000b68  4604              MOV      r4,r0
000b6a  468a              MOV      r10,r1
000b6c  4617              MOV      r7,r2
000b6e  461e              MOV      r6,r3
000b70  e9dd8908          LDRD     r8,r9,[sp,#0x20]
;;;821        rt_err_t res;
;;;822        *hdr = -1;
000b74  f04f30ff          MOV      r0,#0xffffffff
000b78  6030              STR      r0,[r6,#0]
;;;823        switch (type)
000b7a  b31f              CBZ      r7,|L1.3012|
000b7c  2f01              CMP      r7,#1
000b7e  d017              BEQ      |L1.2992|
000b80  2f02              CMP      r7,#2
000b82  d00b              BEQ      |L1.2972|
000b84  2f03              CMP      r7,#3
000b86  d127              BNE      |L1.3032|
;;;824        {
;;;825        case 0x03:
;;;826            res = bxcanallocfilter(pbxcan->filtermask.id32maskm, pbxcan->alocmask,
000b88  4633              MOV      r3,r6
000b8a  2202              MOVS     r2,#2
000b8c  f104014c          ADD      r1,r4,#0x4c
000b90  f104000c          ADD      r0,r4,#0xc
000b94  f7fffffe          BL       bxcanallocfilter
000b98  4605              MOV      r5,r0
;;;827                                   BX_CAN_FILTER_MAX_ARRAY_SIZE, hdr);
;;;828            break;
000b9a  e01d              B        |L1.3032|
                  |L1.2972|
;;;829        case 0x02:
;;;830            res = bxcanallocfilter(pbxcan->filtermask.id32bitm, pbxcan->alocmask,
000b9c  4633              MOV      r3,r6
000b9e  2202              MOVS     r2,#2
000ba0  f104014c          ADD      r1,r4,#0x4c
000ba4  f1040014          ADD      r0,r4,#0x14
000ba8  f7fffffe          BL       bxcanallocfilter
000bac  4605              MOV      r5,r0
;;;831                                   BX_CAN_FILTER_MAX_ARRAY_SIZE, hdr);
;;;832            break;
000bae  e013              B        |L1.3032|
                  |L1.2992|
;;;833        case 0x01:
;;;834            res = bxcanallocfilter(pbxcan->filtermask.id16maskm, pbxcan->alocmask,
000bb0  4633              MOV      r3,r6
000bb2  2202              MOVS     r2,#2
000bb4  f104014c          ADD      r1,r4,#0x4c
000bb8  f104001c          ADD      r0,r4,#0x1c
000bbc  f7fffffe          BL       bxcanallocfilter
000bc0  4605              MOV      r5,r0
;;;835                                   BX_CAN_FILTER_MAX_ARRAY_SIZE, hdr);
;;;836            break;
000bc2  e009              B        |L1.3032|
                  |L1.3012|
;;;837        case 0x00:
;;;838            res = bxcanallocfilter(pbxcan->filtermask.id16bitm, pbxcan->alocmask,
000bc4  4633              MOV      r3,r6
000bc6  2202              MOVS     r2,#2
000bc8  f104014c          ADD      r1,r4,#0x4c
000bcc  f1040024          ADD      r0,r4,#0x24
000bd0  f7fffffe          BL       bxcanallocfilter
000bd4  4605              MOV      r5,r0
;;;839                                   BX_CAN_FILTER_MAX_ARRAY_SIZE, hdr);
;;;840            break;
000bd6  bf00              NOP      
                  |L1.3032|
000bd8  bf00              NOP                            ;828
;;;841        }
;;;842        if (res != RT_EOK  || *hdr < 0)
000bda  b915              CBNZ     r5,|L1.3042|
000bdc  6830              LDR      r0,[r6,#0]
000bde  2800              CMP      r0,#0
000be0  da02              BGE      |L1.3048|
                  |L1.3042|
;;;843        {
;;;844            return RT_ENOMEM;
000be2  2005              MOVS     r0,#5
                  |L1.3044|
;;;845        }
;;;846        bxcancalcbaseoff(pbxcan, *hdr, base, off);
;;;847        return RT_EOK;
;;;848    }
000be4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.3048|
000be8  464b              MOV      r3,r9                 ;846
000bea  4642              MOV      r2,r8                 ;846
000bec  4620              MOV      r0,r4                 ;846
000bee  6831              LDR      r1,[r6,#0]            ;846
000bf0  f7fffffe          BL       bxcancalcbaseoff
000bf4  2000              MOVS     r0,#0                 ;847
000bf6  e7f5              B        |L1.3044|
;;;849    static rt_err_t bxmodifyfilter(struct stm_bxcan *pbxcan, struct rt_can_filter_item *pitem, rt_uint32_t actived)
                          ENDP

                  bxmodifyfilter PROC
000bf8  e92d4ff0          PUSH     {r4-r11,lr}
;;;850    {
000bfc  b08d              SUB      sp,sp,#0x34
000bfe  4680              MOV      r8,r0
000c00  460c              MOV      r4,r1
000c02  4617              MOV      r7,r2
;;;851        rt_int32_t fcase;
;;;852        rt_err_t res;
;;;853        rt_int32_t hdr, fbase, foff;
;;;854        rt_uint32_t ID[2];
;;;855        rt_uint32_t shift;
;;;856        rt_uint32_t thisid;
;;;857        rt_uint32_t thismask;
;;;858        CAN_FilterInitTypeDef  CAN_FilterInitStructure;
;;;859        CAN_FilterRegister_TypeDef *pfilterreg;
;;;860    
;;;861        fcase = (pitem->mode | (pitem->ide << 1));
000c04  6820              LDR      r0,[r4,#0]
000c06  0fc0              LSRS     r0,r0,#31
000c08  6821              LDR      r1,[r4,#0]
000c0a  f3c17140          UBFX     r1,r1,#29,#1
000c0e  ea400041          ORR      r0,r0,r1,LSL #1
000c12  900c              STR      r0,[sp,#0x30]
;;;862        hdr = bxcanfindfilter(pbxcan, pitem, fcase, &fbase, &foff);
000c14  a809              ADD      r0,sp,#0x24
000c16  ab0a              ADD      r3,sp,#0x28
000c18  9000              STR      r0,[sp,#0]
000c1a  4621              MOV      r1,r4
000c1c  4640              MOV      r0,r8
000c1e  9a0c              LDR      r2,[sp,#0x30]
000c20  f7fffffe          BL       bxcanfindfilter
000c24  900b              STR      r0,[sp,#0x2c]
;;;863        if (hdr < 0)
000c26  980b              LDR      r0,[sp,#0x2c]
000c28  2800              CMP      r0,#0
000c2a  da43              BGE      |L1.3252|
;;;864        {
;;;865            if (!actived)
000c2c  b91f              CBNZ     r7,|L1.3126|
;;;866            {
;;;867                return RT_EOK;
000c2e  2000              MOVS     r0,#0
                  |L1.3120|
;;;868            }
;;;869            else if (pitem->hdr == -1)
;;;870            {
;;;871                res = bxcanallocnewfilter(pbxcan, actived, fcase, &hdr, &fbase, &foff);
;;;872                if (res != RT_EOK)
;;;873                {
;;;874                    return res;
;;;875                }
;;;876            }
;;;877            else if (pitem->hdr >= 0)
;;;878            {
;;;879                rt_enter_critical();
;;;880                res = bxcancalcbaseoff(pbxcan, pitem->hdr, &fbase, &foff);
;;;881                if (res != RT_EOK)
;;;882                {
;;;883                    return res;
;;;884                }
;;;885                hdr = pitem->hdr;
;;;886                if (actived)
;;;887                {
;;;888                    pbxcan->alocmask[hdr >> 5] |= 0x01 << (hdr % 0x1F);
;;;889                }
;;;890                rt_exit_critical();
;;;891            }
;;;892        }
;;;893        else
;;;894        {
;;;895            if (!actived)
;;;896            {
;;;897                pitem->hdr = hdr;
;;;898            }
;;;899            else if (hdr >= 0 && (pitem->hdr >= 0 || pitem->hdr == -1))
;;;900            {
;;;901                pitem->hdr = hdr;
;;;902                return RT_EBUSY;
;;;903            }
;;;904        }
;;;905    
;;;906        pitem->hdr =  hdr;
;;;907        pfilterreg = &((CAN_FilterRegister_TypeDef *)pbxcan->mfrbase)[fbase];
;;;908        ID[0] = pfilterreg->FR1;
;;;909        ID[1] = pfilterreg->FR2;
;;;910        CAN_FilterInitStructure.CAN_FilterNumber = (pfilterreg - &CAN1->sFilterRegister[0]);
;;;911        if (pitem->mode)
;;;912        {
;;;913            CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
;;;914        }
;;;915        else
;;;916        {
;;;917            CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
;;;918        }
;;;919        if (pitem->ide)
;;;920        {
;;;921            CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
;;;922        }
;;;923        else
;;;924        {
;;;925            CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_16bit;
;;;926        }
;;;927        switch (fcase)
;;;928        {
;;;929        case 0x03:
;;;930            if (actived)
;;;931            {
;;;932                shift = 3;
;;;933                thisid = (rt_uint32_t)pitem->id << shift;
;;;934                thismask = (rt_uint32_t)pitem->mask << shift;
;;;935                if (pitem->ide)
;;;936                {
;;;937                    thisid |= CAN_ID_EXT;
;;;938                    thismask |= CAN_ID_EXT;
;;;939                }
;;;940                if (pitem->rtr)
;;;941                {
;;;942                    thisid |= CAN_RTR_REMOTE;
;;;943                    thismask |= CAN_RTR_REMOTE;
;;;944                }
;;;945                ID[0] = thisid;
;;;946                ID[1] = thismask;
;;;947            }
;;;948            else
;;;949            {
;;;950                ID[0] = 0xFFFFFFFF;
;;;951                ID[1] = 0xFFFFFFFF;
;;;952            }
;;;953            break;
;;;954        case 0x02:
;;;955            if (actived)
;;;956            {
;;;957                shift = 3;
;;;958                thisid = (rt_uint32_t)pitem->id << shift;
;;;959                if (pitem->ide)
;;;960                {
;;;961                    thisid |= CAN_ID_EXT;
;;;962                }
;;;963                if (pitem->rtr)
;;;964                {
;;;965                    thisid |= CAN_RTR_REMOTE;
;;;966                }
;;;967                ID[foff] = thisid;
;;;968            }
;;;969            else
;;;970            {
;;;971                ID[foff] = 0xFFFFFFFF;
;;;972            }
;;;973            break;
;;;974        case 0x01:
;;;975            if (actived)
;;;976            {
;;;977                shift = 5;
;;;978                thisid = pitem->id << shift;
;;;979                if (pitem->rtr)
;;;980                {
;;;981                    thisid |= CAN_RTR_REMOTE << (shift - 2);
;;;982                }
;;;983                thismask = pitem->mask << shift;
;;;984                if (pitem->rtr)
;;;985                {
;;;986                    thismask |= CAN_RTR_REMOTE << (shift - 2);
;;;987                }
;;;988                ID[foff] = (thisid & 0x0000FFFF) | ((thismask & 0x0000FFFF) << 16);
;;;989            }
;;;990            else
;;;991            {
;;;992                ID[foff] = 0xFFFFFFFF;
;;;993            }
;;;994            break;
;;;995        case 0x00:
;;;996            if (actived)
;;;997            {
;;;998                shift = 5;
;;;999                thisid = pitem->id << shift;
;;;1000               if (pitem->rtr)
;;;1001               {
;;;1002                   thisid |= CAN_RTR_REMOTE << (shift - 2);
;;;1003               }
;;;1004               ((rt_uint16_t *) ID)[foff] = thisid;
;;;1005           }
;;;1006           else
;;;1007           {
;;;1008               ((rt_uint16_t *) ID)[foff] = 0xFFFF;
;;;1009           }
;;;1010           break;
;;;1011       }
;;;1012       if(pitem->ide)
;;;1013       {
;;;1014           CAN_FilterInitStructure.CAN_FilterIdHigh = (ID[0] & 0xFFFF0000) >> 16;
;;;1015           CAN_FilterInitStructure.CAN_FilterIdLow = ID[0] & 0x0000FFFF;
;;;1016           CAN_FilterInitStructure.CAN_FilterMaskIdHigh = (ID[1] & 0xFFFF0000) >> 16;
;;;1017           CAN_FilterInitStructure.CAN_FilterMaskIdLow = ((ID[1]) & 0x0000FFFF);
;;;1018       }
;;;1019       else
;;;1020       {
;;;1021           CAN_FilterInitStructure.CAN_FilterIdHigh = ((ID[1]) & 0x0000FFFF);
;;;1022           CAN_FilterInitStructure.CAN_FilterIdLow = ID[0] & 0x0000FFFF;
;;;1023           CAN_FilterInitStructure.CAN_FilterMaskIdHigh = (ID[1] & 0xFFFF0000) >> 16;
;;;1024           CAN_FilterInitStructure.CAN_FilterMaskIdLow = (ID[0] & 0xFFFF0000) >> 16;
;;;1025       }
;;;1026       if (fbase >= pbxcan->fifo1filteroff)
;;;1027       {
;;;1028           CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 1;
;;;1029       }
;;;1030       else
;;;1031       {
;;;1032           CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
;;;1033       }
;;;1034       if (ID[0] != 0xFFFFFFFF || ID[1] != 0xFFFFFFFF)
;;;1035       {
;;;1036           CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
;;;1037       }
;;;1038       else
;;;1039       {
;;;1040           CAN_FilterInitStructure.CAN_FilterActivation = DISABLE;
;;;1041       }
;;;1042       if (!actived)
;;;1043       {
;;;1044           rt_enter_critical();
;;;1045           pbxcan->alocmask[hdr >> 5] &= ~(0x01 << (hdr % 0x1F));
;;;1046           rt_exit_critical();
;;;1047       }
;;;1048       CAN_FilterInit(&CAN_FilterInitStructure);
;;;1049       return RT_EOK;
;;;1050   }
000c30  b00d              ADD      sp,sp,#0x34
000c32  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3126|
000c36  68a0              LDR      r0,[r4,#8]            ;869
000c38  1c40              ADDS     r0,r0,#1              ;869
000c3a  b978              CBNZ     r0,|L1.3164|
000c3c  a809              ADD      r0,sp,#0x24           ;871
000c3e  a90a              ADD      r1,sp,#0x28           ;871
000c40  ab0b              ADD      r3,sp,#0x2c           ;871
000c42  e9cd1000          STRD     r1,r0,[sp,#0]         ;871
000c46  4639              MOV      r1,r7                 ;871
000c48  4640              MOV      r0,r8                 ;871
000c4a  9a0c              LDR      r2,[sp,#0x30]         ;871
000c4c  f7fffffe          BL       bxcanallocnewfilter
000c50  4682              MOV      r10,r0                ;871
000c52  f1ba0f00          CMP      r10,#0                ;872
000c56  d03e              BEQ      |L1.3286|
000c58  4650              MOV      r0,r10                ;874
000c5a  e7e9              B        |L1.3120|
                  |L1.3164|
000c5c  68a0              LDR      r0,[r4,#8]            ;877
000c5e  2800              CMP      r0,#0                 ;877
000c60  db39              BLT      |L1.3286|
000c62  f7fffffe          BL       rt_enter_critical
000c66  ab09              ADD      r3,sp,#0x24           ;880
000c68  aa0a              ADD      r2,sp,#0x28           ;880
000c6a  4640              MOV      r0,r8                 ;880
000c6c  68a1              LDR      r1,[r4,#8]            ;880
000c6e  f7fffffe          BL       bxcancalcbaseoff
000c72  4682              MOV      r10,r0                ;880
000c74  f1ba0f00          CMP      r10,#0                ;881
000c78  d001              BEQ      |L1.3198|
000c7a  4650              MOV      r0,r10                ;883
000c7c  e7d8              B        |L1.3120|
                  |L1.3198|
000c7e  68a0              LDR      r0,[r4,#8]            ;885
000c80  900b              STR      r0,[sp,#0x2c]         ;885
000c82  b1a7              CBZ      r7,|L1.3246|
000c84  211f              MOVS     r1,#0x1f              ;888
000c86  980b              LDR      r0,[sp,#0x2c]         ;888
000c88  fb90f2f1          SDIV     r2,r0,r1              ;888
000c8c  fb010112          MLS      r1,r1,r2,r0           ;888
000c90  2001              MOVS     r0,#1                 ;888
000c92  4088              LSLS     r0,r0,r1              ;888
000c94  990b              LDR      r1,[sp,#0x2c]         ;888
000c96  114a              ASRS     r2,r1,#5              ;888
000c98  f108014c          ADD      r1,r8,#0x4c           ;888
000c9c  f8511022          LDR      r1,[r1,r2,LSL #2]     ;888
000ca0  4308              ORRS     r0,r0,r1              ;888
000ca2  990b              LDR      r1,[sp,#0x2c]         ;888
000ca4  114a              ASRS     r2,r1,#5              ;888
000ca6  f108014c          ADD      r1,r8,#0x4c           ;888
000caa  f8410022          STR      r0,[r1,r2,LSL #2]     ;888
                  |L1.3246|
000cae  f7fffffe          BL       rt_exit_critical
000cb2  e010              B        |L1.3286|
                  |L1.3252|
000cb4  b917              CBNZ     r7,|L1.3260|
000cb6  980b              LDR      r0,[sp,#0x2c]         ;897
000cb8  60a0              STR      r0,[r4,#8]            ;897
000cba  e00c              B        |L1.3286|
                  |L1.3260|
000cbc  980b              LDR      r0,[sp,#0x2c]         ;899
000cbe  2800              CMP      r0,#0                 ;899
000cc0  db09              BLT      |L1.3286|
000cc2  68a0              LDR      r0,[r4,#8]            ;899
000cc4  2800              CMP      r0,#0                 ;899
000cc6  da02              BGE      |L1.3278|
000cc8  68a0              LDR      r0,[r4,#8]            ;899
000cca  1c40              ADDS     r0,r0,#1              ;899
000ccc  b918              CBNZ     r0,|L1.3286|
                  |L1.3278|
000cce  980b              LDR      r0,[sp,#0x2c]         ;901
000cd0  60a0              STR      r0,[r4,#8]            ;901
000cd2  2007              MOVS     r0,#7                 ;902
000cd4  e7ac              B        |L1.3120|
                  |L1.3286|
000cd6  980b              LDR      r0,[sp,#0x2c]         ;906
000cd8  60a0              STR      r0,[r4,#8]            ;906
000cda  f8d80004          LDR      r0,[r8,#4]            ;907
000cde  990a              LDR      r1,[sp,#0x28]         ;907
000ce0  eb000bc1          ADD      r11,r0,r1,LSL #3      ;907
000ce4  f8db0000          LDR      r0,[r11,#0]           ;908
000ce8  9007              STR      r0,[sp,#0x1c]         ;908
000cea  f8db0004          LDR      r0,[r11,#4]           ;909
000cee  9008              STR      r0,[sp,#0x20]         ;909
000cf0  f44f60c8          MOV      r0,#0x640             ;910
000cf4  ebab0000          SUB      r0,r11,r0             ;910
000cf8  f3c000c7          UBFX     r0,r0,#3,#8           ;910
000cfc  f88d0016          STRB     r0,[sp,#0x16]         ;910
000d00  6820              LDR      r0,[r4,#0]            ;911
000d02  0fc0              LSRS     r0,r0,#31             ;911
000d04  b118              CBZ      r0,|L1.3342|
000d06  2000              MOVS     r0,#0                 ;913
000d08  f88d0017          STRB     r0,[sp,#0x17]         ;913
000d0c  e002              B        |L1.3348|
                  |L1.3342|
000d0e  2001              MOVS     r0,#1                 ;917
000d10  f88d0017          STRB     r0,[sp,#0x17]         ;917
                  |L1.3348|
000d14  6820              LDR      r0,[r4,#0]            ;919
000d16  f3c07040          UBFX     r0,r0,#29,#1          ;919
000d1a  b118              CBZ      r0,|L1.3364|
000d1c  2001              MOVS     r0,#1                 ;921
000d1e  f88d0018          STRB     r0,[sp,#0x18]         ;921
000d22  e002              B        |L1.3370|
                  |L1.3364|
000d24  2000              MOVS     r0,#0                 ;925
000d26  f88d0018          STRB     r0,[sp,#0x18]         ;925
                  |L1.3370|
000d2a  980c              LDR      r0,[sp,#0x30]         ;927
000d2c  2800              CMP      r0,#0                 ;927
000d2e  d074              BEQ      |L1.3610|
000d30  2801              CMP      r0,#1                 ;927
000d32  d045              BEQ      |L1.3520|
000d34  2802              CMP      r0,#2                 ;927
000d36  d024              BEQ      |L1.3458|
000d38  2803              CMP      r0,#3                 ;927
000d3a  d121              BNE      |L1.3456|
000d3c  b1e7              CBZ      r7,|L1.3448|
000d3e  2603              MOVS     r6,#3                 ;932
000d40  6820              LDR      r0,[r4,#0]            ;933
000d42  f0204060          BIC      r0,r0,#0xe0000000     ;933
000d46  fa00f506          LSL      r5,r0,r6              ;933
000d4a  6860              LDR      r0,[r4,#4]            ;934
000d4c  fa00f906          LSL      r9,r0,r6              ;934
000d50  6820              LDR      r0,[r4,#0]            ;935
000d52  f3c07040          UBFX     r0,r0,#29,#1          ;935
000d56  b118              CBZ      r0,|L1.3424|
000d58  f0450504          ORR      r5,r5,#4              ;937
000d5c  f0490904          ORR      r9,r9,#4              ;938
                  |L1.3424|
000d60  6820              LDR      r0,[r4,#0]            ;940
000d62  f3c07080          UBFX     r0,r0,#30,#1          ;940
000d66  b118              CBZ      r0,|L1.3440|
000d68  f0450502          ORR      r5,r5,#2              ;942
000d6c  f0490902          ORR      r9,r9,#2              ;943
                  |L1.3440|
000d70  9507              STR      r5,[sp,#0x1c]         ;945
000d72  f8cd9020          STR      r9,[sp,#0x20]         ;946
000d76  e003              B        |L1.3456|
                  |L1.3448|
000d78  f04f30ff          MOV      r0,#0xffffffff        ;950
000d7c  9007              STR      r0,[sp,#0x1c]         ;950
000d7e  9008              STR      r0,[sp,#0x20]         ;951
                  |L1.3456|
000d80  e067              B        |L1.3666|
                  |L1.3458|
000d82  b1b7              CBZ      r7,|L1.3506|
000d84  2603              MOVS     r6,#3                 ;957
000d86  6820              LDR      r0,[r4,#0]            ;958
000d88  f0204060          BIC      r0,r0,#0xe0000000     ;958
000d8c  fa00f506          LSL      r5,r0,r6              ;958
000d90  6820              LDR      r0,[r4,#0]            ;959
000d92  f3c07040          UBFX     r0,r0,#29,#1          ;959
000d96  b108              CBZ      r0,|L1.3484|
000d98  f0450504          ORR      r5,r5,#4              ;961
                  |L1.3484|
000d9c  6820              LDR      r0,[r4,#0]            ;963
000d9e  f3c07080          UBFX     r0,r0,#30,#1          ;963
000da2  b108              CBZ      r0,|L1.3496|
000da4  f0450502          ORR      r5,r5,#2              ;965
                  |L1.3496|
000da8  a807              ADD      r0,sp,#0x1c           ;967
000daa  9909              LDR      r1,[sp,#0x24]         ;967
000dac  f8405021          STR      r5,[r0,r1,LSL #2]     ;967
000db0  e005              B        |L1.3518|
                  |L1.3506|
000db2  f04f30ff          MOV      r0,#0xffffffff        ;971
000db6  a907              ADD      r1,sp,#0x1c           ;971
000db8  9a09              LDR      r2,[sp,#0x24]         ;971
000dba  f8410022          STR      r0,[r1,r2,LSL #2]     ;971
                  |L1.3518|
000dbe  e048              B        |L1.3666|
                  |L1.3520|
000dc0  b31f              CBZ      r7,|L1.3594|
000dc2  2605              MOVS     r6,#5                 ;977
000dc4  6820              LDR      r0,[r4,#0]            ;978
000dc6  f0204060          BIC      r0,r0,#0xe0000000     ;978
000dca  fa00f506          LSL      r5,r0,r6              ;978
000dce  6820              LDR      r0,[r4,#0]            ;979
000dd0  f3c07080          UBFX     r0,r0,#30,#1          ;979
000dd4  b120              CBZ      r0,|L1.3552|
000dd6  1eb0              SUBS     r0,r6,#2              ;981
000dd8  2102              MOVS     r1,#2                 ;981
000dda  fa01f000          LSL      r0,r1,r0              ;981
000dde  4305              ORRS     r5,r5,r0              ;981
                  |L1.3552|
000de0  6860              LDR      r0,[r4,#4]            ;983
000de2  fa00f906          LSL      r9,r0,r6              ;983
000de6  6820              LDR      r0,[r4,#0]            ;984
000de8  f3c07080          UBFX     r0,r0,#30,#1          ;984
000dec  b128              CBZ      r0,|L1.3578|
000dee  1eb0              SUBS     r0,r6,#2              ;986
000df0  2102              MOVS     r1,#2                 ;986
000df2  fa01f000          LSL      r0,r1,r0              ;986
000df6  ea400909          ORR      r9,r0,r9              ;986
                  |L1.3578|
000dfa  4628              MOV      r0,r5                 ;988
000dfc  f369401f          BFI      r0,r9,#16,#16         ;988
000e00  a907              ADD      r1,sp,#0x1c           ;988
000e02  9a09              LDR      r2,[sp,#0x24]         ;988
000e04  f8410022          STR      r0,[r1,r2,LSL #2]     ;988
000e08  e005              B        |L1.3606|
                  |L1.3594|
000e0a  f04f30ff          MOV      r0,#0xffffffff        ;992
000e0e  a907              ADD      r1,sp,#0x1c           ;992
000e10  9a09              LDR      r2,[sp,#0x24]         ;992
000e12  f8410022          STR      r0,[r1,r2,LSL #2]     ;992
                  |L1.3606|
000e16  e01c              B        |L1.3666|
000e18  e7ff              B        |L1.3610|
                  |L1.3610|
000e1a  b19f              CBZ      r7,|L1.3652|
000e1c  2605              MOVS     r6,#5                 ;998
000e1e  6820              LDR      r0,[r4,#0]            ;999
000e20  f0204060          BIC      r0,r0,#0xe0000000     ;999
000e24  fa00f506          LSL      r5,r0,r6              ;999
000e28  6820              LDR      r0,[r4,#0]            ;1000
000e2a  f3c07080          UBFX     r0,r0,#30,#1          ;1000
000e2e  b120              CBZ      r0,|L1.3642|
000e30  1eb0              SUBS     r0,r6,#2              ;1002
000e32  2102              MOVS     r1,#2                 ;1002
000e34  fa01f000          LSL      r0,r1,r0              ;1002
000e38  4305              ORRS     r5,r5,r0              ;1002
                  |L1.3642|
000e3a  a907              ADD      r1,sp,#0x1c           ;1004
000e3c  9a09              LDR      r2,[sp,#0x24]         ;1004
000e3e  f8215012          STRH     r5,[r1,r2,LSL #1]     ;1004
000e42  e005              B        |L1.3664|
                  |L1.3652|
000e44  f64f70ff          MOV      r0,#0xffff            ;1008
000e48  a907              ADD      r1,sp,#0x1c           ;1008
000e4a  9a09              LDR      r2,[sp,#0x24]         ;1008
000e4c  f8210012          STRH     r0,[r1,r2,LSL #1]     ;1008
                  |L1.3664|
000e50  bf00              NOP                            ;1010
                  |L1.3666|
000e52  bf00              NOP                            ;953
000e54  6820              LDR      r0,[r4,#0]            ;1012
000e56  f3c07040          UBFX     r0,r0,#29,#1          ;1012
000e5a  b180              CBZ      r0,|L1.3710|
000e5c  9807              LDR      r0,[sp,#0x1c]         ;1014
000e5e  0c00              LSRS     r0,r0,#16             ;1014
000e60  f8ad000c          STRH     r0,[sp,#0xc]          ;1014
000e64  9807              LDR      r0,[sp,#0x1c]         ;1015
000e66  b280              UXTH     r0,r0                 ;1015
000e68  f8ad000e          STRH     r0,[sp,#0xe]          ;1015
000e6c  9808              LDR      r0,[sp,#0x20]         ;1016
000e6e  0c00              LSRS     r0,r0,#16             ;1016
000e70  f8ad0010          STRH     r0,[sp,#0x10]         ;1016
000e74  9808              LDR      r0,[sp,#0x20]         ;1017
000e76  b280              UXTH     r0,r0                 ;1017
000e78  f8ad0012          STRH     r0,[sp,#0x12]         ;1017
000e7c  e00f              B        |L1.3742|
                  |L1.3710|
000e7e  9808              LDR      r0,[sp,#0x20]         ;1021
000e80  b280              UXTH     r0,r0                 ;1021
000e82  f8ad000c          STRH     r0,[sp,#0xc]          ;1021
000e86  9807              LDR      r0,[sp,#0x1c]         ;1022
000e88  b280              UXTH     r0,r0                 ;1022
000e8a  f8ad000e          STRH     r0,[sp,#0xe]          ;1022
000e8e  9808              LDR      r0,[sp,#0x20]         ;1023
000e90  0c00              LSRS     r0,r0,#16             ;1023
000e92  f8ad0010          STRH     r0,[sp,#0x10]         ;1023
000e96  9807              LDR      r0,[sp,#0x1c]         ;1024
000e98  0c00              LSRS     r0,r0,#16             ;1024
000e9a  f8ad0012          STRH     r0,[sp,#0x12]         ;1024
                  |L1.3742|
000e9e  f8d80058          LDR      r0,[r8,#0x58]         ;1026
000ea2  990a              LDR      r1,[sp,#0x28]         ;1026
000ea4  4288              CMP      r0,r1                 ;1026
000ea6  d803              BHI      |L1.3760|
000ea8  2001              MOVS     r0,#1                 ;1028
000eaa  f8ad0014          STRH     r0,[sp,#0x14]         ;1028
000eae  e002              B        |L1.3766|
                  |L1.3760|
000eb0  2000              MOVS     r0,#0                 ;1032
000eb2  f8ad0014          STRH     r0,[sp,#0x14]         ;1032
                  |L1.3766|
000eb6  9807              LDR      r0,[sp,#0x1c]         ;1034
000eb8  1c40              ADDS     r0,r0,#1              ;1034
000eba  b910              CBNZ     r0,|L1.3778|
000ebc  9808              LDR      r0,[sp,#0x20]         ;1034
000ebe  1c40              ADDS     r0,r0,#1              ;1034
000ec0  b118              CBZ      r0,|L1.3786|
                  |L1.3778|
000ec2  2001              MOVS     r0,#1                 ;1036
000ec4  f88d0019          STRB     r0,[sp,#0x19]         ;1036
000ec8  e002              B        |L1.3792|
                  |L1.3786|
000eca  2000              MOVS     r0,#0                 ;1040
000ecc  f88d0019          STRB     r0,[sp,#0x19]         ;1040
                  |L1.3792|
000ed0  b9cf              CBNZ     r7,|L1.3846|
000ed2  f7fffffe          BL       rt_enter_critical
000ed6  211f              MOVS     r1,#0x1f              ;1045
000ed8  980b              LDR      r0,[sp,#0x2c]         ;1045
000eda  fb90f2f1          SDIV     r2,r0,r1              ;1045
000ede  fb010112          MLS      r1,r1,r2,r0           ;1045
000ee2  2001              MOVS     r0,#1                 ;1045
000ee4  4088              LSLS     r0,r0,r1              ;1045
000ee6  990b              LDR      r1,[sp,#0x2c]         ;1045
000ee8  114a              ASRS     r2,r1,#5              ;1045
000eea  f108014c          ADD      r1,r8,#0x4c           ;1045
000eee  f8511022          LDR      r1,[r1,r2,LSL #2]     ;1045
000ef2  ea210000          BIC      r0,r1,r0              ;1045
000ef6  990b              LDR      r1,[sp,#0x2c]         ;1045
000ef8  114a              ASRS     r2,r1,#5              ;1045
000efa  f108014c          ADD      r1,r8,#0x4c           ;1045
000efe  f8410022          STR      r0,[r1,r2,LSL #2]     ;1045
000f02  f7fffffe          BL       rt_exit_critical
                  |L1.3846|
000f06  a803              ADD      r0,sp,#0xc            ;1048
000f08  f7fffffe          BL       CAN_FilterInit
000f0c  2000              MOVS     r0,#0                 ;1049
000f0e  e68f              B        |L1.3120|
;;;1051   static rt_err_t setfilter(struct stm_bxcan *pbxcan, struct rt_can_filter_config *pconfig)
                          ENDP

                  setfilter PROC
000f10  e92d41f0          PUSH     {r4-r8,lr}
;;;1052   {
000f14  4680              MOV      r8,r0
000f16  460c              MOV      r4,r1
;;;1053       struct rt_can_filter_item *pitem = pconfig->items;
000f18  68a6              LDR      r6,[r4,#8]
;;;1054       rt_uint32_t count = pconfig->count;
000f1a  6827              LDR      r7,[r4,#0]
;;;1055       rt_err_t res;
;;;1056       while (count)
000f1c  e00b              B        |L1.3894|
                  |L1.3870|
;;;1057       {
;;;1058           res = bxmodifyfilter(pbxcan, pitem, pconfig->actived);
000f1e  4631              MOV      r1,r6
000f20  4640              MOV      r0,r8
000f22  6862              LDR      r2,[r4,#4]
000f24  f7fffffe          BL       bxmodifyfilter
000f28  4605              MOV      r5,r0
;;;1059           if (res != RT_EOK)
000f2a  b115              CBZ      r5,|L1.3890|
;;;1060           {
;;;1061               return res;
000f2c  4628              MOV      r0,r5
                  |L1.3886|
;;;1062           }
;;;1063           pitem++;
;;;1064           count--;
;;;1065       }
;;;1066       return RT_EOK;
;;;1067   }
000f2e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3890|
000f32  3614              ADDS     r6,r6,#0x14           ;1063
000f34  1e7f              SUBS     r7,r7,#1              ;1064
                  |L1.3894|
000f36  2f00              CMP      r7,#0                 ;1056
000f38  d1f1              BNE      |L1.3870|
000f3a  2000              MOVS     r0,#0                 ;1066
000f3c  e7f7              B        |L1.3886|
;;;1068   static rt_err_t configure(struct rt_can_device *can, struct can_configure *cfg)
                          ENDP

                  configure PROC
000f3e  b570              PUSH     {r4-r6,lr}
;;;1069   {
000f40  4605              MOV      r5,r0
000f42  460e              MOV      r6,r1
;;;1070       CAN_TypeDef *pbxcan;
;;;1071   
;;;1072       pbxcan = ((struct stm_bxcan *) can->parent.user_data)->reg;
000f44  6be8              LDR      r0,[r5,#0x3c]
000f46  6804              LDR      r4,[r0,#0]
;;;1073       assert_param(IS_CAN_ALL_PERIPH(pbxcan));
000f48  48fe              LDR      r0,|L1.4932|
000f4a  4284              CMP      r4,r0
000f4c  d002              BEQ      |L1.3924|
000f4e  48fe              LDR      r0,|L1.4936|
000f50  4284              CMP      r4,r0
000f52  d100              BNE      |L1.3926|
                  |L1.3924|
000f54  e004              B        |L1.3936|
                  |L1.3926|
000f56  f2404131          MOV      r1,#0x431
000f5a  a0fc              ADR      r0,|L1.4940|
000f5c  f7fffffe          BL       assert_failed
                  |L1.3936|
;;;1074       if (pbxcan == CAN1)
000f60  48f8              LDR      r0,|L1.4932|
000f62  4284              CMP      r4,r0
000f64  d10a              BNE      |L1.3964|
;;;1075       {
;;;1076           bxcan1_hw_init();
000f66  f7fffffe          BL       bxcan1_hw_init
;;;1077           bxcan_init(pbxcan, cfg->baud_rate, can->config.mode);
000f6a  2050              MOVS     r0,#0x50
000f6c  5d42              LDRB     r2,[r0,r5]
000f6e  4620              MOV      r0,r4
000f70  6831              LDR      r1,[r6,#0]
000f72  f7fffffe          BL       bxcan_init
;;;1078           bxcan1_filter_init(can);
000f76  4628              MOV      r0,r5
000f78  f7fffffe          BL       bxcan1_filter_init
                  |L1.3964|
;;;1079       }
;;;1080       else
;;;1081       {
;;;1082   #ifdef USING_BXCAN2
;;;1083           bxcan2_hw_init();
;;;1084           bxcan_init(pbxcan, cfg->baud_rate, can->config.mode);
;;;1085           bxcan2_filter_init(can);
;;;1086   #endif
;;;1087       }
;;;1088       return RT_EOK;
000f7c  2000              MOVS     r0,#0
;;;1089   }
000f7e  bd70              POP      {r4-r6,pc}
;;;1090   static rt_err_t control(struct rt_can_device *can, int cmd, void *arg)
                          ENDP

                  control PROC
000f80  e92d43f8          PUSH     {r3-r9,lr}
;;;1091   {
000f84  4606              MOV      r6,r0
000f86  4689              MOV      r9,r1
000f88  4617              MOV      r7,r2
;;;1092       struct stm_bxcan *pbxcan;
;;;1093       rt_uint32_t argval;
;;;1094       NVIC_InitTypeDef  NVIC_InitStructure;
;;;1095   
;;;1096       pbxcan = (struct stm_bxcan *) can->parent.user_data;
000f8a  6bf4              LDR      r4,[r6,#0x3c]
;;;1097       assert_param(pbxcan != RT_NULL);
000f8c  b104              CBZ      r4,|L1.3984|
000f8e  e004              B        |L1.3994|
                  |L1.3984|
000f90  f2404149          MOV      r1,#0x449
000f94  a0ed              ADR      r0,|L1.4940|
000f96  f7fffffe          BL       assert_failed
                  |L1.3994|
;;;1098   
;;;1099       switch (cmd)
000f9a  f1a90010          SUB      r0,r9,#0x10
000f9e  2808              CMP      r0,#8
000fa0  d256              BCS      |L1.4176|
000fa2  e8dff000          TBB      [pc,r0]
000fa6  5604              DCB      0x56,0x04
000fa8  55c8e6ce          DCB      0x55,0xc8,0xe6,0xce
000fac  fefd              DCB      0xfe,0xfd
;;;1100       {
;;;1101       case RT_DEVICE_CTRL_CLR_INT:
;;;1102           argval = (rt_uint32_t) arg;
000fae  463d              MOV      r5,r7
;;;1103           if (argval == RT_DEVICE_FLAG_INT_RX)
000fb0  f5b57f80          CMP      r5,#0x100
000fb4  d126              BNE      |L1.4100|
;;;1104           {
;;;1105               NVIC_DisableIRQ(pbxcan->rcvirq0);
000fb6  f9940009          LDRSB    r0,[r4,#9]
000fba  f7fffffe          BL       NVIC_DisableIRQ
;;;1106               NVIC_DisableIRQ(pbxcan->rcvirq1);
000fbe  f994000a          LDRSB    r0,[r4,#0xa]
000fc2  f7fffffe          BL       NVIC_DisableIRQ
;;;1107               CAN_ITConfig(pbxcan->reg, CAN_IT_FMP0 , DISABLE);
000fc6  2200              MOVS     r2,#0
000fc8  2102              MOVS     r1,#2
000fca  6820              LDR      r0,[r4,#0]
000fcc  f7fffffe          BL       CAN_ITConfig
;;;1108               CAN_ITConfig(pbxcan->reg, CAN_IT_FF0 , DISABLE);
000fd0  2200              MOVS     r2,#0
000fd2  2104              MOVS     r1,#4
000fd4  6820              LDR      r0,[r4,#0]
000fd6  f7fffffe          BL       CAN_ITConfig
;;;1109               CAN_ITConfig(pbxcan->reg, CAN_IT_FOV0 , DISABLE);
000fda  2200              MOVS     r2,#0
000fdc  2108              MOVS     r1,#8
000fde  6820              LDR      r0,[r4,#0]
000fe0  f7fffffe          BL       CAN_ITConfig
;;;1110               CAN_ITConfig(pbxcan->reg, CAN_IT_FMP1 , DISABLE);
000fe4  2200              MOVS     r2,#0
000fe6  2110              MOVS     r1,#0x10
000fe8  6820              LDR      r0,[r4,#0]
000fea  f7fffffe          BL       CAN_ITConfig
;;;1111               CAN_ITConfig(pbxcan->reg, CAN_IT_FF1 , DISABLE);
000fee  2200              MOVS     r2,#0
000ff0  2120              MOVS     r1,#0x20
000ff2  6820              LDR      r0,[r4,#0]
000ff4  f7fffffe          BL       CAN_ITConfig
;;;1112               CAN_ITConfig(pbxcan->reg, CAN_IT_FOV1 , DISABLE);
000ff8  2200              MOVS     r2,#0
000ffa  2140              MOVS     r1,#0x40
000ffc  6820              LDR      r0,[r4,#0]
000ffe  f7fffffe          BL       CAN_ITConfig
001002  e025              B        |L1.4176|
                  |L1.4100|
;;;1113           }
;;;1114           else if (argval == RT_DEVICE_FLAG_INT_TX)
001004  f5b56f80          CMP      r5,#0x400
001008  d109              BNE      |L1.4126|
;;;1115           {
;;;1116               NVIC_DisableIRQ(pbxcan->sndirq);
00100a  f9940008          LDRSB    r0,[r4,#8]
00100e  f7fffffe          BL       NVIC_DisableIRQ
;;;1117               CAN_ITConfig(pbxcan->reg, CAN_IT_TME, DISABLE);
001012  2200              MOVS     r2,#0
001014  2101              MOVS     r1,#1
001016  6820              LDR      r0,[r4,#0]
001018  f7fffffe          BL       CAN_ITConfig
00101c  e018              B        |L1.4176|
                  |L1.4126|
;;;1118           }
;;;1119           else if (argval == RT_DEVICE_CAN_INT_ERR)
00101e  f5b55f80          CMP      r5,#0x1000
001022  d115              BNE      |L1.4176|
;;;1120           {
;;;1121               CAN_ITConfig(pbxcan->reg, CAN_IT_BOF , DISABLE);
001024  2200              MOVS     r2,#0
001026  f44f6180          MOV      r1,#0x400
00102a  6820              LDR      r0,[r4,#0]
00102c  f7fffffe          BL       CAN_ITConfig
;;;1122               CAN_ITConfig(pbxcan->reg, CAN_IT_LEC , DISABLE);
001030  2200              MOVS     r2,#0
001032  f44f6100          MOV      r1,#0x800
001036  6820              LDR      r0,[r4,#0]
001038  f7fffffe          BL       CAN_ITConfig
;;;1123               CAN_ITConfig(pbxcan->reg, CAN_IT_ERR , DISABLE);
00103c  2200              MOVS     r2,#0
00103e  f44f4100          MOV      r1,#0x8000
001042  6820              LDR      r0,[r4,#0]
001044  f7fffffe          BL       CAN_ITConfig
;;;1124               NVIC_DisableIRQ(pbxcan->errirq);
001048  f994000b          LDRSB    r0,[r4,#0xb]
00104c  f7fffffe          BL       NVIC_DisableIRQ
                  |L1.4176|
;;;1125           }
;;;1126           break;
001050  e0e7              B        |L1.4642|
;;;1127       case RT_DEVICE_CTRL_SET_INT:
;;;1128           argval = (rt_uint32_t) arg;
001052  463d              MOV      r5,r7
;;;1129           if (argval == RT_DEVICE_FLAG_INT_RX)
001054  f5b57f80          CMP      r5,#0x100
001058  d133              BNE      |L1.4290|
;;;1130           {
;;;1131               CAN_ITConfig(pbxcan->reg, CAN_IT_FMP0 , ENABLE);
00105a  2201              MOVS     r2,#1
00105c  2102              MOVS     r1,#2
00105e  6820              LDR      r0,[r4,#0]
001060  f7fffffe          BL       CAN_ITConfig
;;;1132               CAN_ITConfig(pbxcan->reg, CAN_IT_FF0 , ENABLE);
001064  2201              MOVS     r2,#1
001066  2104              MOVS     r1,#4
001068  6820              LDR      r0,[r4,#0]
00106a  f7fffffe          BL       CAN_ITConfig
;;;1133               CAN_ITConfig(pbxcan->reg, CAN_IT_FOV0 , ENABLE);
00106e  2201              MOVS     r2,#1
001070  2108              MOVS     r1,#8
001072  6820              LDR      r0,[r4,#0]
001074  f7fffffe          BL       CAN_ITConfig
;;;1134               CAN_ITConfig(pbxcan->reg, CAN_IT_FMP1 , ENABLE);
001078  2201              MOVS     r2,#1
00107a  2110              MOVS     r1,#0x10
00107c  6820              LDR      r0,[r4,#0]
00107e  f7fffffe          BL       CAN_ITConfig
;;;1135               CAN_ITConfig(pbxcan->reg, CAN_IT_FF1 , ENABLE);
001082  2201              MOVS     r2,#1
001084  2120              MOVS     r1,#0x20
001086  6820              LDR      r0,[r4,#0]
001088  f7fffffe          BL       CAN_ITConfig
;;;1136               CAN_ITConfig(pbxcan->reg, CAN_IT_FOV1 , ENABLE);
00108c  2201              MOVS     r2,#1
00108e  2140              MOVS     r1,#0x40
001090  6820              LDR      r0,[r4,#0]
001092  f7fffffe          BL       CAN_ITConfig
;;;1137               NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x1;
001096  2001              MOVS     r0,#1
001098  f88d0001          STRB     r0,[sp,#1]
;;;1138               NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0;
00109c  2000              MOVS     r0,#0
00109e  f88d0002          STRB     r0,[sp,#2]
;;;1139               NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
0010a2  2001              MOVS     r0,#1
0010a4  f88d0003          STRB     r0,[sp,#3]
;;;1140               NVIC_InitStructure.NVIC_IRQChannel = pbxcan->rcvirq0;
0010a8  7a60              LDRB     r0,[r4,#9]
0010aa  f88d0000          STRB     r0,[sp,#0]
;;;1141               NVIC_Init(&NVIC_InitStructure);
0010ae  4668              MOV      r0,sp
0010b0  f7fffffe          BL       NVIC_Init
;;;1142               NVIC_InitStructure.NVIC_IRQChannel = pbxcan->rcvirq1;
0010b4  7aa0              LDRB     r0,[r4,#0xa]
0010b6  f88d0000          STRB     r0,[sp,#0]
;;;1143               NVIC_Init(&NVIC_InitStructure);
0010ba  4668              MOV      r0,sp
0010bc  f7fffffe          BL       NVIC_Init
0010c0  e038              B        |L1.4404|
                  |L1.4290|
;;;1144           }
;;;1145           else if (argval == RT_DEVICE_FLAG_INT_TX)
0010c2  f5b56f80          CMP      r5,#0x400
0010c6  d114              BNE      |L1.4338|
;;;1146           {
;;;1147               CAN_ITConfig(pbxcan->reg, CAN_IT_TME, ENABLE);
0010c8  2201              MOVS     r2,#1
0010ca  4611              MOV      r1,r2
0010cc  6820              LDR      r0,[r4,#0]
0010ce  f7fffffe          BL       CAN_ITConfig
;;;1148               NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x1;
0010d2  2001              MOVS     r0,#1
0010d4  f88d0001          STRB     r0,[sp,#1]
;;;1149               NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0;
0010d8  2000              MOVS     r0,#0
0010da  f88d0002          STRB     r0,[sp,#2]
;;;1150               NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
0010de  2001              MOVS     r0,#1
0010e0  f88d0003          STRB     r0,[sp,#3]
;;;1151               NVIC_InitStructure.NVIC_IRQChannel = pbxcan->sndirq;
0010e4  7a20              LDRB     r0,[r4,#8]
0010e6  f88d0000          STRB     r0,[sp,#0]
;;;1152               NVIC_Init(&NVIC_InitStructure);
0010ea  4668              MOV      r0,sp
0010ec  f7fffffe          BL       NVIC_Init
0010f0  e020              B        |L1.4404|
                  |L1.4338|
;;;1153           }
;;;1154           else if (argval == RT_DEVICE_CAN_INT_ERR)
0010f2  f5b55f80          CMP      r5,#0x1000
0010f6  d11d              BNE      |L1.4404|
;;;1155           {
;;;1156               CAN_ITConfig(pbxcan->reg, CAN_IT_BOF , ENABLE);
0010f8  2201              MOVS     r2,#1
0010fa  0291              LSLS     r1,r2,#10
0010fc  6820              LDR      r0,[r4,#0]
0010fe  f7fffffe          BL       CAN_ITConfig
;;;1157               CAN_ITConfig(pbxcan->reg, CAN_IT_LEC , ENABLE);
001102  2201              MOVS     r2,#1
001104  02d1              LSLS     r1,r2,#11
001106  6820              LDR      r0,[r4,#0]
001108  f7fffffe          BL       CAN_ITConfig
;;;1158               CAN_ITConfig(pbxcan->reg, CAN_IT_ERR , ENABLE);
00110c  2201              MOVS     r2,#1
00110e  03d1              LSLS     r1,r2,#15
001110  6820              LDR      r0,[r4,#0]
001112  f7fffffe          BL       CAN_ITConfig
;;;1159               NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x1;
001116  2001              MOVS     r0,#1
001118  f88d0001          STRB     r0,[sp,#1]
;;;1160               NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0;
00111c  2000              MOVS     r0,#0
00111e  f88d0002          STRB     r0,[sp,#2]
;;;1161               NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
001122  2001              MOVS     r0,#1
001124  f88d0003          STRB     r0,[sp,#3]
;;;1162               NVIC_InitStructure.NVIC_IRQChannel = pbxcan->errirq;
001128  7ae0              LDRB     r0,[r4,#0xb]
00112a  f88d0000          STRB     r0,[sp,#0]
;;;1163               NVIC_Init(&NVIC_InitStructure);
00112e  4668              MOV      r0,sp
001130  f7fffffe          BL       NVIC_Init
                  |L1.4404|
;;;1164           }
;;;1165           break;
001134  e075              B        |L1.4642|
;;;1166       case RT_CAN_CMD_SET_FILTER:
;;;1167           return setfilter(pbxcan, (struct rt_can_filter_config *) arg);
001136  4639              MOV      r1,r7
001138  4620              MOV      r0,r4
00113a  f7fffffe          BL       setfilter
                  |L1.4414|
;;;1168       case RT_CAN_CMD_SET_MODE:
;;;1169           argval = (rt_uint32_t) arg;
;;;1170           if (argval != RT_CAN_MODE_NORMAL ||
;;;1171                   argval != RT_CAN_MODE_LISEN ||
;;;1172                   argval != RT_CAN_MODE_LOOPBACK ||
;;;1173                   argval != RT_CAN_MODE_LOOPBACKANLISEN)
;;;1174           {
;;;1175               return RT_ERROR;
;;;1176           }
;;;1177           if (argval != can->config.mode)
;;;1178           {
;;;1179               can->config.mode = argval;
;;;1180               return bxcan_set_mode(pbxcan->reg, argval);
;;;1181           }
;;;1182           break;
;;;1183       case RT_CAN_CMD_SET_BAUD:
;;;1184           argval = (rt_uint32_t) arg;
;;;1185           if (argval != CAN1MBaud &&
;;;1186                   argval != CAN800kBaud &&
;;;1187                   argval != CAN500kBaud &&
;;;1188                   argval != CAN250kBaud &&
;;;1189                   argval != CAN125kBaud &&
;;;1190                   argval != CAN100kBaud &&
;;;1191                   argval != CAN50kBaud  &&
;;;1192                   argval != CAN20kBaud  &&
;;;1193                   argval != CAN10kBaud)
;;;1194           {
;;;1195               return RT_ERROR;
;;;1196           }
;;;1197           if (argval != can->config.baud_rate)
;;;1198           {
;;;1199               can->config.baud_rate = argval;
;;;1200               return bxcan_set_baud_rate(pbxcan->reg, argval);
;;;1201           }
;;;1202           break;
;;;1203       case RT_CAN_CMD_SET_PRIV:
;;;1204           argval = (rt_uint32_t) arg;
;;;1205           if (argval != RT_CAN_MODE_PRIV ||
;;;1206                   argval != RT_CAN_MODE_NOPRIV)
;;;1207           {
;;;1208               return RT_ERROR;
;;;1209           }
;;;1210           if (argval != can->config.privmode)
;;;1211           {
;;;1212               can->config.privmode = argval;
;;;1213               return bxcan_set_privmode(pbxcan->reg, argval);
;;;1214           }
;;;1215           break;
;;;1216       case RT_CAN_CMD_GET_STATUS:
;;;1217       {
;;;1218           rt_uint32_t errtype;
;;;1219           errtype = pbxcan->reg->ESR;
;;;1220           can->status.rcverrcnt = errtype >> 24;
;;;1221           can->status.snderrcnt = (errtype >> 16 & 0xFF);
;;;1222           can->status.errcode = errtype & 0x07;
;;;1223           if (arg != &can->status)
;;;1224           {
;;;1225               rt_memcpy(arg, &can->status, sizeof(can->status));
;;;1226           }
;;;1227       }
;;;1228       break;
;;;1229       }
;;;1230   
;;;1231       return RT_EOK;
;;;1232   }
00113e  e8bd83f8          POP      {r3-r9,pc}
001142  463d              MOV      r5,r7                 ;1169
001144  b92d              CBNZ     r5,|L1.4434|
001146  2d01              CMP      r5,#1                 ;1171
001148  d103              BNE      |L1.4434|
00114a  2d02              CMP      r5,#2                 ;1172
00114c  d101              BNE      |L1.4434|
00114e  2d03              CMP      r5,#3                 ;1173
001150  d001              BEQ      |L1.4438|
                  |L1.4434|
001152  2001              MOVS     r0,#1                 ;1175
001154  e7f3              B        |L1.4414|
                  |L1.4438|
001156  2050              MOVS     r0,#0x50              ;1177
001158  5d80              LDRB     r0,[r0,r6]            ;1177
00115a  42a8              CMP      r0,r5                 ;1177
00115c  d008              BEQ      |L1.4464|
00115e  6d30              LDR      r0,[r6,#0x50]         ;1179
001160  f3650007          BFI      r0,r5,#0,#8           ;1179
001164  6530              STR      r0,[r6,#0x50]         ;1179
001166  4629              MOV      r1,r5                 ;1180
001168  6820              LDR      r0,[r4,#0]            ;1180
00116a  f7fffffe          BL       bxcan_set_mode
00116e  e7e6              B        |L1.4414|
                  |L1.4464|
001170  e057              B        |L1.4642|
001172  463d              MOV      r5,r7                 ;1184
001174  4879              LDR      r0,|L1.4956|
001176  4285              CMP      r5,r0                 ;1185
001178  d01d              BEQ      |L1.4534|
00117a  4879              LDR      r0,|L1.4960|
00117c  4285              CMP      r5,r0                 ;1186
00117e  d01a              BEQ      |L1.4534|
001180  4878              LDR      r0,|L1.4964|
001182  4285              CMP      r5,r0                 ;1187
001184  d017              BEQ      |L1.4534|
001186  1040              ASRS     r0,r0,#1              ;1188
001188  4285              CMP      r5,r0                 ;1188
00118a  d014              BEQ      |L1.4534|
00118c  1040              ASRS     r0,r0,#1              ;1189
00118e  4285              CMP      r5,r0                 ;1189
001190  d011              BEQ      |L1.4534|
001192  4875              LDR      r0,|L1.4968|
001194  4285              CMP      r5,r0                 ;1190
001196  d00e              BEQ      |L1.4534|
001198  1040              ASRS     r0,r0,#1              ;1191
00119a  4285              CMP      r5,r0                 ;1191
00119c  d00b              BEQ      |L1.4534|
00119e  e001              B        |L1.4516|
0011a0  e029              B        |L1.4598|
0011a2  e012              B        |L1.4554|
                  |L1.4516|
0011a4  f6446020          MOV      r0,#0x4e20            ;1192
0011a8  4285              CMP      r5,r0                 ;1192
0011aa  d004              BEQ      |L1.4534|
0011ac  1040              ASRS     r0,r0,#1              ;1193
0011ae  4285              CMP      r5,r0                 ;1193
0011b0  d001              BEQ      |L1.4534|
0011b2  2001              MOVS     r0,#1                 ;1195
0011b4  e7c3              B        |L1.4414|
                  |L1.4534|
0011b6  6c70              LDR      r0,[r6,#0x44]         ;1197
0011b8  42a8              CMP      r0,r5                 ;1197
0011ba  d005              BEQ      |L1.4552|
0011bc  6475              STR      r5,[r6,#0x44]         ;1199
0011be  4629              MOV      r1,r5                 ;1200
0011c0  6820              LDR      r0,[r4,#0]            ;1200
0011c2  f7fffffe          BL       bxcan_set_baud_rate
0011c6  e7ba              B        |L1.4414|
                  |L1.4552|
0011c8  e02b              B        |L1.4642|
                  |L1.4554|
0011ca  463d              MOV      r5,r7                 ;1204
0011cc  2d01              CMP      r5,#1                 ;1205
0011ce  d100              BNE      |L1.4562|
0011d0  b10d              CBZ      r5,|L1.4566|
                  |L1.4562|
0011d2  2001              MOVS     r0,#1                 ;1208
0011d4  e7b3              B        |L1.4414|
                  |L1.4566|
0011d6  2050              MOVS     r0,#0x50              ;1210
0011d8  5b80              LDRH     r0,[r0,r6]            ;1210
0011da  f3c02007          UBFX     r0,r0,#8,#8           ;1210
0011de  42a8              CMP      r0,r5                 ;1210
0011e0  d008              BEQ      |L1.4596|
0011e2  6d30              LDR      r0,[r6,#0x50]         ;1212
0011e4  f365200f          BFI      r0,r5,#8,#8           ;1212
0011e8  6530              STR      r0,[r6,#0x50]         ;1212
0011ea  4629              MOV      r1,r5                 ;1213
0011ec  6820              LDR      r0,[r4,#0]            ;1213
0011ee  f7fffffe          BL       bxcan_set_privmode
0011f2  e7a4              B        |L1.4414|
                  |L1.4596|
0011f4  e015              B        |L1.4642|
                  |L1.4598|
0011f6  6820              LDR      r0,[r4,#0]            ;1219
0011f8  f8d08018          LDR      r8,[r0,#0x18]         ;1219
0011fc  ea4f6018          LSR      r0,r8,#24             ;1220
001200  65f0              STR      r0,[r6,#0x5c]         ;1220
001202  f3c84107          UBFX     r1,r8,#16,#8          ;1221
001206  6631              STR      r1,[r6,#0x60]         ;1221
001208  f0080107          AND      r1,r8,#7              ;1222
00120c  6671              STR      r1,[r6,#0x64]         ;1222
00120e  f106005c          ADD      r0,r6,#0x5c           ;1223
001212  4287              CMP      r7,r0                 ;1223
001214  d004              BEQ      |L1.4640|
001216  223c              MOVS     r2,#0x3c              ;1225
001218  4601              MOV      r1,r0                 ;1225
00121a  4638              MOV      r0,r7                 ;1225
00121c  f7fffffe          BL       rt_memcpy
                  |L1.4640|
001220  bf00              NOP                            ;1228
                  |L1.4642|
001222  bf00              NOP                            ;1126
001224  2000              MOVS     r0,#0                 ;1231
001226  e78a              B        |L1.4414|
;;;1233   static int sendmsg(struct rt_can_device *can, const void *buf, rt_uint32_t boxno)
                          ENDP

                  sendmsg PROC
001228  e92d41f0          PUSH     {r4-r8,lr}
;;;1234   {
00122c  4607              MOV      r7,r0
00122e  4688              MOV      r8,r1
001230  4616              MOV      r6,r2
;;;1235       CAN_TypeDef *pbxcan;
;;;1236       struct rt_can_msg *pmsg = (struct rt_can_msg *) buf;
001232  4644              MOV      r4,r8
;;;1237   
;;;1238       pbxcan = ((struct stm_bxcan *) can->parent.user_data)->reg;
001234  6bf8              LDR      r0,[r7,#0x3c]
001236  6805              LDR      r5,[r0,#0]
;;;1239       assert_param(IS_CAN_ALL_PERIPH(pbxcan));
001238  4842              LDR      r0,|L1.4932|
00123a  4285              CMP      r5,r0
00123c  d002              BEQ      |L1.4676|
00123e  4842              LDR      r0,|L1.4936|
001240  4285              CMP      r5,r0
001242  d100              BNE      |L1.4678|
                  |L1.4676|
001244  e004              B        |L1.4688|
                  |L1.4678|
001246  f24041d7          MOV      r1,#0x4d7
00124a  a040              ADR      r0,|L1.4940|
00124c  f7fffffe          BL       assert_failed
                  |L1.4688|
;;;1240   
;;;1241       pbxcan->sTxMailBox[boxno].TIR &= TMIDxR_TXRQ;
001250  f50570c0          ADD      r0,r5,#0x180
001254  eb001006          ADD      r0,r0,r6,LSL #4
001258  6800              LDR      r0,[r0,#0]
00125a  f0000101          AND      r1,r0,#1
00125e  f50570c0          ADD      r0,r5,#0x180
001262  eb001006          ADD      r0,r0,r6,LSL #4
001266  6001              STR      r1,[r0,#0]
;;;1242       if (pmsg->ide == RT_CAN_STDID)
001268  6820              LDR      r0,[r4,#0]
00126a  f3c07040          UBFX     r0,r0,#29,#1
00126e  b9f0              CBNZ     r0,|L1.4782|
;;;1243       {
;;;1244           assert_param(IS_CAN_STDID(pmsg->id));
001270  6820              LDR      r0,[r4,#0]
001272  f0204060          BIC      r0,r0,#0xe0000000
001276  f5b06f00          CMP      r0,#0x800
00127a  d200              BCS      |L1.4734|
00127c  e004              B        |L1.4744|
                  |L1.4734|
00127e  f24041dc          MOV      r1,#0x4dc
001282  a032              ADR      r0,|L1.4940|
001284  f7fffffe          BL       assert_failed
                  |L1.4744|
;;;1245           pbxcan->sTxMailBox[boxno].TIR |= ((pmsg->id << 21) | \
001288  8820              LDRH     r0,[r4,#0]
00128a  0540              LSLS     r0,r0,#21
00128c  6821              LDR      r1,[r4,#0]
00128e  f3c17180          UBFX     r1,r1,#30,#1
001292  ea400041          ORR      r0,r0,r1,LSL #1
001296  f50571c0          ADD      r1,r5,#0x180
00129a  eb011106          ADD      r1,r1,r6,LSL #4
00129e  6809              LDR      r1,[r1,#0]
0012a0  4308              ORRS     r0,r0,r1
0012a2  f50571c0          ADD      r1,r5,#0x180
0012a6  eb011106          ADD      r1,r1,r6,LSL #4
0012aa  6008              STR      r0,[r1,#0]
0012ac  e022              B        |L1.4852|
                  |L1.4782|
;;;1246                                             (pmsg->rtr << 1));
;;;1247       }
;;;1248       else
;;;1249       {
;;;1250           assert_param(IS_CAN_EXTID(pmsg->id));
0012ae  6820              LDR      r0,[r4,#0]
0012b0  f0204060          BIC      r0,r0,#0xe0000000
0012b4  f1b05f00          CMP      r0,#0x20000000
0012b8  d200              BCS      |L1.4796|
0012ba  e004              B        |L1.4806|
                  |L1.4796|
0012bc  f24041e2          MOV      r1,#0x4e2
0012c0  a022              ADR      r0,|L1.4940|
0012c2  f7fffffe          BL       assert_failed
                  |L1.4806|
;;;1251           pbxcan->sTxMailBox[boxno].TIR |= ((pmsg->id << 3) | \
0012c6  6820              LDR      r0,[r4,#0]
0012c8  00c0              LSLS     r0,r0,#3
0012ca  6821              LDR      r1,[r4,#0]
0012cc  f3c17140          UBFX     r1,r1,#29,#1
0012d0  ea400081          ORR      r0,r0,r1,LSL #2
0012d4  6821              LDR      r1,[r4,#0]
0012d6  f3c17180          UBFX     r1,r1,#30,#1
0012da  ea400041          ORR      r0,r0,r1,LSL #1
0012de  f50571c0          ADD      r1,r5,#0x180
0012e2  eb011106          ADD      r1,r1,r6,LSL #4
0012e6  6809              LDR      r1,[r1,#0]
0012e8  4308              ORRS     r0,r0,r1
0012ea  f50571c0          ADD      r1,r5,#0x180
0012ee  eb011106          ADD      r1,r1,r6,LSL #4
0012f2  6008              STR      r0,[r1,#0]
                  |L1.4852|
;;;1252                                             (pmsg->ide << 2) | \
;;;1253                                             (pmsg->rtr << 1));
;;;1254       }
;;;1255   
;;;1256       pmsg->len &= (uint8_t)0x0000000F;
0012f4  7920              LDRB     r0,[r4,#4]
0012f6  f000010f          AND      r1,r0,#0xf
0012fa  6860              LDR      r0,[r4,#4]
0012fc  f3610007          BFI      r0,r1,#0,#8
001300  6060              STR      r0,[r4,#4]
;;;1257       pbxcan->sTxMailBox[boxno].TDTR &= (uint32_t)0xFFFFFFF0;
001302  f50570c0          ADD      r0,r5,#0x180
001306  eb001006          ADD      r0,r0,r6,LSL #4
00130a  6840              LDR      r0,[r0,#4]
00130c  f020010f          BIC      r1,r0,#0xf
001310  f50570c0          ADD      r0,r5,#0x180
001314  eb001006          ADD      r0,r0,r6,LSL #4
001318  6041              STR      r1,[r0,#4]
;;;1258       pbxcan->sTxMailBox[boxno].TDTR |= pmsg->len;
00131a  f50570c0          ADD      r0,r5,#0x180
00131e  eb001006          ADD      r0,r0,r6,LSL #4
001322  6840              LDR      r0,[r0,#4]
001324  7921              LDRB     r1,[r4,#4]
001326  4308              ORRS     r0,r0,r1
001328  f50571c0          ADD      r1,r5,#0x180
00132c  eb011106          ADD      r1,r1,r6,LSL #4
001330  6048              STR      r0,[r1,#4]
;;;1259   
;;;1260       pbxcan->sTxMailBox[boxno].TDLR = (((uint32_t)pmsg->data[3] << 24) |
001332  7ae0              LDRB     r0,[r4,#0xb]
001334  0601              LSLS     r1,r0,#24
001336  7aa0              LDRB     r0,[r4,#0xa]
001338  ea414100          ORR      r1,r1,r0,LSL #16
00133c  7a60              LDRB     r0,[r4,#9]
00133e  ea412000          ORR      r0,r1,r0,LSL #8
001342  e013              B        |L1.4972|
                  |L1.4932|
                          DCD      0x40006400
                  |L1.4936|
                          DCD      0x40006800
                  |L1.4940|
00134c  64726976          DCB      "drivers\\bxcan.c",0
001350  6572735c
001354  62786361
001358  6e2e6300
                  |L1.4956|
                          DCD      0x000f4240
                  |L1.4960|
                          DCD      0x000c3500
                  |L1.4964|
                          DCD      0x0007a120
                  |L1.4968|
                          DCD      0x000186a0
                  |L1.4972|
00136c  7a21              LDRB     r1,[r4,#8]
00136e  4308              ORRS     r0,r0,r1
001370  f50571c0          ADD      r1,r5,#0x180
001374  eb011106          ADD      r1,r1,r6,LSL #4
001378  6088              STR      r0,[r1,#8]
;;;1261                                         ((uint32_t)pmsg->data[2] << 16) |
;;;1262                                         ((uint32_t)pmsg->data[1] << 8) |
;;;1263                                         ((uint32_t)pmsg->data[0]));
;;;1264       if (pmsg->len > 4)
00137a  7920              LDRB     r0,[r4,#4]
00137c  2804              CMP      r0,#4
00137e  dd0e              BLE      |L1.5022|
;;;1265       {
;;;1266           pbxcan->sTxMailBox[boxno].TDHR = (((uint32_t)pmsg->data[7] << 24) |
001380  7be0              LDRB     r0,[r4,#0xf]
001382  0601              LSLS     r1,r0,#24
001384  7ba0              LDRB     r0,[r4,#0xe]
001386  ea414100          ORR      r1,r1,r0,LSL #16
00138a  7b60              LDRB     r0,[r4,#0xd]
00138c  ea412000          ORR      r0,r1,r0,LSL #8
001390  7b21              LDRB     r1,[r4,#0xc]
001392  4308              ORRS     r0,r0,r1
001394  f50571c0          ADD      r1,r5,#0x180
001398  eb011106          ADD      r1,r1,r6,LSL #4
00139c  60c8              STR      r0,[r1,#0xc]
                  |L1.5022|
;;;1267                                             ((uint32_t)pmsg->data[6] << 16) |
;;;1268                                             ((uint32_t)pmsg->data[5] << 8) |
;;;1269                                             ((uint32_t)pmsg->data[4]));
;;;1270       }
;;;1271       pbxcan->sTxMailBox[boxno].TIR |= TMIDxR_TXRQ;
00139e  f50570c0          ADD      r0,r5,#0x180
0013a2  eb001006          ADD      r0,r0,r6,LSL #4
0013a6  6800              LDR      r0,[r0,#0]
0013a8  f0400101          ORR      r1,r0,#1
0013ac  f50570c0          ADD      r0,r5,#0x180
0013b0  eb001006          ADD      r0,r0,r6,LSL #4
0013b4  6001              STR      r1,[r0,#0]
;;;1272   
;;;1273       return RT_EOK;
0013b6  2000              MOVS     r0,#0
;;;1274   }
0013b8  e8bd81f0          POP      {r4-r8,pc}
;;;1275   static int recvmsg(struct rt_can_device *can, void *buf, rt_uint32_t boxno)
                          ENDP

                  recvmsg PROC
0013bc  e92d41f0          PUSH     {r4-r8,lr}
;;;1276   {
0013c0  4607              MOV      r7,r0
0013c2  4688              MOV      r8,r1
0013c4  4615              MOV      r5,r2
;;;1277       CAN_TypeDef *pbxcan;
;;;1278       struct rt_can_msg *pmsg = (struct rt_can_msg *) buf;
0013c6  4644              MOV      r4,r8
;;;1279   
;;;1280       pbxcan = ((struct stm_bxcan *) can->parent.user_data)->reg;
0013c8  6bf8              LDR      r0,[r7,#0x3c]
0013ca  6806              LDR      r6,[r0,#0]
;;;1281       assert_param(IS_CAN_ALL_PERIPH(pbxcan));
0013cc  48f6              LDR      r0,|L1.6056|
0013ce  4286              CMP      r6,r0
0013d0  d002              BEQ      |L1.5080|
0013d2  48f6              LDR      r0,|L1.6060|
0013d4  4286              CMP      r6,r0
0013d6  d100              BNE      |L1.5082|
                  |L1.5080|
0013d8  e005              B        |L1.5094|
                  |L1.5082|
0013da  f2405101          MOV      r1,#0x501
0013de  f2af0094          ADR      r0,|L1.4940|
0013e2  f7fffffe          BL       assert_failed
                  |L1.5094|
;;;1282       assert_param(IS_CAN_FIFO(boxno));
0013e6  b10d              CBZ      r5,|L1.5100|
0013e8  2d01              CMP      r5,#1
0013ea  d100              BNE      |L1.5102|
                  |L1.5100|
0013ec  e005              B        |L1.5114|
                  |L1.5102|
0013ee  f2405102          MOV      r1,#0x502
0013f2  f2af00a8          ADR      r0,|L1.4940|
0013f6  f7fffffe          BL       assert_failed
                  |L1.5114|
;;;1283       pmsg->ide = ((uint8_t)0x04 & pbxcan->sFIFOMailBox[boxno].RIR) >> 2;
0013fa  f50670d8          ADD      r0,r6,#0x1b0
0013fe  eb001005          ADD      r0,r0,r5,LSL #4
001402  6800              LDR      r0,[r0,#0]
001404  0881              LSRS     r1,r0,#2
001406  6820              LDR      r0,[r4,#0]
001408  f361705d          BFI      r0,r1,#29,#1
00140c  6020              STR      r0,[r4,#0]
;;;1284       if (pmsg->ide == CAN_Id_Standard)
00140e  6820              LDR      r0,[r4,#0]
001410  f3c07040          UBFX     r0,r0,#29,#1
001414  b968              CBNZ     r0,|L1.5170|
;;;1285       {
;;;1286           pmsg->id = (uint32_t)0x000007FF & (pbxcan->sFIFOMailBox[boxno].RIR >> 21);
001416  f50670d8          ADD      r0,r6,#0x1b0
00141a  eb001005          ADD      r0,r0,r5,LSL #4
00141e  6800              LDR      r0,[r0,#0]
001420  f24071ff          MOV      r1,#0x7ff
001424  ea015150          AND      r1,r1,r0,LSR #21
001428  6820              LDR      r0,[r4,#0]
00142a  f361001c          BFI      r0,r1,#0,#29
00142e  6020              STR      r0,[r4,#0]
001430  e00c              B        |L1.5196|
                  |L1.5170|
;;;1287       }
;;;1288       else
;;;1289       {
;;;1290           pmsg->id = (uint32_t)0x1FFFFFFF & (pbxcan->sFIFOMailBox[boxno].RIR >> 3);
001432  f50670d8          ADD      r0,r6,#0x1b0
001436  eb001005          ADD      r0,r0,r5,LSL #4
00143a  6800              LDR      r0,[r0,#0]
00143c  f06f4160          MVN      r1,#0xe0000000
001440  ea0101d0          AND      r1,r1,r0,LSR #3
001444  6820              LDR      r0,[r4,#0]
001446  f361001c          BFI      r0,r1,#0,#29
00144a  6020              STR      r0,[r4,#0]
                  |L1.5196|
;;;1291       }
;;;1292   
;;;1293       pmsg->rtr = (uint8_t)((0x02 & pbxcan->sFIFOMailBox[boxno].RIR) >> 1);
00144c  f50670d8          ADD      r0,r6,#0x1b0
001450  eb001005          ADD      r0,r0,r5,LSL #4
001454  6800              LDR      r0,[r0,#0]
001456  0841              LSRS     r1,r0,#1
001458  6820              LDR      r0,[r4,#0]
00145a  f361709e          BFI      r0,r1,#30,#1
00145e  6020              STR      r0,[r4,#0]
;;;1294       pmsg->len = (uint8_t)0x0F & pbxcan->sFIFOMailBox[boxno].RDTR;
001460  f50670d8          ADD      r0,r6,#0x1b0
001464  eb001005          ADD      r0,r0,r5,LSL #4
001468  6840              LDR      r0,[r0,#4]
00146a  f000010f          AND      r1,r0,#0xf
00146e  6860              LDR      r0,[r4,#4]
001470  f3610007          BFI      r0,r1,#0,#8
001474  6060              STR      r0,[r4,#4]
;;;1295       pmsg->data[0] = (uint8_t)0xFF & pbxcan->sFIFOMailBox[boxno].RDLR;
001476  f50670d8          ADD      r0,r6,#0x1b0
00147a  eb001005          ADD      r0,r0,r5,LSL #4
00147e  6880              LDR      r0,[r0,#8]
001480  7220              STRB     r0,[r4,#8]
;;;1296       pmsg->data[1] = (uint8_t)0xFF & (pbxcan->sFIFOMailBox[boxno].RDLR >> 8);
001482  f50670d8          ADD      r0,r6,#0x1b0
001486  eb001005          ADD      r0,r0,r5,LSL #4
00148a  6880              LDR      r0,[r0,#8]
00148c  0a01              LSRS     r1,r0,#8
00148e  7261              STRB     r1,[r4,#9]
;;;1297       pmsg->data[2] = (uint8_t)0xFF & (pbxcan->sFIFOMailBox[boxno].RDLR >> 16);
001490  f50670d8          ADD      r0,r6,#0x1b0
001494  eb001005          ADD      r0,r0,r5,LSL #4
001498  6880              LDR      r0,[r0,#8]
00149a  0c01              LSRS     r1,r0,#16
00149c  72a1              STRB     r1,[r4,#0xa]
;;;1298       pmsg->data[3] = (uint8_t)0xFF & (pbxcan->sFIFOMailBox[boxno].RDLR >> 24);
00149e  f50670d8          ADD      r0,r6,#0x1b0
0014a2  eb001005          ADD      r0,r0,r5,LSL #4
0014a6  6880              LDR      r0,[r0,#8]
0014a8  0e00              LSRS     r0,r0,#24
0014aa  72e0              STRB     r0,[r4,#0xb]
;;;1299       if (pmsg->len > 4)
0014ac  7920              LDRB     r0,[r4,#4]
0014ae  2804              CMP      r0,#4
0014b0  dd1a              BLE      |L1.5352|
;;;1300       {
;;;1301           pmsg->data[4] = (uint8_t)0xFF & pbxcan->sFIFOMailBox[boxno].RDHR;
0014b2  f50670d8          ADD      r0,r6,#0x1b0
0014b6  eb001005          ADD      r0,r0,r5,LSL #4
0014ba  68c0              LDR      r0,[r0,#0xc]
0014bc  7320              STRB     r0,[r4,#0xc]
;;;1302           pmsg->data[5] = (uint8_t)0xFF & (pbxcan->sFIFOMailBox[boxno].RDHR >> 8);
0014be  f50670d8          ADD      r0,r6,#0x1b0
0014c2  eb001005          ADD      r0,r0,r5,LSL #4
0014c6  68c0              LDR      r0,[r0,#0xc]
0014c8  0a01              LSRS     r1,r0,#8
0014ca  7361              STRB     r1,[r4,#0xd]
;;;1303           pmsg->data[6] = (uint8_t)0xFF & (pbxcan->sFIFOMailBox[boxno].RDHR >> 16);
0014cc  f50670d8          ADD      r0,r6,#0x1b0
0014d0  eb001005          ADD      r0,r0,r5,LSL #4
0014d4  68c0              LDR      r0,[r0,#0xc]
0014d6  0c01              LSRS     r1,r0,#16
0014d8  73a1              STRB     r1,[r4,#0xe]
;;;1304           pmsg->data[7] = (uint8_t)0xFF & (pbxcan->sFIFOMailBox[boxno].RDHR >> 24);
0014da  f50670d8          ADD      r0,r6,#0x1b0
0014de  eb001005          ADD      r0,r0,r5,LSL #4
0014e2  68c0              LDR      r0,[r0,#0xc]
0014e4  0e00              LSRS     r0,r0,#24
0014e6  73e0              STRB     r0,[r4,#0xf]
                  |L1.5352|
;;;1305       }
;;;1306       pmsg->hdr = (uint8_t)0xFF & (pbxcan->sFIFOMailBox[boxno].RDTR >> 8);
0014e8  f50670d8          ADD      r0,r6,#0x1b0
0014ec  eb001005          ADD      r0,r0,r5,LSL #4
0014f0  6840              LDR      r0,[r0,#4]
0014f2  0a00              LSRS     r0,r0,#8
0014f4  6861              LDR      r1,[r4,#4]
0014f6  f3604117          BFI      r1,r0,#16,#8
0014fa  6061              STR      r1,[r4,#4]
;;;1307       if (boxno) pmsg->hdr += ((struct stm_bxcan *) can->parent.user_data)->fifo1filteroff * 4;
0014fc  b155              CBZ      r5,|L1.5396|
0014fe  6860              LDR      r0,[r4,#4]
001500  0c01              LSRS     r1,r0,#16
001502  6bf8              LDR      r0,[r7,#0x3c]
001504  f8900058          LDRB     r0,[r0,#0x58]
001508  eb010180          ADD      r1,r1,r0,LSL #2
00150c  6860              LDR      r0,[r4,#4]
00150e  f3614017          BFI      r0,r1,#16,#8
001512  6060              STR      r0,[r4,#4]
                  |L1.5396|
;;;1308       return RT_EOK;
001514  2000              MOVS     r0,#0
;;;1309   }
001516  e8bd81f0          POP      {r4-r8,pc}
;;;1310   
                          ENDP

                  CAN1_RX0_IRQHandler PROC
;;;1348   struct rt_can_device bxcan1;
;;;1349   void CAN1_RX0_IRQHandler(void)
00151a  b510              PUSH     {r4,lr}
;;;1350   {
;;;1351       rt_interrupt_enter();
00151c  f7fffffe          BL       rt_interrupt_enter
;;;1352       if (CAN1->RF0R & 0x03)
001520  48a1              LDR      r0,|L1.6056|
001522  300c              ADDS     r0,r0,#0xc
001524  6800              LDR      r0,[r0,#0]
001526  f0000003          AND      r0,r0,#3
00152a  b1d0              CBZ      r0,|L1.5474|
;;;1353       {
;;;1354           if ((CAN1->RF0R & CAN_RF0R_FOVR0) != 0)
00152c  489e              LDR      r0,|L1.6056|
00152e  300c              ADDS     r0,r0,#0xc
001530  6800              LDR      r0,[r0,#0]
001532  f0000010          AND      r0,r0,#0x10
001536  b140              CBZ      r0,|L1.5450|
;;;1355           {
;;;1356               CAN1->RF0R = CAN_RF0R_FOVR0;
001538  2010              MOVS     r0,#0x10
00153a  499b              LDR      r1,|L1.6056|
00153c  310c              ADDS     r1,r1,#0xc
00153e  6008              STR      r0,[r1,#0]
;;;1357               rt_hw_can_isr(&bxcan1, RT_CAN_EVENT_RXOF_IND | 0 << 8);
001540  2106              MOVS     r1,#6
001542  489b              LDR      r0,|L1.6064|
001544  f7fffffe          BL       rt_hw_can_isr
001548  e003              B        |L1.5458|
                  |L1.5450|
;;;1358           }
;;;1359           else
;;;1360           {
;;;1361               rt_hw_can_isr(&bxcan1, RT_CAN_EVENT_RX_IND | 0 << 8);
00154a  2101              MOVS     r1,#1
00154c  4898              LDR      r0,|L1.6064|
00154e  f7fffffe          BL       rt_hw_can_isr
                  |L1.5458|
;;;1362           }
;;;1363           CAN1->RF0R |= CAN_RF0R_RFOM0;
001552  4895              LDR      r0,|L1.6056|
001554  300c              ADDS     r0,r0,#0xc
001556  6800              LDR      r0,[r0,#0]
001558  f0400020          ORR      r0,r0,#0x20
00155c  4992              LDR      r1,|L1.6056|
00155e  310c              ADDS     r1,r1,#0xc
001560  6008              STR      r0,[r1,#0]
                  |L1.5474|
;;;1364       }
;;;1365       rt_interrupt_leave();
001562  f7fffffe          BL       rt_interrupt_leave
;;;1366   }
001566  bd10              POP      {r4,pc}
;;;1367   void CAN1_RX1_IRQHandler(void)
                          ENDP

                  CAN1_RX1_IRQHandler PROC
001568  b510              PUSH     {r4,lr}
;;;1368   {
;;;1369       rt_interrupt_enter();
00156a  f7fffffe          BL       rt_interrupt_enter
;;;1370       if (CAN1->RF1R & 0x03)
00156e  488e              LDR      r0,|L1.6056|
001570  3010              ADDS     r0,r0,#0x10
001572  6800              LDR      r0,[r0,#0]
001574  f0000003          AND      r0,r0,#3
001578  b1e0              CBZ      r0,|L1.5556|
;;;1371       {
;;;1372           if ((CAN1->RF1R & CAN_RF1R_FOVR1) != 0)
00157a  488b              LDR      r0,|L1.6056|
00157c  3010              ADDS     r0,r0,#0x10
00157e  6800              LDR      r0,[r0,#0]
001580  f0000010          AND      r0,r0,#0x10
001584  b148              CBZ      r0,|L1.5530|
;;;1373           {
;;;1374               CAN1->RF1R = CAN_RF1R_FOVR1;
001586  2010              MOVS     r0,#0x10
001588  4987              LDR      r1,|L1.6056|
00158a  3110              ADDS     r1,r1,#0x10
00158c  6008              STR      r0,[r1,#0]
;;;1375               rt_hw_can_isr(&bxcan1, RT_CAN_EVENT_RXOF_IND | 1 << 8);
00158e  f44f7183          MOV      r1,#0x106
001592  4887              LDR      r0,|L1.6064|
001594  f7fffffe          BL       rt_hw_can_isr
001598  e004              B        |L1.5540|
                  |L1.5530|
;;;1376           }
;;;1377           else
;;;1378           {
;;;1379               rt_hw_can_isr(&bxcan1, RT_CAN_EVENT_RX_IND | 1 << 8);
00159a  f2401101          MOV      r1,#0x101
00159e  4884              LDR      r0,|L1.6064|
0015a0  f7fffffe          BL       rt_hw_can_isr
                  |L1.5540|
;;;1380           }
;;;1381           CAN1->RF1R |= CAN_RF1R_RFOM1;
0015a4  4880              LDR      r0,|L1.6056|
0015a6  3010              ADDS     r0,r0,#0x10
0015a8  6800              LDR      r0,[r0,#0]
0015aa  f0400020          ORR      r0,r0,#0x20
0015ae  497e              LDR      r1,|L1.6056|
0015b0  3110              ADDS     r1,r1,#0x10
0015b2  6008              STR      r0,[r1,#0]
                  |L1.5556|
;;;1382       }
;;;1383       rt_interrupt_leave();
0015b4  f7fffffe          BL       rt_interrupt_leave
;;;1384   }
0015b8  bd10              POP      {r4,pc}
;;;1385   void CAN1_TX_IRQHandler(void)
                          ENDP

                  CAN1_TX_IRQHandler PROC
0015ba  b510              PUSH     {r4,lr}
;;;1386   {
;;;1387       rt_uint32_t state;
;;;1388       rt_interrupt_enter();
0015bc  f7fffffe          BL       rt_interrupt_enter
;;;1389       if (CAN1->TSR & (CAN_TSR_RQCP0))
0015c0  4879              LDR      r0,|L1.6056|
0015c2  3008              ADDS     r0,r0,#8
0015c4  6800              LDR      r0,[r0,#0]
0015c6  f0000001          AND      r0,r0,#1
0015ca  b1c8              CBZ      r0,|L1.5632|
;;;1390       {
;;;1391           state =  CAN1->TSR & (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
0015cc  4876              LDR      r0,|L1.6056|
0015ce  3008              ADDS     r0,r0,#8
0015d0  6800              LDR      r0,[r0,#0]
0015d2  4978              LDR      r1,|L1.6068|
0015d4  ea000401          AND      r4,r0,r1
;;;1392           CAN1->TSR |= CAN_TSR_RQCP0;
0015d8  4873              LDR      r0,|L1.6056|
0015da  3008              ADDS     r0,r0,#8
0015dc  6800              LDR      r0,[r0,#0]
0015de  f0400001          ORR      r0,r0,#1
0015e2  4971              LDR      r1,|L1.6056|
0015e4  3108              ADDS     r1,r1,#8
0015e6  6008              STR      r0,[r1,#0]
;;;1393           if (state == (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0))
0015e8  4872              LDR      r0,|L1.6068|
0015ea  4284              CMP      r4,r0
0015ec  d104              BNE      |L1.5624|
;;;1394           {
;;;1395               rt_hw_can_isr(&bxcan1, RT_CAN_EVENT_TX_DONE | 0 << 8);
0015ee  2102              MOVS     r1,#2
0015f0  486f              LDR      r0,|L1.6064|
0015f2  f7fffffe          BL       rt_hw_can_isr
0015f6  e003              B        |L1.5632|
                  |L1.5624|
;;;1396           }
;;;1397           else
;;;1398           {
;;;1399               rt_hw_can_isr(&bxcan1, RT_CAN_EVENT_TX_FAIL | 0 << 8);
0015f8  2103              MOVS     r1,#3
0015fa  486d              LDR      r0,|L1.6064|
0015fc  f7fffffe          BL       rt_hw_can_isr
                  |L1.5632|
;;;1400           }
;;;1401       }
;;;1402       if (CAN1->TSR & (CAN_TSR_RQCP1))
001600  4869              LDR      r0,|L1.6056|
001602  3008              ADDS     r0,r0,#8
001604  6800              LDR      r0,[r0,#0]
001606  f4007080          AND      r0,r0,#0x100
00160a  b1d8              CBZ      r0,|L1.5700|
;;;1403       {
;;;1404           state =  CAN1->TSR & (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
00160c  4866              LDR      r0,|L1.6056|
00160e  3008              ADDS     r0,r0,#8
001610  6800              LDR      r0,[r0,#0]
001612  4969              LDR      r1,|L1.6072|
001614  ea000401          AND      r4,r0,r1
;;;1405           CAN1->TSR |= CAN_TSR_RQCP1;
001618  4863              LDR      r0,|L1.6056|
00161a  3008              ADDS     r0,r0,#8
00161c  6800              LDR      r0,[r0,#0]
00161e  f4407080          ORR      r0,r0,#0x100
001622  4961              LDR      r1,|L1.6056|
001624  3108              ADDS     r1,r1,#8
001626  6008              STR      r0,[r1,#0]
;;;1406           if (state == (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1))
001628  4863              LDR      r0,|L1.6072|
00162a  4284              CMP      r4,r0
00162c  d105              BNE      |L1.5690|
;;;1407           {
;;;1408               rt_hw_can_isr(&bxcan1, RT_CAN_EVENT_TX_DONE | 1 << 8);
00162e  f44f7181          MOV      r1,#0x102
001632  485f              LDR      r0,|L1.6064|
001634  f7fffffe          BL       rt_hw_can_isr
001638  e004              B        |L1.5700|
                  |L1.5690|
;;;1409           }
;;;1410           else
;;;1411           {
;;;1412               rt_hw_can_isr(&bxcan1, RT_CAN_EVENT_TX_FAIL | 1 << 8);
00163a  f2401103          MOV      r1,#0x103
00163e  485c              LDR      r0,|L1.6064|
001640  f7fffffe          BL       rt_hw_can_isr
                  |L1.5700|
;;;1413           }
;;;1414       }
;;;1415       if (CAN1->TSR & (CAN_TSR_RQCP2))
001644  4858              LDR      r0,|L1.6056|
001646  3008              ADDS     r0,r0,#8
001648  6800              LDR      r0,[r0,#0]
00164a  f4003080          AND      r0,r0,#0x10000
00164e  b1d8              CBZ      r0,|L1.5768|
;;;1416       {
;;;1417           state =  CAN1->TSR & (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
001650  4855              LDR      r0,|L1.6056|
001652  3008              ADDS     r0,r0,#8
001654  6800              LDR      r0,[r0,#0]
001656  4959              LDR      r1,|L1.6076|
001658  ea000401          AND      r4,r0,r1
;;;1418           CAN1->TSR |= CAN_TSR_RQCP2;
00165c  4852              LDR      r0,|L1.6056|
00165e  3008              ADDS     r0,r0,#8
001660  6800              LDR      r0,[r0,#0]
001662  f4403080          ORR      r0,r0,#0x10000
001666  4950              LDR      r1,|L1.6056|
001668  3108              ADDS     r1,r1,#8
00166a  6008              STR      r0,[r1,#0]
;;;1419           if (state == (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2))
00166c  4853              LDR      r0,|L1.6076|
00166e  4284              CMP      r4,r0
001670  d105              BNE      |L1.5758|
;;;1420           {
;;;1421               rt_hw_can_isr(&bxcan1, RT_CAN_EVENT_TX_DONE | 2 << 8);
001672  f2402102          MOV      r1,#0x202
001676  484e              LDR      r0,|L1.6064|
001678  f7fffffe          BL       rt_hw_can_isr
00167c  e004              B        |L1.5768|
                  |L1.5758|
;;;1422           }
;;;1423           else
;;;1424           {
;;;1425               rt_hw_can_isr(&bxcan1, RT_CAN_EVENT_TX_FAIL | 2 << 8);
00167e  f2402103          MOV      r1,#0x203
001682  484b              LDR      r0,|L1.6064|
001684  f7fffffe          BL       rt_hw_can_isr
                  |L1.5768|
;;;1426           }
;;;1427       }
;;;1428       rt_interrupt_leave();
001688  f7fffffe          BL       rt_interrupt_leave
;;;1429   }
00168c  bd10              POP      {r4,pc}
;;;1430   void CAN1_SCE_IRQHandler(void)
                          ENDP

                  CAN1_SCE_IRQHandler PROC
00168e  b510              PUSH     {r4,lr}
;;;1431   {
;;;1432       rt_uint32_t errtype;
;;;1433       errtype = CAN1->ESR;
001690  4845              LDR      r0,|L1.6056|
001692  3018              ADDS     r0,r0,#0x18
001694  6804              LDR      r4,[r0,#0]
;;;1434       rt_interrupt_enter();
001696  f7fffffe          BL       rt_interrupt_enter
;;;1435       if (errtype & 0x70 && bxcan1.status.lasterrtype == (errtype & 0x70))
00169a  f0040070          AND      r0,r4,#0x70
00169e  b3e8              CBZ      r0,|L1.5916|
0016a0  4843              LDR      r0,|L1.6064|
0016a2  f8d00094          LDR      r0,[r0,#0x94]
0016a6  f0040170          AND      r1,r4,#0x70
0016aa  4288              CMP      r0,r1
0016ac  d13e              BNE      |L1.5932|
;;;1436       {
;;;1437           switch ((errtype & 0x70) >> 4)
0016ae  f3c41002          UBFX     r0,r4,#4,#3
0016b2  2807              CMP      r0,#7
0016b4  d22a              BCS      |L1.5900|
0016b6  e8dff000          TBB      [pc,r0]
0016ba  2904              DCB      0x29,0x04
0016bc  0a101819          DCB      0x0a,0x10,0x18,0x19
0016c0  2100              DCB      0x21,0x00
;;;1438           {
;;;1439           case RT_CAN_BUS_BIT_PAD_ERR:
;;;1440               bxcan1.status.bitpaderrcnt++;
0016c2  483b              LDR      r0,|L1.6064|
0016c4  6f80              LDR      r0,[r0,#0x78]
0016c6  1c40              ADDS     r0,r0,#1
0016c8  4939              LDR      r1,|L1.6064|
0016ca  6788              STR      r0,[r1,#0x78]
;;;1441               break;
0016cc  e01e              B        |L1.5900|
;;;1442           case RT_CAN_BUS_FORMAT_ERR:
;;;1443               bxcan1.status.formaterrcnt++;
0016ce  4838              LDR      r0,|L1.6064|
0016d0  6fc0              LDR      r0,[r0,#0x7c]
0016d2  1c40              ADDS     r0,r0,#1
0016d4  4936              LDR      r1,|L1.6064|
0016d6  67c8              STR      r0,[r1,#0x7c]
;;;1444               break;
0016d8  e018              B        |L1.5900|
;;;1445           case RT_CAN_BUS_ACK_ERR:
;;;1446               bxcan1.status.ackerrcnt++;
0016da  4835              LDR      r0,|L1.6064|
0016dc  f8d00080          LDR      r0,[r0,#0x80]
0016e0  1c40              ADDS     r0,r0,#1
0016e2  4933              LDR      r1,|L1.6064|
0016e4  f8c10080          STR      r0,[r1,#0x80]
;;;1447               break;
0016e8  e010              B        |L1.5900|
;;;1448           case RT_CAN_BUS_IMPLICIT_BIT_ERR:
;;;1449           case RT_CAN_BUS_EXPLICIT_BIT_ERR:
0016ea  bf00              NOP      
;;;1450               bxcan1.status.biterrcnt++;
0016ec  4830              LDR      r0,|L1.6064|
0016ee  f8d00084          LDR      r0,[r0,#0x84]
0016f2  1c40              ADDS     r0,r0,#1
0016f4  492e              LDR      r1,|L1.6064|
0016f6  f8c10084          STR      r0,[r1,#0x84]
;;;1451               break;
0016fa  e007              B        |L1.5900|
;;;1452           case RT_CAN_BUS_CRC_ERR:
;;;1453               bxcan1.status.crcerrcnt++;
0016fc  482c              LDR      r0,|L1.6064|
0016fe  f8d00088          LDR      r0,[r0,#0x88]
001702  1c40              ADDS     r0,r0,#1
001704  492a              LDR      r1,|L1.6064|
001706  f8c10088          STR      r0,[r1,#0x88]
;;;1454               break;
00170a  bf00              NOP      
                  |L1.5900|
00170c  bf00              NOP                            ;1441
;;;1455           }
;;;1456           bxcan1.status.lasterrtype = errtype & 0x70;
00170e  f0040170          AND      r1,r4,#0x70
001712  4827              LDR      r0,|L1.6064|
001714  f8c01094          STR      r1,[r0,#0x94]
;;;1457           CAN1->ESR &= ~0x70;
001718  4823              LDR      r0,|L1.6056|
00171a  e000              B        |L1.5918|
                  |L1.5916|
00171c  e006              B        |L1.5932|
                  |L1.5918|
00171e  3018              ADDS     r0,r0,#0x18
001720  6800              LDR      r0,[r0,#0]
001722  f0200070          BIC      r0,r0,#0x70
001726  4920              LDR      r1,|L1.6056|
001728  3118              ADDS     r1,r1,#0x18
00172a  6008              STR      r0,[r1,#0]
                  |L1.5932|
;;;1458       }
;;;1459       bxcan1.status.rcverrcnt = errtype >> 24;
00172c  0e20              LSRS     r0,r4,#24
00172e  4920              LDR      r1,|L1.6064|
001730  65c8              STR      r0,[r1,#0x5c]  ; bxcan1
;;;1460       bxcan1.status.snderrcnt = (errtype >> 16 & 0xFF);
001732  f3c44107          UBFX     r1,r4,#16,#8
001736  481e              LDR      r0,|L1.6064|
001738  6601              STR      r1,[r0,#0x60]
;;;1461       bxcan1.status.errcode = errtype & 0x07;
00173a  f0040107          AND      r1,r4,#7
00173e  6641              STR      r1,[r0,#0x64]
;;;1462       CAN1->MSR |= CAN_MSR_ERRI;
001740  4819              LDR      r0,|L1.6056|
001742  1d00              ADDS     r0,r0,#4
001744  6800              LDR      r0,[r0,#0]
001746  f0400004          ORR      r0,r0,#4
00174a  4917              LDR      r1,|L1.6056|
00174c  1d09              ADDS     r1,r1,#4
00174e  6008              STR      r0,[r1,#0]
;;;1463       rt_interrupt_leave();
001750  f7fffffe          BL       rt_interrupt_leave
;;;1464   }
001754  bd10              POP      {r4,pc}
;;;1465   #endif /*USING_BXCAN1*/
                          ENDP

                  stm32_bxcan_init PROC
;;;1616   
;;;1617   int stm32_bxcan_init(void)
001756  b510              PUSH     {r4,lr}
;;;1618   {
;;;1619   
;;;1620   #ifdef USING_BXCAN1
;;;1621       RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA, ENABLE);
001758  2101              MOVS     r1,#1
00175a  2005              MOVS     r0,#5
00175c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;1622       RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1 , ENABLE);
001760  2101              MOVS     r1,#1
001762  0648              LSLS     r0,r1,#25
001764  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;1623       CAN_DeInit(CAN1);
001768  480f              LDR      r0,|L1.6056|
00176a  f7fffffe          BL       CAN_DeInit
;;;1624       bxcan1.config.baud_rate = CAN1MBaud;
00176e  4814              LDR      r0,|L1.6080|
001770  490f              LDR      r1,|L1.6064|
001772  6448              STR      r0,[r1,#0x44]  ; bxcan1
;;;1625       bxcan1.config.msgboxsz = 16;
001774  2110              MOVS     r1,#0x10
001776  480e              LDR      r0,|L1.6064|
001778  6481              STR      r1,[r0,#0x48]
;;;1626       bxcan1.config.sndboxnumber = 3;
00177a  2103              MOVS     r1,#3
00177c  64c1              STR      r1,[r0,#0x4c]
;;;1627       bxcan1.config.mode = RT_CAN_MODE_NORMAL;
00177e  6d00              LDR      r0,[r0,#0x50]
001780  f02001ff          BIC      r1,r0,#0xff
001784  480a              LDR      r0,|L1.6064|
001786  6501              STR      r1,[r0,#0x50]
;;;1628       bxcan1.config.privmode = 0;
001788  6d00              LDR      r0,[r0,#0x50]
00178a  f420417f          BIC      r1,r0,#0xff00
00178e  4808              LDR      r0,|L1.6064|
001790  6501              STR      r1,[r0,#0x50]
;;;1629       bxcan1.config.ticks = 50;
001792  2132              MOVS     r1,#0x32
001794  6541              STR      r1,[r0,#0x54]
;;;1630   #ifdef RT_CAN_USING_HDR
;;;1631       bxcan1.config.maxhdr = BX_CAN2_FMRSTART * 4;
001796  211c              MOVS     r1,#0x1c
001798  6581              STR      r1,[r0,#0x58]
;;;1632   #endif
;;;1633       rt_hw_can_register(&bxcan1, "bxcan1", &canops, &bxcan1data);
00179a  4b0a              LDR      r3,|L1.6084|
00179c  4a0a              LDR      r2,|L1.6088|
00179e  a10b              ADR      r1,|L1.6092|
0017a0  f7fffffe          BL       rt_hw_can_register
;;;1634   #endif
;;;1635   
;;;1636   #ifdef USING_BXCAN2
;;;1637       RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOB, ENABLE);
;;;1638   #ifndef USING_BXCAN1
;;;1639       RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1 , ENABLE);
;;;1640   #endif
;;;1641       RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN2, ENABLE);
;;;1642       CAN_DeInit(CAN2);
;;;1643       bxcan2.config.baud_rate = CAN1MBaud;
;;;1644       bxcan2.config.msgboxsz = 16;
;;;1645       bxcan2.config.sndboxnumber = 3;
;;;1646       bxcan2.config.mode = RT_CAN_MODE_NORMAL;
;;;1647       bxcan2.config.privmode = 0;
;;;1648       bxcan2.config.ticks = 50;
;;;1649   #ifdef RT_CAN_USING_HDR
;;;1650       bxcan2.config.maxhdr = (BX_CAN_FMRNUMBER - BX_CAN2_FMRSTART) * 4;
;;;1651   #endif
;;;1652       rt_hw_can_register(&bxcan2, "bxcan2", &canops, &bxcan2data);
;;;1653   #endif
;;;1654       return RT_EOK;
0017a4  2000              MOVS     r0,#0
;;;1655   }
0017a6  bd10              POP      {r4,pc}
                  |L1.6056|
                          DCD      0x40006400
                  |L1.6060|
                          DCD      0x40006800
                  |L1.6064|
                          DCD      bxcan1
                  |L1.6068|
                          DCD      0x04000003
                  |L1.6072|
                          DCD      0x08000300
                  |L1.6076|
                          DCD      0x10030000
                  |L1.6080|
                          DCD      0x000f4240
                  |L1.6084|
                          DCD      bxcan1data
                  |L1.6088|
                          DCD      canops
                  |L1.6092|
0017cc  62786361          DCB      "bxcan1",0
0017d0  6e3100  
0017d3  00                DCB      0
                          ENDP

                  NVIC_DisableIRQ PROC
;;;1334    */
;;;1335   __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
0017d4  f000021f          AND      r2,r0,#0x1f
;;;1336   {
;;;1337     NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
0017d8  2101              MOVS     r1,#1
0017da  4091              LSLS     r1,r1,r2
0017dc  4a02              LDR      r2,|L1.6120|
0017de  0943              LSRS     r3,r0,#5
0017e0  f8421023          STR      r1,[r2,r3,LSL #2]
;;;1338   }
0017e4  4770              BX       lr
;;;1339   
                          ENDP

0017e6  0000              DCW      0x0000
                  |L1.6120|
                          DCD      0xe000e180

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  bxcan1
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  bxcan_baud_rate_tab
                          DCD      0x000f4240
                          DCD      0x01270003
                          DCD      0x000c3500
                          DCD      0x012a0003
                          DCD      0x0007a120
                          DCD      0x01180006
                          DCD      0x0003d090
                          DCD      0x011c0009
                          DCD      0x0001e848
                          DCD      0x011c0012
                          DCD      0x000186a0
                          DCD      0x0118001e
                          DCD      0x0000c350
                          DCD      0x011c002d
                          DCD      0x00004e20
                          DCD      0x012d0064
                          DCD      0x00002710
                          DCD      0x012d00c8
                  canops
                          DCD      configure
                          DCD      control
                          DCD      sendmsg
                          DCD      recvmsg

                          AREA ||.data||, DATA, ALIGN=2

                  bxcan1data
                          DCD      0x40006400
                          DCD      0x40006640
000008  13141516          DCB      0x13,0x14,0x15,0x16
                          DCD      0x00000000
                          DCD      0x00000000
                          %        56
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000007
                          DCD      0x00000007
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x00000018
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x00000018

                          AREA ||.rti_fn.1||, DATA, READONLY, ALIGN=2

                  __rt_init_stm32_bxcan_init
                  ||__tagsym$$used||
                          DCD      stm32_bxcan_init

;*** Start embedded assembler ***

#line 1 "drivers\\bxcan.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_bxcan_c_f4c8baf7____REV16|
#line 129 "..\\..\\components\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_bxcan_c_f4c8baf7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_bxcan_c_f4c8baf7____REVSH|
#line 144
|__asm___7_bxcan_c_f4c8baf7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
