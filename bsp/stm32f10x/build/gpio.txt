; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\gpio.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\gpio.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -Iapplications -I. -Idrivers -ILibraries\STM32F10x_StdPeriph_Driver\inc -ILibraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\components\CMSIS\Include -I..\..\include -I..\..\libcpu\arm\cortex-m3 -I..\..\libcpu\arm\common -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\drivers\spi -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\finsh -I..\..\components\libc\compilers\armlibc -I..\..\components\libc\compilers\common -IE:\00_snake.xiao\RT-Thread\rt-thread\bsp\stm32f10x\RTE\_rtthread-stm32 -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\Keil\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DSTM32F10X_HD -DSTM32F10X_HD -DRT_USING_ARM_LIBC -DUSE_STDPERIPH_DRIVER --omf_browse=.\build\gpio.crf drivers\gpio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  get_pin PROC
;;;454    #define ITEM_NUM(items) sizeof(items)/sizeof(items[0])
;;;455    const struct pin_index *get_pin(uint8_t pin)
000000  4601              MOV      r1,r0
;;;456    {
;;;457        const struct pin_index *index;
;;;458    
;;;459        if (pin < ITEM_NUM(pins))
000002  2965              CMP      r1,#0x65
000004  d209              BCS      |L1.26|
;;;460        {
;;;461            index = &pins[pin];
000006  eb010281          ADD      r2,r1,r1,LSL #2
00000a  4bfe              LDR      r3,|L1.1028|
00000c  eb030082          ADD      r0,r3,r2,LSL #2
;;;462            if (index->index == -1)
000010  6802              LDR      r2,[r0,#0]
000012  1c52              ADDS     r2,r2,#1
000014  b912              CBNZ     r2,|L1.28|
;;;463                index = RT_NULL;
000016  2000              MOVS     r0,#0
000018  e000              B        |L1.28|
                  |L1.26|
;;;464        }
;;;465        else
;;;466        {
;;;467            index = RT_NULL;
00001a  2000              MOVS     r0,#0
                  |L1.28|
;;;468        }
;;;469    
;;;470        return index;
;;;471    };
00001c  4770              BX       lr
;;;472    
                          ENDP

                  stm32_pin_write PROC
;;;473    void stm32_pin_write(rt_device_t dev, rt_base_t pin, rt_base_t value)
00001e  e92d41f0          PUSH     {r4-r8,lr}
;;;474    {
000022  4607              MOV      r7,r0
000024  460d              MOV      r5,r1
000026  4616              MOV      r6,r2
;;;475        const struct pin_index *index;
;;;476    
;;;477        index = get_pin(pin);
000028  b2e8              UXTB     r0,r5
00002a  f7fffffe          BL       get_pin
00002e  4604              MOV      r4,r0
;;;478        if (index == RT_NULL)
000030  b90c              CBNZ     r4,|L1.54|
                  |L1.50|
;;;479        {
;;;480            return;
;;;481        }
;;;482    
;;;483        if (value == PIN_LOW)
;;;484        {
;;;485            GPIO_ResetBits(index->gpio, index->pin);
;;;486        }
;;;487        else
;;;488        {
;;;489            GPIO_SetBits(index->gpio, index->pin);
;;;490        }
;;;491    }
000032  e8bd81f0          POP      {r4-r8,pc}
                  |L1.54|
000036  b92e              CBNZ     r6,|L1.68|
000038  89a2              LDRH     r2,[r4,#0xc]          ;485
00003a  b291              UXTH     r1,r2                 ;485
00003c  68a0              LDR      r0,[r4,#8]            ;485
00003e  f7fffffe          BL       GPIO_ResetBits
000042  e004              B        |L1.78|
                  |L1.68|
000044  89a2              LDRH     r2,[r4,#0xc]          ;489
000046  b291              UXTH     r1,r2                 ;489
000048  68a0              LDR      r0,[r4,#8]            ;489
00004a  f7fffffe          BL       GPIO_SetBits
                  |L1.78|
00004e  bf00              NOP      
000050  e7ef              B        |L1.50|
;;;492    
                          ENDP

                  stm32_pin_read PROC
;;;493    int stm32_pin_read(rt_device_t dev, rt_base_t pin)
000052  e92d41f0          PUSH     {r4-r8,lr}
;;;494    {
000056  4607              MOV      r7,r0
000058  460d              MOV      r5,r1
;;;495        int value;
;;;496        const struct pin_index *index;
;;;497    
;;;498        value = PIN_LOW;
00005a  2600              MOVS     r6,#0
;;;499    
;;;500        index = get_pin(pin);
00005c  b2e8              UXTB     r0,r5
00005e  f7fffffe          BL       get_pin
000062  4604              MOV      r4,r0
;;;501        if (index == RT_NULL)
000064  b914              CBNZ     r4,|L1.108|
;;;502        {
;;;503            return value;
000066  4630              MOV      r0,r6
                  |L1.104|
;;;504        }
;;;505    
;;;506        if (GPIO_ReadInputDataBit(index->gpio, index->pin) == Bit_RESET)
;;;507        {
;;;508            value = PIN_LOW;
;;;509        }
;;;510        else
;;;511        {
;;;512            value = PIN_HIGH;
;;;513        }
;;;514    
;;;515        return value;
;;;516    }
000068  e8bd81f0          POP      {r4-r8,pc}
                  |L1.108|
00006c  89a2              LDRH     r2,[r4,#0xc]          ;506
00006e  b291              UXTH     r1,r2                 ;506
000070  68a0              LDR      r0,[r4,#8]            ;506
000072  f7fffffe          BL       GPIO_ReadInputDataBit
000076  b908              CBNZ     r0,|L1.124|
000078  2600              MOVS     r6,#0                 ;508
00007a  e000              B        |L1.126|
                  |L1.124|
00007c  2601              MOVS     r6,#1                 ;512
                  |L1.126|
00007e  4630              MOV      r0,r6                 ;515
000080  e7f2              B        |L1.104|
;;;517    
                          ENDP

                  stm32_pin_mode PROC
;;;518    void stm32_pin_mode(rt_device_t dev, rt_base_t pin, rt_base_t mode)
000082  b5f8              PUSH     {r3-r7,lr}
;;;519    {
000084  4607              MOV      r7,r0
000086  460e              MOV      r6,r1
000088  4614              MOV      r4,r2
;;;520        const struct pin_index *index;
;;;521        GPIO_InitTypeDef  GPIO_InitStructure;
;;;522    
;;;523        index = get_pin(pin);
00008a  b2f0              UXTB     r0,r6
00008c  f7fffffe          BL       get_pin
000090  4605              MOV      r5,r0
;;;524        if (index == RT_NULL)
000092  b905              CBNZ     r5,|L1.150|
                  |L1.148|
;;;525        {
;;;526            return;
;;;527        }
;;;528    
;;;529        /* GPIO Periph clock enable */
;;;530        RCC_APB2PeriphClockCmd(index->rcc, ENABLE);
;;;531    
;;;532        /* Configure GPIO_InitStructure */
;;;533        GPIO_InitStructure.GPIO_Pin     = index->pin;
;;;534        GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
;;;535        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;536    
;;;537        if (mode == PIN_MODE_OUTPUT)
;;;538        {
;;;539            /* output setting */
;;;540            GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
;;;541        }
;;;542        else if (mode == PIN_MODE_OUTPUT_OD)
;;;543        {
;;;544            /* output setting: od. */
;;;545            GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_OD;
;;;546        }				
;;;547        else if (mode == PIN_MODE_INPUT)
;;;548        {
;;;549            /* input setting: not pull. */
;;;550            GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
;;;551        }
;;;552        else if (mode == PIN_MODE_INPUT_PULLUP)
;;;553        {
;;;554            /* input setting: pull up. */
;;;555            GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPU;
;;;556        }
;;;557        else
;;;558        {
;;;559            /* input setting:default. */
;;;560            GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPD;
;;;561        }
;;;562        GPIO_Init(index->gpio, &GPIO_InitStructure);
;;;563    }
000094  bdf8              POP      {r3-r7,pc}
                  |L1.150|
000096  2101              MOVS     r1,#1                 ;530
000098  6868              LDR      r0,[r5,#4]            ;530
00009a  f7fffffe          BL       RCC_APB2PeriphClockCmd
00009e  89a8              LDRH     r0,[r5,#0xc]          ;533
0000a0  b280              UXTH     r0,r0                 ;533
0000a2  f8ad0000          STRH     r0,[sp,#0]            ;533
0000a6  2010              MOVS     r0,#0x10              ;534
0000a8  f88d0003          STRB     r0,[sp,#3]            ;534
0000ac  2003              MOVS     r0,#3                 ;535
0000ae  f88d0002          STRB     r0,[sp,#2]            ;535
0000b2  b91c              CBNZ     r4,|L1.188|
0000b4  2010              MOVS     r0,#0x10              ;540
0000b6  f88d0003          STRB     r0,[sp,#3]            ;540
0000ba  e014              B        |L1.230|
                  |L1.188|
0000bc  2c04              CMP      r4,#4                 ;542
0000be  d103              BNE      |L1.200|
0000c0  2014              MOVS     r0,#0x14              ;545
0000c2  f88d0003          STRB     r0,[sp,#3]            ;545
0000c6  e00e              B        |L1.230|
                  |L1.200|
0000c8  2c01              CMP      r4,#1                 ;547
0000ca  d103              BNE      |L1.212|
0000cc  2004              MOVS     r0,#4                 ;550
0000ce  f88d0003          STRB     r0,[sp,#3]            ;550
0000d2  e008              B        |L1.230|
                  |L1.212|
0000d4  2c02              CMP      r4,#2                 ;552
0000d6  d103              BNE      |L1.224|
0000d8  2048              MOVS     r0,#0x48              ;555
0000da  f88d0003          STRB     r0,[sp,#3]            ;555
0000de  e002              B        |L1.230|
                  |L1.224|
0000e0  2028              MOVS     r0,#0x28              ;560
0000e2  f88d0003          STRB     r0,[sp,#3]            ;560
                  |L1.230|
0000e6  4669              MOV      r1,sp                 ;562
0000e8  68a8              LDR      r0,[r5,#8]            ;562
0000ea  f7fffffe          BL       GPIO_Init
0000ee  bf00              NOP      
0000f0  e7d0              B        |L1.148|
;;;564    
                          ENDP

                  bit2bitno PROC
;;;565    rt_inline rt_int32_t bit2bitno(rt_uint32_t bit)
0000f2  4602              MOV      r2,r0
;;;566    {
;;;567        int i;
;;;568        for(i = 0; i < 32; i++)
0000f4  2100              MOVS     r1,#0
0000f6  e006              B        |L1.262|
                  |L1.248|
;;;569        {
;;;570            if((0x01 << i) == bit)
0000f8  2001              MOVS     r0,#1
0000fa  4088              LSLS     r0,r0,r1
0000fc  4290              CMP      r0,r2
0000fe  d101              BNE      |L1.260|
;;;571            {
;;;572                return i;
000100  4608              MOV      r0,r1
                  |L1.258|
;;;573            }
;;;574        }
;;;575        return -1;
;;;576    }
000102  4770              BX       lr
                  |L1.260|
000104  1c49              ADDS     r1,r1,#1              ;568
                  |L1.262|
000106  2920              CMP      r1,#0x20              ;568
000108  dbf6              BLT      |L1.248|
00010a  f04f30ff          MOV      r0,#0xffffffff        ;575
00010e  e7f8              B        |L1.258|
;;;577    rt_inline const struct pin_irq_map *get_pin_irq_map(uint32_t pinbit)
                          ENDP

                  stm32_pin_attach_irq PROC
;;;585    };
;;;586    rt_err_t stm32_pin_attach_irq(struct rt_device *device, rt_int32_t pin,
000110  e92d5ff0          PUSH     {r4-r12,lr}
;;;587                      rt_uint32_t mode, void (*hdr)(void *args), void *args)
;;;588    {
000114  4683              MOV      r11,r0
000116  460d              MOV      r5,r1
000118  4616              MOV      r6,r2
00011a  461f              MOV      r7,r3
00011c  f8dd8028          LDR      r8,[sp,#0x28]
;;;589        const struct pin_index *index;
;;;590        rt_base_t level;
;;;591        rt_int32_t irqindex = -1;
000120  f04f34ff          MOV      r4,#0xffffffff
;;;592    
;;;593        index = get_pin(pin);
000124  b2e8              UXTB     r0,r5
000126  f7fffffe          BL       get_pin
00012a  4681              MOV      r9,r0
;;;594        if (index == RT_NULL)
00012c  f1b90f00          CMP      r9,#0
000130  d102              BNE      |L1.312|
;;;595        {
;;;596            return -RT_ENOSYS;
000132  1f60              SUBS     r0,r4,#5
                  |L1.308|
;;;597        }
;;;598        irqindex = bit2bitno(index->pin);
;;;599        if(irqindex < 0 || irqindex >= ITEM_NUM(pin_irq_map))
;;;600        {
;;;601            return -RT_ENOSYS;
;;;602        }
;;;603    
;;;604        level = rt_hw_interrupt_disable();
;;;605        if(pin_irq_hdr_tab[irqindex].pin == pin   &&
;;;606           pin_irq_hdr_tab[irqindex].hdr == hdr   &&
;;;607           pin_irq_hdr_tab[irqindex].mode == mode &&
;;;608           pin_irq_hdr_tab[irqindex].args == args
;;;609        )
;;;610        {
;;;611            rt_hw_interrupt_enable(level);
;;;612            return RT_EOK;
;;;613        }
;;;614        if(pin_irq_hdr_tab[irqindex].pin != -1)
;;;615        {
;;;616            rt_hw_interrupt_enable(level);
;;;617            return -RT_EBUSY;
;;;618        }
;;;619        pin_irq_hdr_tab[irqindex].pin = pin;
;;;620        pin_irq_hdr_tab[irqindex].hdr = hdr;
;;;621        pin_irq_hdr_tab[irqindex].mode = mode;
;;;622        pin_irq_hdr_tab[irqindex].args = args;
;;;623        rt_hw_interrupt_enable(level);
;;;624     
;;;625        return RT_EOK;
;;;626    }
000134  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.312|
000138  f8d9000c          LDR      r0,[r9,#0xc]          ;598
00013c  f7fffffe          BL       bit2bitno
000140  4604              MOV      r4,r0                 ;598
000142  2c00              CMP      r4,#0                 ;599
000144  db01              BLT      |L1.330|
000146  2c10              CMP      r4,#0x10              ;599
000148  d302              BCC      |L1.336|
                  |L1.330|
00014a  f06f0005          MVN      r0,#5                 ;601
00014e  e7f1              B        |L1.308|
                  |L1.336|
000150  f7fffffe          BL       rt_hw_interrupt_disable
000154  4682              MOV      r10,r0                ;604
000156  eb040044          ADD      r0,r4,r4,LSL #1       ;605
00015a  49ab              LDR      r1,|L1.1032|
00015c  f9310020          LDRSH    r0,[r1,r0,LSL #2]     ;605
000160  42a8              CMP      r0,r5                 ;605
000162  d119              BNE      |L1.408|
000164  eb040044          ADD      r0,r4,r4,LSL #1       ;606
000168  eb010080          ADD      r0,r1,r0,LSL #2       ;606
00016c  6840              LDR      r0,[r0,#4]            ;606
00016e  42b8              CMP      r0,r7                 ;606
000170  d112              BNE      |L1.408|
000172  eb040044          ADD      r0,r4,r4,LSL #1       ;607
000176  eb010080          ADD      r0,r1,r0,LSL #2       ;607
00017a  8840              LDRH     r0,[r0,#2]            ;607
00017c  42b0              CMP      r0,r6                 ;607
00017e  d10b              BNE      |L1.408|
000180  eb040044          ADD      r0,r4,r4,LSL #1       ;608
000184  eb010080          ADD      r0,r1,r0,LSL #2       ;608
000188  6880              LDR      r0,[r0,#8]            ;608
00018a  4540              CMP      r0,r8                 ;608
00018c  d104              BNE      |L1.408|
00018e  4650              MOV      r0,r10                ;611
000190  f7fffffe          BL       rt_hw_interrupt_enable
000194  2000              MOVS     r0,#0                 ;612
000196  e7cd              B        |L1.308|
                  |L1.408|
000198  eb040044          ADD      r0,r4,r4,LSL #1       ;614
00019c  499a              LDR      r1,|L1.1032|
00019e  f9310020          LDRSH    r0,[r1,r0,LSL #2]     ;614
0001a2  1c40              ADDS     r0,r0,#1              ;614
0001a4  b128              CBZ      r0,|L1.434|
0001a6  4650              MOV      r0,r10                ;616
0001a8  f7fffffe          BL       rt_hw_interrupt_enable
0001ac  f06f0006          MVN      r0,#6                 ;617
0001b0  e7c0              B        |L1.308|
                  |L1.434|
0001b2  b228              SXTH     r0,r5                 ;619
0001b4  eb040144          ADD      r1,r4,r4,LSL #1       ;619
0001b8  4a93              LDR      r2,|L1.1032|
0001ba  f8220021          STRH     r0,[r2,r1,LSL #2]     ;619
0001be  eb040044          ADD      r0,r4,r4,LSL #1       ;620
0001c2  4611              MOV      r1,r2                 ;620
0001c4  eb010080          ADD      r0,r1,r0,LSL #2       ;620
0001c8  6047              STR      r7,[r0,#4]            ;620
0001ca  eb040144          ADD      r1,r4,r4,LSL #1       ;621
0001ce  eb020181          ADD      r1,r2,r1,LSL #2       ;621
0001d2  804e              STRH     r6,[r1,#2]            ;621
0001d4  eb040044          ADD      r0,r4,r4,LSL #1       ;622
0001d8  4611              MOV      r1,r2                 ;622
0001da  eb010080          ADD      r0,r1,r0,LSL #2       ;622
0001de  f8c08008          STR      r8,[r0,#8]            ;622
0001e2  4650              MOV      r0,r10                ;623
0001e4  f7fffffe          BL       rt_hw_interrupt_enable
0001e8  2000              MOVS     r0,#0                 ;625
0001ea  e7a3              B        |L1.308|
;;;627    rt_err_t stm32_pin_detach_irq(struct rt_device *device, rt_int32_t pin)
                          ENDP

                  stm32_pin_detach_irq PROC
0001ec  e92d41f0          PUSH     {r4-r8,lr}
;;;628    {
0001f0  4680              MOV      r8,r0
0001f2  460d              MOV      r5,r1
;;;629        const struct pin_index *index;
;;;630        rt_base_t level;
;;;631        rt_int32_t irqindex = -1;
0001f4  f04f34ff          MOV      r4,#0xffffffff
;;;632    
;;;633        index = get_pin(pin);
0001f8  b2e8              UXTB     r0,r5
0001fa  f7fffffe          BL       get_pin
0001fe  4606              MOV      r6,r0
;;;634        if (index == RT_NULL)
000200  b916              CBNZ     r6,|L1.520|
;;;635        {
;;;636            return -RT_ENOSYS;
000202  1f60              SUBS     r0,r4,#5
                  |L1.516|
;;;637        }
;;;638        irqindex = bit2bitno(index->pin);
;;;639        if(irqindex < 0 || irqindex >= ITEM_NUM(pin_irq_map))
;;;640        {
;;;641            return -RT_ENOSYS;
;;;642        }
;;;643    
;;;644        level = rt_hw_interrupt_disable();
;;;645        if(pin_irq_hdr_tab[irqindex].pin == -1)
;;;646        {
;;;647            rt_hw_interrupt_enable(level);
;;;648            return RT_EOK;
;;;649        }
;;;650        pin_irq_hdr_tab[irqindex].pin = -1;
;;;651        pin_irq_hdr_tab[irqindex].hdr = RT_NULL;
;;;652        pin_irq_hdr_tab[irqindex].mode = 0;
;;;653        pin_irq_hdr_tab[irqindex].args = RT_NULL;
;;;654        rt_hw_interrupt_enable(level);
;;;655     
;;;656        return RT_EOK;
;;;657    }
000204  e8bd81f0          POP      {r4-r8,pc}
                  |L1.520|
000208  68f0              LDR      r0,[r6,#0xc]          ;638
00020a  f7fffffe          BL       bit2bitno
00020e  4604              MOV      r4,r0                 ;638
000210  2c00              CMP      r4,#0                 ;639
000212  db01              BLT      |L1.536|
000214  2c10              CMP      r4,#0x10              ;639
000216  d302              BCC      |L1.542|
                  |L1.536|
000218  f06f0005          MVN      r0,#5                 ;641
00021c  e7f2              B        |L1.516|
                  |L1.542|
00021e  f7fffffe          BL       rt_hw_interrupt_disable
000222  4607              MOV      r7,r0                 ;644
000224  eb040044          ADD      r0,r4,r4,LSL #1       ;645
000228  4977              LDR      r1,|L1.1032|
00022a  f9310020          LDRSH    r0,[r1,r0,LSL #2]     ;645
00022e  1c40              ADDS     r0,r0,#1              ;645
000230  b920              CBNZ     r0,|L1.572|
000232  4638              MOV      r0,r7                 ;647
000234  f7fffffe          BL       rt_hw_interrupt_enable
000238  2000              MOVS     r0,#0                 ;648
00023a  e7e3              B        |L1.516|
                  |L1.572|
00023c  f04f30ff          MOV      r0,#0xffffffff        ;650
000240  eb040144          ADD      r1,r4,r4,LSL #1       ;650
000244  4a70              LDR      r2,|L1.1032|
000246  f8220021          STRH     r0,[r2,r1,LSL #2]     ;650
00024a  2000              MOVS     r0,#0                 ;651
00024c  eb040144          ADD      r1,r4,r4,LSL #1       ;651
000250  eb020181          ADD      r1,r2,r1,LSL #2       ;651
000254  6048              STR      r0,[r1,#4]            ;651
000256  eb040144          ADD      r1,r4,r4,LSL #1       ;652
00025a  eb020181          ADD      r1,r2,r1,LSL #2       ;652
00025e  8048              STRH     r0,[r1,#2]            ;652
000260  eb040144          ADD      r1,r4,r4,LSL #1       ;653
000264  eb020181          ADD      r1,r2,r1,LSL #2       ;653
000268  6088              STR      r0,[r1,#8]            ;653
00026a  4638              MOV      r0,r7                 ;654
00026c  f7fffffe          BL       rt_hw_interrupt_enable
000270  2000              MOVS     r0,#0                 ;656
000272  e7c7              B        |L1.516|
;;;658    rt_err_t stm32_pin_irq_enable(struct rt_device *device, rt_base_t pin,
                          ENDP

                  stm32_pin_irq_enable PROC
000274  e92d5fff          PUSH     {r0-r12,lr}
;;;659                                                      rt_uint32_t enabled)
;;;660    {
000278  4689              MOV      r9,r1
00027a  4617              MOV      r7,r2
;;;661        const struct pin_index *index;
;;;662        const struct pin_irq_map *irqmap;
;;;663        rt_base_t level;
;;;664        rt_int32_t irqindex = -1;
00027c  f04f36ff          MOV      r6,#0xffffffff
;;;665        GPIO_InitTypeDef  GPIO_InitStructure;
;;;666        NVIC_InitTypeDef  NVIC_InitStructure;
;;;667        EXTI_InitTypeDef EXTI_InitStructure;
;;;668    
;;;669        index = get_pin(pin);
000280  f00900ff          AND      r0,r9,#0xff
000284  f7fffffe          BL       get_pin
000288  4604              MOV      r4,r0
;;;670        if (index == RT_NULL)
00028a  b91c              CBNZ     r4,|L1.660|
;;;671        {
;;;672            return -RT_ENOSYS;
00028c  1f70              SUBS     r0,r6,#5
                  |L1.654|
;;;673        }
;;;674        if(enabled == PIN_IRQ_ENABLE)
;;;675        {
;;;676            irqindex = bit2bitno(index->pin);
;;;677            if(irqindex < 0 || irqindex >= ITEM_NUM(pin_irq_map))
;;;678            {
;;;679                return -RT_ENOSYS;
;;;680            }
;;;681            level = rt_hw_interrupt_disable();
;;;682            if(pin_irq_hdr_tab[irqindex].pin == -1)
;;;683            {
;;;684                rt_hw_interrupt_enable(level);
;;;685                return -RT_ENOSYS;
;;;686            }
;;;687            irqmap = &pin_irq_map[irqindex];
;;;688            /* GPIO Periph clock enable */
;;;689            RCC_APB2PeriphClockCmd(index->rcc, ENABLE);
;;;690            /* Configure GPIO_InitStructure */
;;;691            GPIO_InitStructure.GPIO_Pin     = index->pin;
;;;692            GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPU;
;;;693            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;694            GPIO_Init(index->gpio, &GPIO_InitStructure);
;;;695    
;;;696            NVIC_InitStructure.NVIC_IRQChannel= irqmap->irqno;
;;;697            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority= 2;  
;;;698            NVIC_InitStructure.NVIC_IRQChannelSubPriority= 2; 
;;;699            NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;
;;;700            NVIC_Init(&NVIC_InitStructure);
;;;701    
;;;702            GPIO_EXTILineConfig(index->port_source, index->pin_source);
;;;703            EXTI_InitStructure.EXTI_Line = irqmap->irqbit;  
;;;704            EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
;;;705            switch(pin_irq_hdr_tab[irqindex].mode)
;;;706            {
;;;707            case PIN_IRQ_MODE_RISING:
;;;708              EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
;;;709              break;
;;;710            case PIN_IRQ_MODE_FALLING:
;;;711              EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
;;;712              break;
;;;713            case PIN_IRQ_MODE_RISING_FALLING:
;;;714              EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
;;;715              break;
;;;716            }
;;;717            EXTI_InitStructure.EXTI_LineCmd = ENABLE;  
;;;718            EXTI_Init(&EXTI_InitStructure);
;;;719            rt_hw_interrupt_enable(level);
;;;720        }
;;;721        else if(enabled == PIN_IRQ_DISABLE)
;;;722        {
;;;723            irqmap = get_pin_irq_map(index->pin);
;;;724            if(irqmap == RT_NULL)
;;;725            {
;;;726                return -RT_ENOSYS;
;;;727            }
;;;728            EXTI_InitStructure.EXTI_Line = irqmap->irqbit;  
;;;729            EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
;;;730            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
;;;731            EXTI_InitStructure.EXTI_LineCmd = DISABLE;  
;;;732            EXTI_Init(&EXTI_InitStructure);
;;;733        }
;;;734        else
;;;735        {
;;;736            return -RT_ENOSYS;
;;;737        }
;;;738    
;;;739        return RT_EOK;
;;;740    }
00028e  b004              ADD      sp,sp,#0x10
000290  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.660|
000294  2f01              CMP      r7,#1                 ;674
000296  d16b              BNE      |L1.880|
000298  68e0              LDR      r0,[r4,#0xc]          ;676
00029a  f7fffffe          BL       bit2bitno
00029e  4606              MOV      r6,r0                 ;676
0002a0  2e00              CMP      r6,#0                 ;677
0002a2  db01              BLT      |L1.680|
0002a4  2e10              CMP      r6,#0x10              ;677
0002a6  d302              BCC      |L1.686|
                  |L1.680|
0002a8  f06f0005          MVN      r0,#5                 ;679
0002ac  e7ef              B        |L1.654|
                  |L1.686|
0002ae  f7fffffe          BL       rt_hw_interrupt_disable
0002b2  4683              MOV      r11,r0                ;681
0002b4  eb060046          ADD      r0,r6,r6,LSL #1       ;682
0002b8  4953              LDR      r1,|L1.1032|
0002ba  f9310020          LDRSH    r0,[r1,r0,LSL #2]     ;682
0002be  1c40              ADDS     r0,r0,#1              ;682
0002c0  b928              CBNZ     r0,|L1.718|
0002c2  4658              MOV      r0,r11                ;684
0002c4  f7fffffe          BL       rt_hw_interrupt_enable
0002c8  f06f0005          MVN      r0,#5                 ;685
0002cc  e7df              B        |L1.654|
                  |L1.718|
0002ce  eb060046          ADD      r0,r6,r6,LSL #1       ;687
0002d2  494e              LDR      r1,|L1.1036|
0002d4  eb010580          ADD      r5,r1,r0,LSL #2       ;687
0002d8  2101              MOVS     r1,#1                 ;689
0002da  6860              LDR      r0,[r4,#4]            ;689
0002dc  f7fffffe          BL       RCC_APB2PeriphClockCmd
0002e0  89a0              LDRH     r0,[r4,#0xc]          ;691
0002e2  b280              UXTH     r0,r0                 ;691
0002e4  f8ad000c          STRH     r0,[sp,#0xc]          ;691
0002e8  2048              MOVS     r0,#0x48              ;692
0002ea  f88d000f          STRB     r0,[sp,#0xf]          ;692
0002ee  2003              MOVS     r0,#3                 ;693
0002f0  f88d000e          STRB     r0,[sp,#0xe]          ;693
0002f4  a903              ADD      r1,sp,#0xc            ;694
0002f6  68a0              LDR      r0,[r4,#8]            ;694
0002f8  f7fffffe          BL       GPIO_Init
0002fc  7a28              LDRB     r0,[r5,#8]            ;696
0002fe  f88d0008          STRB     r0,[sp,#8]            ;696
000302  2002              MOVS     r0,#2                 ;697
000304  f88d0009          STRB     r0,[sp,#9]            ;697
000308  f88d000a          STRB     r0,[sp,#0xa]          ;698
00030c  2001              MOVS     r0,#1                 ;699
00030e  f88d000b          STRB     r0,[sp,#0xb]          ;699
000312  a802              ADD      r0,sp,#8              ;700
000314  f7fffffe          BL       NVIC_Init
000318  7c61              LDRB     r1,[r4,#0x11]         ;702
00031a  7c20              LDRB     r0,[r4,#0x10]         ;702
00031c  f7fffffe          BL       GPIO_EXTILineConfig
000320  6868              LDR      r0,[r5,#4]            ;703
000322  9000              STR      r0,[sp,#0]            ;703
000324  2000              MOVS     r0,#0                 ;704
000326  f88d0004          STRB     r0,[sp,#4]            ;704
00032a  eb060046          ADD      r0,r6,r6,LSL #1       ;705
00032e  4936              LDR      r1,|L1.1032|
000330  eb010080          ADD      r0,r1,r0,LSL #2       ;705
000334  8840              LDRH     r0,[r0,#2]            ;705
000336  b120              CBZ      r0,|L1.834|
000338  2801              CMP      r0,#1                 ;705
00033a  d006              BEQ      |L1.842|
00033c  2802              CMP      r0,#2                 ;705
00033e  d10c              BNE      |L1.858|
000340  e007              B        |L1.850|
                  |L1.834|
000342  2008              MOVS     r0,#8                 ;708
000344  f88d0005          STRB     r0,[sp,#5]            ;708
000348  e007              B        |L1.858|
                  |L1.842|
00034a  200c              MOVS     r0,#0xc               ;711
00034c  f88d0005          STRB     r0,[sp,#5]            ;711
000350  e003              B        |L1.858|
                  |L1.850|
000352  2010              MOVS     r0,#0x10              ;714
000354  f88d0005          STRB     r0,[sp,#5]            ;714
000358  bf00              NOP                            ;715
                  |L1.858|
00035a  bf00              NOP                            ;709
00035c  2001              MOVS     r0,#1                 ;717
00035e  f88d0006          STRB     r0,[sp,#6]            ;717
000362  4668              MOV      r0,sp                 ;718
000364  f7fffffe          BL       EXTI_Init
000368  4658              MOV      r0,r11                ;719
00036a  f7fffffe          BL       rt_hw_interrupt_enable
00036e  e02a              B        |L1.966|
                  |L1.880|
000370  bb37              CBNZ     r7,|L1.960|
000372  f8d4a00c          LDR      r10,[r4,#0xc]         ;723
000376  4650              MOV      r0,r10                ;723
000378  f7fffffe          BL       bit2bitno
00037c  4680              MOV      r8,r0                 ;723
00037e  f1b80f00          CMP      r8,#0                 ;723
000382  db02              BLT      |L1.906|
000384  f1b80f10          CMP      r8,#0x10              ;723
000388  d301              BCC      |L1.910|
                  |L1.906|
00038a  2000              MOVS     r0,#0                 ;723
00038c  e004              B        |L1.920|
                  |L1.910|
00038e  eb080048          ADD      r0,r8,r8,LSL #1       ;723
000392  491e              LDR      r1,|L1.1036|
000394  eb010080          ADD      r0,r1,r0,LSL #2       ;723
                  |L1.920|
000398  4605              MOV      r5,r0                 ;723
00039a  b915              CBNZ     r5,|L1.930|
00039c  f06f0005          MVN      r0,#5                 ;726
0003a0  e775              B        |L1.654|
                  |L1.930|
0003a2  6868              LDR      r0,[r5,#4]            ;728
0003a4  9000              STR      r0,[sp,#0]            ;728
0003a6  2000              MOVS     r0,#0                 ;729
0003a8  f88d0004          STRB     r0,[sp,#4]            ;729
0003ac  2008              MOVS     r0,#8                 ;730
0003ae  f88d0005          STRB     r0,[sp,#5]            ;730
0003b2  2000              MOVS     r0,#0                 ;731
0003b4  f88d0006          STRB     r0,[sp,#6]            ;731
0003b8  4668              MOV      r0,sp                 ;732
0003ba  f7fffffe          BL       EXTI_Init
0003be  e002              B        |L1.966|
                  |L1.960|
0003c0  f06f0005          MVN      r0,#5                 ;736
0003c4  e763              B        |L1.654|
                  |L1.966|
0003c6  2000              MOVS     r0,#0                 ;739
0003c8  e761              B        |L1.654|
;;;741    const static struct rt_pin_ops _stm32_pin_ops =
                          ENDP

                  stm32_hw_pin_init PROC
;;;750    
;;;751    int stm32_hw_pin_init(void)
0003ca  b510              PUSH     {r4,lr}
;;;752    {
;;;753        int result;
;;;754    
;;;755        result = rt_device_pin_register("pin", &_stm32_pin_ops, RT_NULL);
0003cc  2200              MOVS     r2,#0
0003ce  4910              LDR      r1,|L1.1040|
0003d0  a010              ADR      r0,|L1.1044|
0003d2  f7fffffe          BL       rt_device_pin_register
0003d6  4604              MOV      r4,r0
;;;756        return result;
0003d8  4620              MOV      r0,r4
;;;757    }
0003da  bd10              POP      {r4,pc}
;;;758    INIT_BOARD_EXPORT(stm32_hw_pin_init);
                          ENDP

                  pin_irq_hdr PROC
;;;759    
;;;760    rt_inline void pin_irq_hdr(int irqno)
0003dc  b510              PUSH     {r4,lr}
;;;761    {
0003de  4604              MOV      r4,r0
;;;762        EXTI_ClearITPendingBit(pin_irq_map[irqno].irqbit);
0003e0  eb040144          ADD      r1,r4,r4,LSL #1
0003e4  4a09              LDR      r2,|L1.1036|
0003e6  eb020181          ADD      r1,r2,r1,LSL #2
0003ea  6848              LDR      r0,[r1,#4]
0003ec  f7fffffe          BL       EXTI_ClearITPendingBit
;;;763        if(pin_irq_hdr_tab[irqno].hdr)
0003f0  eb040044          ADD      r0,r4,r4,LSL #1
0003f4  4904              LDR      r1,|L1.1032|
0003f6  eb010080          ADD      r0,r1,r0,LSL #2
0003fa  6840              LDR      r0,[r0,#4]
0003fc  b1b0              CBZ      r0,|L1.1068|
;;;764        {
;;;765           pin_irq_hdr_tab[irqno].hdr(pin_irq_hdr_tab[irqno].args);
0003fe  eb040244          ADD      r2,r4,r4,LSL #1
000402  e009              B        |L1.1048|
                  |L1.1028|
                          DCD      pins
                  |L1.1032|
                          DCD      pin_irq_hdr_tab
                  |L1.1036|
                          DCD      pin_irq_map
                  |L1.1040|
                          DCD      _stm32_pin_ops
                  |L1.1044|
000414  70696e00          DCB      "pin",0
                  |L1.1048|
000418  460b              MOV      r3,r1
00041a  eb030282          ADD      r2,r3,r2,LSL #2
00041e  6890              LDR      r0,[r2,#8]
000420  eb040244          ADD      r2,r4,r4,LSL #1
000424  eb030282          ADD      r2,r3,r2,LSL #2
000428  6851              LDR      r1,[r2,#4]
00042a  4788              BLX      r1
                  |L1.1068|
;;;766        }
;;;767    }
00042c  bd10              POP      {r4,pc}
;;;768    void EXTI0_IRQHandler(void)
                          ENDP

                  EXTI0_IRQHandler PROC
00042e  b510              PUSH     {r4,lr}
;;;769    {
;;;770         /* enter interrupt */
;;;771        rt_interrupt_enter();
000430  f7fffffe          BL       rt_interrupt_enter
;;;772        pin_irq_hdr(0);
000434  2000              MOVS     r0,#0
000436  f7fffffe          BL       pin_irq_hdr
;;;773        /* leave interrupt */
;;;774        rt_interrupt_leave();
00043a  f7fffffe          BL       rt_interrupt_leave
;;;775    }
00043e  bd10              POP      {r4,pc}
;;;776    void EXTI1_IRQHandler(void)
                          ENDP

                  EXTI1_IRQHandler PROC
000440  b510              PUSH     {r4,lr}
;;;777    {
;;;778         /* enter interrupt */
;;;779        rt_interrupt_enter();
000442  f7fffffe          BL       rt_interrupt_enter
;;;780        pin_irq_hdr(1);
000446  2001              MOVS     r0,#1
000448  f7fffffe          BL       pin_irq_hdr
;;;781        /* leave interrupt */
;;;782        rt_interrupt_leave();
00044c  f7fffffe          BL       rt_interrupt_leave
;;;783    }
000450  bd10              POP      {r4,pc}
;;;784    void EXTI2_IRQHandler(void)
                          ENDP

                  EXTI2_IRQHandler PROC
000452  b510              PUSH     {r4,lr}
;;;785    {
;;;786         /* enter interrupt */
;;;787        rt_interrupt_enter();
000454  f7fffffe          BL       rt_interrupt_enter
;;;788        pin_irq_hdr(2);
000458  2002              MOVS     r0,#2
00045a  f7fffffe          BL       pin_irq_hdr
;;;789        /* leave interrupt */
;;;790        rt_interrupt_leave();
00045e  f7fffffe          BL       rt_interrupt_leave
;;;791    }
000462  bd10              POP      {r4,pc}
;;;792    void EXTI3_IRQHandler(void)
                          ENDP

                  EXTI3_IRQHandler PROC
000464  b510              PUSH     {r4,lr}
;;;793    {
;;;794         /* enter interrupt */
;;;795        rt_interrupt_enter();
000466  f7fffffe          BL       rt_interrupt_enter
;;;796        pin_irq_hdr(3);
00046a  2003              MOVS     r0,#3
00046c  f7fffffe          BL       pin_irq_hdr
;;;797        /* leave interrupt */
;;;798        rt_interrupt_leave();
000470  f7fffffe          BL       rt_interrupt_leave
;;;799    }
000474  bd10              POP      {r4,pc}
;;;800    void EXTI4_IRQHandler(void)
                          ENDP

                  EXTI4_IRQHandler PROC
000476  b510              PUSH     {r4,lr}
;;;801    {
;;;802         /* enter interrupt */
;;;803        rt_interrupt_enter();
000478  f7fffffe          BL       rt_interrupt_enter
;;;804        pin_irq_hdr(4);
00047c  2004              MOVS     r0,#4
00047e  f7fffffe          BL       pin_irq_hdr
;;;805        /* leave interrupt */
;;;806        rt_interrupt_leave();
000482  f7fffffe          BL       rt_interrupt_leave
;;;807    }
000486  bd10              POP      {r4,pc}
;;;808    void EXTI9_5_IRQHandler(void)
                          ENDP

                  EXTI9_5_IRQHandler PROC
000488  b510              PUSH     {r4,lr}
;;;809    {
;;;810         /* enter interrupt */
;;;811        rt_interrupt_enter();
00048a  f7fffffe          BL       rt_interrupt_enter
;;;812        if(EXTI_GetITStatus(EXTI_Line5) != RESET)
00048e  2020              MOVS     r0,#0x20
000490  f7fffffe          BL       EXTI_GetITStatus
000494  b110              CBZ      r0,|L1.1180|
;;;813        {
;;;814            pin_irq_hdr(5);
000496  2005              MOVS     r0,#5
000498  f7fffffe          BL       pin_irq_hdr
                  |L1.1180|
;;;815        }
;;;816        if(EXTI_GetITStatus(EXTI_Line6) != RESET)
00049c  2040              MOVS     r0,#0x40
00049e  f7fffffe          BL       EXTI_GetITStatus
0004a2  b110              CBZ      r0,|L1.1194|
;;;817        {
;;;818            pin_irq_hdr(6);
0004a4  2006              MOVS     r0,#6
0004a6  f7fffffe          BL       pin_irq_hdr
                  |L1.1194|
;;;819        }
;;;820        if(EXTI_GetITStatus(EXTI_Line7) != RESET)
0004aa  2080              MOVS     r0,#0x80
0004ac  f7fffffe          BL       EXTI_GetITStatus
0004b0  b110              CBZ      r0,|L1.1208|
;;;821        {
;;;822            pin_irq_hdr(7);
0004b2  2007              MOVS     r0,#7
0004b4  f7fffffe          BL       pin_irq_hdr
                  |L1.1208|
;;;823        }
;;;824        if(EXTI_GetITStatus(EXTI_Line8) != RESET)
0004b8  f44f7080          MOV      r0,#0x100
0004bc  f7fffffe          BL       EXTI_GetITStatus
0004c0  b110              CBZ      r0,|L1.1224|
;;;825        {
;;;826            pin_irq_hdr(8);
0004c2  2008              MOVS     r0,#8
0004c4  f7fffffe          BL       pin_irq_hdr
                  |L1.1224|
;;;827        }
;;;828        if(EXTI_GetITStatus(EXTI_Line9) != RESET)
0004c8  f44f7000          MOV      r0,#0x200
0004cc  f7fffffe          BL       EXTI_GetITStatus
0004d0  b110              CBZ      r0,|L1.1240|
;;;829        {
;;;830            pin_irq_hdr(9);
0004d2  2009              MOVS     r0,#9
0004d4  f7fffffe          BL       pin_irq_hdr
                  |L1.1240|
;;;831        }
;;;832        /* leave interrupt */
;;;833        rt_interrupt_leave();
0004d8  f7fffffe          BL       rt_interrupt_leave
;;;834    }
0004dc  bd10              POP      {r4,pc}
;;;835    void EXTI15_10_IRQHandler(void)
                          ENDP

                  EXTI15_10_IRQHandler PROC
0004de  b510              PUSH     {r4,lr}
;;;836    {
;;;837         /* enter interrupt */
;;;838        rt_interrupt_enter();
0004e0  f7fffffe          BL       rt_interrupt_enter
;;;839        if(EXTI_GetITStatus(EXTI_Line10) != RESET)
0004e4  f44f6080          MOV      r0,#0x400
0004e8  f7fffffe          BL       EXTI_GetITStatus
0004ec  b110              CBZ      r0,|L1.1268|
;;;840        {
;;;841            pin_irq_hdr(10);
0004ee  200a              MOVS     r0,#0xa
0004f0  f7fffffe          BL       pin_irq_hdr
                  |L1.1268|
;;;842        }
;;;843        if(EXTI_GetITStatus(EXTI_Line11) != RESET)
0004f4  f44f6000          MOV      r0,#0x800
0004f8  f7fffffe          BL       EXTI_GetITStatus
0004fc  b110              CBZ      r0,|L1.1284|
;;;844        {
;;;845            pin_irq_hdr(11);
0004fe  200b              MOVS     r0,#0xb
000500  f7fffffe          BL       pin_irq_hdr
                  |L1.1284|
;;;846        }
;;;847        if(EXTI_GetITStatus(EXTI_Line12) != RESET)
000504  f44f5080          MOV      r0,#0x1000
000508  f7fffffe          BL       EXTI_GetITStatus
00050c  b110              CBZ      r0,|L1.1300|
;;;848        {
;;;849            pin_irq_hdr(12);
00050e  200c              MOVS     r0,#0xc
000510  f7fffffe          BL       pin_irq_hdr
                  |L1.1300|
;;;850        }
;;;851        if(EXTI_GetITStatus(EXTI_Line13) != RESET)
000514  f44f5000          MOV      r0,#0x2000
000518  f7fffffe          BL       EXTI_GetITStatus
00051c  b110              CBZ      r0,|L1.1316|
;;;852        {
;;;853            pin_irq_hdr(13);
00051e  200d              MOVS     r0,#0xd
000520  f7fffffe          BL       pin_irq_hdr
                  |L1.1316|
;;;854        }
;;;855        if(EXTI_GetITStatus(EXTI_Line14) != RESET)
000524  f44f4080          MOV      r0,#0x4000
000528  f7fffffe          BL       EXTI_GetITStatus
00052c  b110              CBZ      r0,|L1.1332|
;;;856        {
;;;857            pin_irq_hdr(14);
00052e  200e              MOVS     r0,#0xe
000530  f7fffffe          BL       pin_irq_hdr
                  |L1.1332|
;;;858        }
;;;859        if(EXTI_GetITStatus(EXTI_Line15) != RESET)
000534  f44f4000          MOV      r0,#0x8000
000538  f7fffffe          BL       EXTI_GetITStatus
00053c  b110              CBZ      r0,|L1.1348|
;;;860        {
;;;861            pin_irq_hdr(15);
00053e  200f              MOVS     r0,#0xf
000540  f7fffffe          BL       pin_irq_hdr
                  |L1.1348|
;;;862        }
;;;863        /* leave interrupt */
;;;864        rt_interrupt_leave();
000544  f7fffffe          BL       rt_interrupt_leave
;;;865    }
000548  bd10              POP      {r4,pc}
;;;866    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  pins
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00000004
000024  04020000          DCB      0x04,0x02,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00000008
000038  04030000          DCB      0x04,0x03,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00000010
00004c  04040000          DCB      0x04,0x04,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00000020
000060  04050000          DCB      0x04,0x05,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00000040
000074  04060000          DCB      0x04,0x06,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000088  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00002000
00009c  020d0000          DCB      0x02,0x0d,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00004000
0000b0  020e0000          DCB      0x02,0x0e,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00008000
0000c4  020f0000          DCB      0x02,0x0f,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0000d8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000100  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000114  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000128  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00000001
00013c  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00000002
000150  02010000          DCB      0x02,0x01,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00000004
000164  02020000          DCB      0x02,0x02,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00000008
000178  02030000          DCB      0x02,0x03,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00018c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0001a0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0001b4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0001c8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00000001
0001dc  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00000002
0001f0  00010000          DCB      0x00,0x01,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00000004
000204  00020000          DCB      0x00,0x02,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00000008
000218  00030000          DCB      0x00,0x03,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00022c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000240  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00000010
000254  00040000          DCB      0x00,0x04,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00000020
000268  00050000          DCB      0x00,0x05,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00000040
00027c  00060000          DCB      0x00,0x06,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00000080
000290  00070000          DCB      0x00,0x07,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00000010
0002a4  02040000          DCB      0x02,0x04,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00000020
0002b8  02050000          DCB      0x02,0x05,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00000001
0002cc  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00000002
0002e0  01010000          DCB      0x01,0x01,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00000004
0002f4  01020000          DCB      0x01,0x02,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00000080
000308  04070000          DCB      0x04,0x07,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00000100
00031c  04080000          DCB      0x04,0x08,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00000200
000330  04090000          DCB      0x04,0x09,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00000400
000344  040a0000          DCB      0x04,0x0a,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00000800
000358  040b0000          DCB      0x04,0x0b,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00001000
00036c  040c0000          DCB      0x04,0x0c,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00002000
000380  040d0000          DCB      0x04,0x0d,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00004000
000394  040e0000          DCB      0x04,0x0e,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00008000
0003a8  040f0000          DCB      0x04,0x0f,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00000400
0003bc  010a0000          DCB      0x01,0x0a,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00000800
0003d0  010b0000          DCB      0x01,0x0b,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0003e4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0003f8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00001000
00040c  010c0000          DCB      0x01,0x0c,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00002000
000420  010d0000          DCB      0x01,0x0d,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00004000
000434  010e0000          DCB      0x01,0x0e,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00008000
000448  010f0000          DCB      0x01,0x0f,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00000100
00045c  03080000          DCB      0x03,0x08,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00000200
000470  03090000          DCB      0x03,0x09,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00000400
000484  030a0000          DCB      0x03,0x0a,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00000800
000498  030b0000          DCB      0x03,0x0b,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00001000
0004ac  030c0000          DCB      0x03,0x0c,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00002000
0004c0  030d0000          DCB      0x03,0x0d,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00004000
0004d4  030e0000          DCB      0x03,0x0e,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00008000
0004e8  030f0000          DCB      0x03,0x0f,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00000040
0004fc  02060000          DCB      0x02,0x06,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00000080
000510  02070000          DCB      0x02,0x07,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00000100
000524  02080000          DCB      0x02,0x08,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00000200
000538  02090000          DCB      0x02,0x09,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00000100
00054c  00080000          DCB      0x00,0x08,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00000200
000560  00090000          DCB      0x00,0x09,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00000400
000574  000a0000          DCB      0x00,0x0a,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00000800
000588  000b0000          DCB      0x00,0x0b,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00001000
00059c  000c0000          DCB      0x00,0x0c,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00002000
0005b0  000d0000          DCB      0x00,0x0d,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0005c4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0005d8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0005ec  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00004000
000600  000e0000          DCB      0x00,0x0e,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x40010800
                          DCD      0x00008000
000614  000f0000          DCB      0x00,0x0f,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00000400
000628  020a0000          DCB      0x02,0x0a,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00000800
00063c  020b0000          DCB      0x02,0x0b,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x40011000
                          DCD      0x00001000
000650  020c0000          DCB      0x02,0x0c,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00000001
000664  03000000          DCB      0x03,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00000002
000678  03010000          DCB      0x03,0x01,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00000004
00068c  03020000          DCB      0x03,0x02,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00000008
0006a0  03030000          DCB      0x03,0x03,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00000010
0006b4  03040000          DCB      0x03,0x04,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00000020
0006c8  03050000          DCB      0x03,0x05,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00000040
0006dc  03060000          DCB      0x03,0x06,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x40011400
                          DCD      0x00000080
0006f0  03070000          DCB      0x03,0x07,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00000008
000704  01030000          DCB      0x01,0x03,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00000010
000718  01040000          DCB      0x01,0x04,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00000020
00072c  01050000          DCB      0x01,0x05,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00000040
000740  01060000          DCB      0x01,0x06,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00000080
000754  01070000          DCB      0x01,0x07,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000768  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00000100
00077c  01080000          DCB      0x01,0x08,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x40010c00
                          DCD      0x00000200
000790  01090000          DCB      0x01,0x09,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00000001
0007a4  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000040
                          DCD      0x40011800
                          DCD      0x00000002
0007b8  04010000          DCB      0x04,0x01,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0007cc  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0007e0  00000000          DCB      0x00,0x00,0x00,0x00
                  pin_irq_map
0007e4  0001              DCW      0x0001
0007e6  0000              DCB      0x00,0x00
                          DCD      0x00000001
0007ec  06000000          DCB      0x06,0x00,0x00,0x00
0007f0  0002              DCW      0x0002
0007f2  0000              DCB      0x00,0x00
                          DCD      0x00000002
0007f8  07000000          DCB      0x07,0x00,0x00,0x00
0007fc  0004              DCW      0x0004
0007fe  0000              DCB      0x00,0x00
                          DCD      0x00000004
000804  08000000          DCB      0x08,0x00,0x00,0x00
000808  0008              DCW      0x0008
00080a  0000              DCB      0x00,0x00
                          DCD      0x00000008
000810  09000000          DCB      0x09,0x00,0x00,0x00
000814  0010              DCW      0x0010
000816  0000              DCB      0x00,0x00
                          DCD      0x00000010
00081c  0a000000          DCB      0x0a,0x00,0x00,0x00
000820  0020              DCW      0x0020
000822  0000              DCB      0x00,0x00
                          DCD      0x00000020
000828  17000000          DCB      0x17,0x00,0x00,0x00
00082c  0040              DCW      0x0040
00082e  0000              DCB      0x00,0x00
                          DCD      0x00000040
000834  17000000          DCB      0x17,0x00,0x00,0x00
000838  0080              DCW      0x0080
00083a  0000              DCB      0x00,0x00
                          DCD      0x00000080
000840  17000000          DCB      0x17,0x00,0x00,0x00
000844  0100              DCW      0x0100
000846  0000              DCB      0x00,0x00
                          DCD      0x00000100
00084c  17000000          DCB      0x17,0x00,0x00,0x00
000850  0200              DCW      0x0200
000852  0000              DCB      0x00,0x00
                          DCD      0x00000200
000858  17000000          DCB      0x17,0x00,0x00,0x00
00085c  0400              DCW      0x0400
00085e  0000              DCB      0x00,0x00
                          DCD      0x00000400
000864  28000000          DCB      0x28,0x00,0x00,0x00
000868  0800              DCW      0x0800
00086a  0000              DCB      0x00,0x00
                          DCD      0x00000800
000870  28000000          DCB      0x28,0x00,0x00,0x00
000874  1000              DCW      0x1000
000876  0000              DCB      0x00,0x00
                          DCD      0x00001000
00087c  28000000          DCB      0x28,0x00,0x00,0x00
000880  2000              DCW      0x2000
000882  0000              DCB      0x00,0x00
                          DCD      0x00002000
000888  28000000          DCB      0x28,0x00,0x00,0x00
00088c  4000              DCW      0x4000
00088e  0000              DCB      0x00,0x00
                          DCD      0x00004000
000894  28000000          DCB      0x28,0x00,0x00,0x00
000898  8000              DCW      0x8000
00089a  0000              DCB      0x00,0x00
                          DCD      0x00008000
0008a0  28000000          DCB      0x28,0x00,0x00,0x00
                  _stm32_pin_ops
                          DCD      stm32_pin_mode
                          DCD      stm32_pin_write
                          DCD      stm32_pin_read
                          DCD      stm32_pin_attach_irq
                          DCD      stm32_pin_detach_irq
                          DCD      stm32_pin_irq_enable

                          AREA ||.data||, DATA, ALIGN=2

                  pin_irq_hdr_tab
000000  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
00000c  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
000018  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
000024  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
000030  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
00003c  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
000048  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
000054  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
000060  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
00006c  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
000078  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
000084  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
000090  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
00009c  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
0000a8  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
0000b4  ffff0000          DCW      0xffff,0x0000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.rti_fn.1||, DATA, READONLY, ALIGN=2

                  __rt_init_stm32_hw_pin_init
                  ||__tagsym$$used||
                          DCD      stm32_hw_pin_init

;*** Start embedded assembler ***

#line 1 "drivers\\gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_gpio_c_4ce708de____REV16|
#line 129 "..\\..\\components\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_gpio_c_4ce708de____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_gpio_c_4ce708de____REVSH|
#line 144
|__asm___6_gpio_c_4ce708de____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
