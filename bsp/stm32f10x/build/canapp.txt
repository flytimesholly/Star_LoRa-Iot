; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\canapp.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\canapp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -Iapplications -I. -Idrivers -ILibraries\STM32F10x_StdPeriph_Driver\inc -ILibraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\components\CMSIS\Include -I..\..\include -I..\..\libcpu\arm\cortex-m3 -I..\..\libcpu\arm\common -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\drivers\spi -I..\..\components\drivers\include -I..\..\components\drivers\include -I..\..\components\finsh -I..\..\components\libc\compilers\armlibc -I..\..\components\libc\compilers\common -IE:\00_snake.xiao\RT-Thread\rt-thread\bsp\stm32f10x\RTE\_rtthread-stm32 -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\Keil\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DSTM32F10X_HD -DSTM32F10X_HD -DRT_USING_ARM_LIBC -DUSE_STDPERIPH_DRIVER --omf_browse=.\build\canapp.crf applications\canapp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  can_bus_hook PROC
;;;38     };
;;;39     void can_bus_hook(struct rt_can_device *can, struct canledtype *led)
000000  b570              PUSH     {r4-r6,lr}
;;;40     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;41         if (can->timerinitflag == 1)
000006  f8d40098          LDR      r0,[r4,#0x98]
00000a  2801              CMP      r0,#1
00000c  d104              BNE      |L1.24|
;;;42         {
;;;43             rt_pin_write(led->rtd.pin, 0);
00000e  2100              MOVS     r1,#0
000010  6828              LDR      r0,[r5,#0]
000012  f7fffffe          BL       rt_pin_write
000016  e01d              B        |L1.84|
                  |L1.24|
;;;44         }
;;;45         else
;;;46         {
;;;47             if (can->status.rcvchange == 1 || can->status.sndchange == 1)
000018  208c              MOVS     r0,#0x8c
00001a  5900              LDR      r0,[r0,r4]
00001c  2801              CMP      r0,#1
00001e  d003              BEQ      |L1.40|
000020  2090              MOVS     r0,#0x90
000022  5900              LDR      r0,[r0,r4]
000024  2801              CMP      r0,#1
000026  d111              BNE      |L1.76|
                  |L1.40|
;;;48             {
;;;49                 can->status.rcvchange = 0;
000028  2100              MOVS     r1,#0
00002a  208c              MOVS     r0,#0x8c
00002c  5101              STR      r1,[r0,r4]
;;;50                 can->status.sndchange = 0;
00002e  2090              MOVS     r0,#0x90
000030  5101              STR      r1,[r0,r4]
;;;51                 rt_pin_write(led->rtd.pin, rt_pin_read(led->rtd.pin) ? 0 : 1);
000032  6828              LDR      r0,[r5,#0]
000034  f7fffffe          BL       rt_pin_read
000038  b908              CBNZ     r0,|L1.62|
00003a  2001              MOVS     r0,#1
00003c  e000              B        |L1.64|
                  |L1.62|
00003e  2000              MOVS     r0,#0
                  |L1.64|
000040  4606              MOV      r6,r0
000042  4631              MOV      r1,r6
000044  6828              LDR      r0,[r5,#0]
000046  f7fffffe          BL       rt_pin_write
00004a  e003              B        |L1.84|
                  |L1.76|
;;;52             }
;;;53             else
;;;54             {
;;;55                 rt_pin_write(led->rtd.pin, 1);
00004c  2101              MOVS     r1,#1
00004e  6828              LDR      r0,[r5,#0]
000050  f7fffffe          BL       rt_pin_write
                  |L1.84|
;;;56             }
;;;57         }
;;;58         if (can->timerinitflag == 1)
000054  f8d40098          LDR      r0,[r4,#0x98]
000058  2801              CMP      r0,#1
00005a  d104              BNE      |L1.102|
;;;59         {
;;;60             rt_pin_write(led->err.pin, 0);
00005c  2100              MOVS     r1,#0
00005e  68a8              LDR      r0,[r5,#8]
000060  f7fffffe          BL       rt_pin_write
000064  e00a              B        |L1.124|
                  |L1.102|
;;;61         }
;;;62         else
;;;63         {
;;;64             if (can->status.errcode)
000066  6e60              LDR      r0,[r4,#0x64]
000068  b120              CBZ      r0,|L1.116|
;;;65             {
;;;66                 rt_pin_write(led->err.pin, 0);
00006a  2100              MOVS     r1,#0
00006c  68a8              LDR      r0,[r5,#8]
00006e  f7fffffe          BL       rt_pin_write
000072  e003              B        |L1.124|
                  |L1.116|
;;;67             }
;;;68             else
;;;69             {
;;;70                 rt_pin_write(led->err.pin, 1);
000074  2101              MOVS     r1,#1
000076  68a8              LDR      r0,[r5,#8]
000078  f7fffffe          BL       rt_pin_write
                  |L1.124|
;;;71             }
;;;72         }
;;;73     }
00007c  bd70              POP      {r4-r6,pc}
;;;74     #ifdef USING_BXCAN1
                          ENDP

                  can1_bus_hook PROC
;;;75     void can1_bus_hook(struct rt_can_device *can)
00007e  b510              PUSH     {r4,lr}
;;;76     {
000080  4604              MOV      r4,r0
;;;77         static rt_int32_t inited = 0;
;;;78         if (!inited)
000082  488e              LDR      r0,|L1.700|
000084  6800              LDR      r0,[r0,#0]  ; inited
000086  b960              CBNZ     r0,|L1.162|
;;;79         {
;;;80             inited = 1;
000088  2001              MOVS     r0,#1
00008a  498c              LDR      r1,|L1.700|
00008c  6008              STR      r0,[r1,#0]  ; inited
;;;81             rt_pin_mode(canled[0].rtd.pin, canled[0].rtd.mode);
00008e  4a8c              LDR      r2,|L1.704|
000090  6851              LDR      r1,[r2,#4]  ; canled
000092  6810              LDR      r0,[r2,#0]  ; canled
000094  f7fffffe          BL       rt_pin_mode
;;;82             rt_pin_mode(canled[0].err.pin, canled[0].err.mode);
000098  4a89              LDR      r2,|L1.704|
00009a  68d1              LDR      r1,[r2,#0xc]
00009c  6890              LDR      r0,[r2,#8]  ; canled
00009e  f7fffffe          BL       rt_pin_mode
                  |L1.162|
;;;83         }
;;;84         can_bus_hook(can, &canled[0]);
0000a2  4987              LDR      r1,|L1.704|
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       can_bus_hook
;;;85     }
0000aa  bd10              POP      {r4,pc}
;;;86     #endif /*USING_BXCAN1*/
                          ENDP

                  can_bus_hook_init PROC
;;;99     #endif /*USING_BXCAN2*/
;;;100    int can_bus_hook_init(void)
0000ac  b510              PUSH     {r4,lr}
;;;101    {
;;;102        rt_device_t candev;
;;;103    #ifdef USING_BXCAN1
;;;104        candev = rt_device_find("bxcan1");
0000ae  a085              ADR      r0,|L1.708|
0000b0  f7fffffe          BL       rt_device_find
0000b4  4604              MOV      r4,r0
;;;105        RT_ASSERT(candev);
0000b6  b924              CBNZ     r4,|L1.194|
0000b8  2269              MOVS     r2,#0x69
0000ba  4984              LDR      r1,|L1.716|
0000bc  a084              ADR      r0,|L1.720|
0000be  f7fffffe          BL       rt_assert_handler
                  |L1.194|
;;;106        rt_device_control(candev, RT_CAN_CMD_SET_BUS_HOOK, (void *)can1_bus_hook);
0000c2  f2af0245          ADR      r2,can1_bus_hook + 1
0000c6  2119              MOVS     r1,#0x19
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       rt_device_control
;;;107    #endif /*USING_BXCAN1*/
;;;108    #ifdef USING_BXCAN2
;;;109        candev = rt_device_find("bxcan2");
;;;110        RT_ASSERT(candev);
;;;111        rt_device_control(candev, RT_CAN_CMD_SET_BUS_HOOK, (void *)can2_bus_hook);
;;;112    #endif /*USING_BXCAN2*/
;;;113        return RT_EOK;
0000ce  2000              MOVS     r0,#0
;;;114    }
0000d0  bd10              POP      {r4,pc}
;;;115    INIT_DEVICE_EXPORT(can_bus_hook_init);
                          ENDP

                  can1ind PROC
;;;123    static struct can_app_struct can_data[2];
;;;124    static rt_err_t  can1ind(rt_device_t dev,  void *args, rt_int32_t hdr, rt_size_t size)
0000d2  e92d41f0          PUSH     {r4-r8,lr}
;;;125    {
0000d6  4607              MOV      r7,r0
0000d8  460c              MOV      r4,r1
0000da  4615              MOV      r5,r2
0000dc  4698              MOV      r8,r3
;;;126        rt_event_t pevent = (rt_event_t)args;
0000de  4626              MOV      r6,r4
;;;127        rt_event_send(pevent, 1 << (hdr));
0000e0  2001              MOVS     r0,#1
0000e2  fa00f105          LSL      r1,r0,r5
0000e6  4630              MOV      r0,r6
0000e8  f7fffffe          BL       rt_event_send
;;;128        return RT_EOK;
0000ec  2000              MOVS     r0,#0
;;;129    }
0000ee  e8bd81f0          POP      {r4-r8,pc}
;;;130    static rt_err_t  can2ind(rt_device_t dev, void *args, rt_int32_t hdr, rt_size_t size)
                          ENDP

                  can2ind PROC
0000f2  e92d41f0          PUSH     {r4-r8,lr}
;;;131    {
0000f6  4607              MOV      r7,r0
0000f8  460c              MOV      r4,r1
0000fa  4615              MOV      r5,r2
0000fc  4698              MOV      r8,r3
;;;132        rt_event_t pevent = (rt_event_t)args;
0000fe  4626              MOV      r6,r4
;;;133        rt_event_send(pevent, 1 << (hdr));
000100  2001              MOVS     r0,#1
000102  fa00f105          LSL      r1,r0,r5
000106  4630              MOV      r0,r6
000108  f7fffffe          BL       rt_event_send
;;;134        return RT_EOK;
00010c  2000              MOVS     r0,#0
;;;135    }
00010e  e8bd81f0          POP      {r4-r8,pc}
;;;136    struct rt_can_filter_item filter1item[4] =
                          ENDP

                  rt_can_thread_entry PROC
;;;174    };
;;;175    void rt_can_thread_entry(void *parameter)
000112  b086              SUB      sp,sp,#0x18
;;;176    {
000114  4605              MOV      r5,r0
;;;177        struct rt_can_msg msg;
;;;178        struct can_app_struct *canpara = (struct can_app_struct *) parameter;
000116  462c              MOV      r4,r5
;;;179        rt_device_t candev;
;;;180        rt_uint32_t e;
;;;181    
;;;182        candev = rt_device_find(canpara->name);
000118  6820              LDR      r0,[r4,#0]
00011a  f7fffffe          BL       rt_device_find
00011e  4606              MOV      r6,r0
;;;183        RT_ASSERT(candev);
000120  b926              CBNZ     r6,|L1.300|
000122  22b7              MOVS     r2,#0xb7
000124  496c              LDR      r1,|L1.728|
000126  a06a              ADR      r0,|L1.720|
000128  f7fffffe          BL       rt_assert_handler
                  |L1.300|
;;;184        rt_event_init(&canpara->event, canpara->name, RT_IPC_FLAG_FIFO);
00012c  2200              MOVS     r2,#0
00012e  f104000c          ADD      r0,r4,#0xc
000132  6821              LDR      r1,[r4,#0]
000134  f7fffffe          BL       rt_event_init
;;;185        rt_device_open(candev, (RT_DEVICE_OFLAG_RDWR | RT_DEVICE_FLAG_INT_RX | RT_DEVICE_FLAG_INT_TX));
000138  f2405103          MOV      r1,#0x503
00013c  4630              MOV      r0,r6
00013e  f7fffffe          BL       rt_device_open
;;;186        rt_device_control(candev, RT_CAN_CMD_SET_FILTER, canpara->filter);
000142  2113              MOVS     r1,#0x13
000144  4630              MOV      r0,r6
000146  6862              LDR      r2,[r4,#4]
000148  f7fffffe          BL       rt_device_control
;;;187        while (1)
00014c  e0a1              B        |L1.658|
                  |L1.334|
;;;188        {
;;;189            if (
00014e  a801              ADD      r0,sp,#4
000150  9000              STR      r0,[sp,#0]
000152  6860              LDR      r0,[r4,#4]
000154  6880              LDR      r0,[r0,#8]
000156  7a03              LDRB     r3,[r0,#8]
000158  2001              MOVS     r0,#1
00015a  4098              LSLS     r0,r0,r3
00015c  6863              LDR      r3,[r4,#4]
00015e  689b              LDR      r3,[r3,#8]
000160  7f1f              LDRB     r7,[r3,#0x1c]
000162  2301              MOVS     r3,#1
000164  40bb              LSLS     r3,r3,r7
000166  4318              ORRS     r0,r0,r3
000168  6863              LDR      r3,[r4,#4]
00016a  689b              LDR      r3,[r3,#8]
00016c  f8937030          LDRB     r7,[r3,#0x30]
000170  2301              MOVS     r3,#1
000172  40bb              LSLS     r3,r3,r7
000174  4318              ORRS     r0,r0,r3
000176  6863              LDR      r3,[r4,#4]
000178  689b              LDR      r3,[r3,#8]
00017a  f8937044          LDRB     r7,[r3,#0x44]
00017e  2301              MOVS     r3,#1
000180  40bb              LSLS     r3,r3,r7
000182  ea400103          ORR      r1,r0,r3
000186  7a22              LDRB     r2,[r4,#8]
000188  f04f33ff          MOV      r3,#0xffffffff
00018c  f104000c          ADD      r0,r4,#0xc
000190  f7fffffe          BL       rt_event_recv
000194  b100              CBZ      r0,|L1.408|
;;;190                rt_event_recv(&canpara->event,
;;;191                              ((1 << canpara->filter->items[0].hdr)  |
;;;192                               (1 << canpara->filter->items[1].hdr) |
;;;193                               (1 << canpara->filter->items[2].hdr) |
;;;194                               (1 << canpara->filter->items[3].hdr)),
;;;195                              canpara->eventopt,
;;;196                              RT_WAITING_FOREVER, &e) != RT_EOK
;;;197            )
;;;198            {
;;;199                continue;
000196  e07c              B        |L1.658|
                  |L1.408|
;;;200            }
;;;201            if (e & (1 << canpara->filter->items[0].hdr))
000198  6860              LDR      r0,[r4,#4]
00019a  6880              LDR      r0,[r0,#8]
00019c  7a01              LDRB     r1,[r0,#8]
00019e  2001              MOVS     r0,#1
0001a0  4088              LSLS     r0,r0,r1
0001a2  9901              LDR      r1,[sp,#4]
0001a4  4008              ANDS     r0,r0,r1
0001a6  b1a8              CBZ      r0,|L1.468|
;;;202            {
;;;203                msg.hdr = canpara->filter->items[0].hdr;
0001a8  6860              LDR      r0,[r4,#4]
0001aa  6880              LDR      r0,[r0,#8]
0001ac  7a01              LDRB     r1,[r0,#8]
0001ae  9803              LDR      r0,[sp,#0xc]
0001b0  f3614017          BFI      r0,r1,#16,#8
0001b4  9003              STR      r0,[sp,#0xc]
;;;204                while (rt_device_read(candev, 0, &msg, sizeof(msg)) == sizeof(msg))
0001b6  e005              B        |L1.452|
                  |L1.440|
;;;205                {
;;;206                    rt_device_write(candev, 0, &msg, sizeof(msg));
0001b8  2310              MOVS     r3,#0x10
0001ba  aa02              ADD      r2,sp,#8
0001bc  2100              MOVS     r1,#0
0001be  4630              MOV      r0,r6
0001c0  f7fffffe          BL       rt_device_write
                  |L1.452|
0001c4  2310              MOVS     r3,#0x10              ;204
0001c6  aa02              ADD      r2,sp,#8              ;204
0001c8  2100              MOVS     r1,#0                 ;204
0001ca  4630              MOV      r0,r6                 ;204
0001cc  f7fffffe          BL       rt_device_read
0001d0  2810              CMP      r0,#0x10              ;204
0001d2  d0f1              BEQ      |L1.440|
                  |L1.468|
;;;207                }
;;;208            }
;;;209            if (e & (1 << canpara->filter->items[1].hdr))
0001d4  6860              LDR      r0,[r4,#4]
0001d6  6880              LDR      r0,[r0,#8]
0001d8  7f01              LDRB     r1,[r0,#0x1c]
0001da  2001              MOVS     r0,#1
0001dc  4088              LSLS     r0,r0,r1
0001de  9901              LDR      r1,[sp,#4]
0001e0  4008              ANDS     r0,r0,r1
0001e2  b1a8              CBZ      r0,|L1.528|
;;;210            {
;;;211                msg.hdr = canpara->filter->items[1].hdr;
0001e4  6860              LDR      r0,[r4,#4]
0001e6  6880              LDR      r0,[r0,#8]
0001e8  7f01              LDRB     r1,[r0,#0x1c]
0001ea  9803              LDR      r0,[sp,#0xc]
0001ec  f3614017          BFI      r0,r1,#16,#8
0001f0  9003              STR      r0,[sp,#0xc]
;;;212                while (rt_device_read(candev, 0, &msg, sizeof(msg)) == sizeof(msg))
0001f2  e005              B        |L1.512|
                  |L1.500|
;;;213                {
;;;214                    rt_device_write(candev, 0, &msg, sizeof(msg));
0001f4  2310              MOVS     r3,#0x10
0001f6  aa02              ADD      r2,sp,#8
0001f8  2100              MOVS     r1,#0
0001fa  4630              MOV      r0,r6
0001fc  f7fffffe          BL       rt_device_write
                  |L1.512|
000200  2310              MOVS     r3,#0x10              ;212
000202  aa02              ADD      r2,sp,#8              ;212
000204  2100              MOVS     r1,#0                 ;212
000206  4630              MOV      r0,r6                 ;212
000208  f7fffffe          BL       rt_device_read
00020c  2810              CMP      r0,#0x10              ;212
00020e  d0f1              BEQ      |L1.500|
                  |L1.528|
;;;215                }
;;;216            }
;;;217            if (e & (1 << canpara->filter->items[2].hdr))
000210  6860              LDR      r0,[r4,#4]
000212  6880              LDR      r0,[r0,#8]
000214  f8901030          LDRB     r1,[r0,#0x30]
000218  2001              MOVS     r0,#1
00021a  4088              LSLS     r0,r0,r1
00021c  9901              LDR      r1,[sp,#4]
00021e  4008              ANDS     r0,r0,r1
000220  b1b0              CBZ      r0,|L1.592|
;;;218            {
;;;219                msg.hdr = canpara->filter->items[2].hdr;
000222  6860              LDR      r0,[r4,#4]
000224  6880              LDR      r0,[r0,#8]
000226  f8901030          LDRB     r1,[r0,#0x30]
00022a  9803              LDR      r0,[sp,#0xc]
00022c  f3614017          BFI      r0,r1,#16,#8
000230  9003              STR      r0,[sp,#0xc]
;;;220                while (rt_device_read(candev, 0, &msg, sizeof(msg)) == sizeof(msg))
000232  e005              B        |L1.576|
                  |L1.564|
;;;221                {
;;;222                    rt_device_write(candev, 0, &msg, sizeof(msg));
000234  2310              MOVS     r3,#0x10
000236  aa02              ADD      r2,sp,#8
000238  2100              MOVS     r1,#0
00023a  4630              MOV      r0,r6
00023c  f7fffffe          BL       rt_device_write
                  |L1.576|
000240  2310              MOVS     r3,#0x10              ;220
000242  aa02              ADD      r2,sp,#8              ;220
000244  2100              MOVS     r1,#0                 ;220
000246  4630              MOV      r0,r6                 ;220
000248  f7fffffe          BL       rt_device_read
00024c  2810              CMP      r0,#0x10              ;220
00024e  d0f1              BEQ      |L1.564|
                  |L1.592|
;;;223                }
;;;224            }
;;;225            if (e & (1 << canpara->filter->items[3].hdr))
000250  6860              LDR      r0,[r4,#4]
000252  6880              LDR      r0,[r0,#8]
000254  f8901044          LDRB     r1,[r0,#0x44]
000258  2001              MOVS     r0,#1
00025a  4088              LSLS     r0,r0,r1
00025c  9901              LDR      r1,[sp,#4]
00025e  4008              ANDS     r0,r0,r1
000260  b1b0              CBZ      r0,|L1.656|
;;;226            {
;;;227                msg.hdr = canpara->filter->items[3].hdr;
000262  6860              LDR      r0,[r4,#4]
000264  6880              LDR      r0,[r0,#8]
000266  f8901044          LDRB     r1,[r0,#0x44]
00026a  9803              LDR      r0,[sp,#0xc]
00026c  f3614017          BFI      r0,r1,#16,#8
000270  9003              STR      r0,[sp,#0xc]
;;;228                while (rt_device_read(candev, 0, &msg, sizeof(msg)) == sizeof(msg))
000272  e005              B        |L1.640|
                  |L1.628|
;;;229                {
;;;230                    rt_device_write(candev, 0, &msg, sizeof(msg));
000274  2310              MOVS     r3,#0x10
000276  aa02              ADD      r2,sp,#8
000278  2100              MOVS     r1,#0
00027a  4630              MOV      r0,r6
00027c  f7fffffe          BL       rt_device_write
                  |L1.640|
000280  2310              MOVS     r3,#0x10              ;228
000282  aa02              ADD      r2,sp,#8              ;228
000284  2100              MOVS     r1,#0                 ;228
000286  4630              MOV      r0,r6                 ;228
000288  f7fffffe          BL       rt_device_read
00028c  2810              CMP      r0,#0x10              ;228
00028e  d0f1              BEQ      |L1.628|
                  |L1.656|
000290  bf00              NOP                            ;199
                  |L1.658|
000292  e75c              B        |L1.334|
;;;231                }
;;;232            }
;;;233        }
;;;234    }
;;;235    int rt_can_app_init(void)
                          ENDP

                  rt_can_app_init PROC
000294  b51c              PUSH     {r2-r4,lr}
;;;236    {
;;;237        rt_thread_t tid;
;;;238    
;;;239        tid = rt_thread_create("canapp1",
000296  2014              MOVS     r0,#0x14
000298  2109              MOVS     r1,#9
00029a  f44f7300          MOV      r3,#0x200
00029e  4a0f              LDR      r2,|L1.732|
0002a0  e9cd1000          STRD     r1,r0,[sp,#0]
0002a4  f2af1195          ADR      r1,rt_can_thread_entry + 1
0002a8  a00d              ADR      r0,|L1.736|
0002aa  f7fffffe          BL       rt_thread_create
0002ae  4604              MOV      r4,r0
;;;240                               rt_can_thread_entry, &can_data[0],
;;;241                               512, RT_THREAD_PRIORITY_MAX / 3 - 1, 20);
;;;242        if (tid != RT_NULL) rt_thread_startup(tid);
0002b0  b114              CBZ      r4,|L1.696|
0002b2  4620              MOV      r0,r4
0002b4  f7fffffe          BL       rt_thread_startup
                  |L1.696|
;;;243    
;;;244    #ifdef USING_BXCAN2
;;;245        tid = rt_thread_create("canapp2",
;;;246                               rt_can_thread_entry, &can_data[1],
;;;247                               512, RT_THREAD_PRIORITY_MAX / 3 - 1, 20);
;;;248        if (tid != RT_NULL) rt_thread_startup(tid);
;;;249    #endif
;;;250    
;;;251        return 0;
0002b8  2000              MOVS     r0,#0
;;;252    }
0002ba  bd1c              POP      {r2-r4,pc}
;;;253    
                          ENDP

                  |L1.700|
                          DCD      inited
                  |L1.704|
                          DCD      canled
                  |L1.708|
0002c4  62786361          DCB      "bxcan1",0
0002c8  6e3100  
0002cb  00                DCB      0
                  |L1.716|
                          DCD      __FUNCTION__
                  |L1.720|
0002d0  63616e64          DCB      "candev",0
0002d4  657600  
0002d7  00                DCB      0
                  |L1.728|
                          DCD      |symbol_number.12|
                  |L1.732|
                          DCD      can_data
                  |L1.736|
0002e0  63616e61          DCB      "canapp1",0
0002e4  70703100

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  63616e5f          DCB      0x63,0x61,0x6e,0x5f
000004  6275735f          DCB      0x62,0x75,0x73,0x5f
000008  686f6f6b          DCB      0x68,0x6f,0x6f,0x6b
00000c  5f696e69          DCB      0x5f,0x69,0x6e,0x69
000010  7400              DCB      0x74,0x00
                  |symbol_number.12|
000012  7274              DCB      0x72,0x74
000014  5f63616e          DCB      0x5f,0x63,0x61,0x6e
000018  5f746872          DCB      0x5f,0x74,0x68,0x72
00001c  6561645f          DCB      0x65,0x61,0x64,0x5f
000020  656e7472          DCB      0x65,0x6e,0x74,0x72
000024  7900              DCB      0x79,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  62786361          DCB      "bxcan1",0
000004  6e3100  
000007  00                DCB      0
000008  62786361          DCB      "bxcan2",0
00000c  6e3200  

                          AREA ||.data||, DATA, ALIGN=2

                  canled
                          DCD      0x00000008
                          DCD      0x00000000
                          DCD      0x00000009
                          DCD      0x00000000
                  filter1item
000010  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      can1ind
                          DCD      can_data+0xc
000024  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      can1ind
                          DCD      can_data+0xc
000038  03000040          DCB      0x03,0x00,0x00,0x40
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      can1ind
                          DCD      can_data+0xc
00004c  04000080          DCB      0x04,0x00,0x00,0x80
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      can1ind
                          DCD      can_data+0xc
                  filter2item
000060  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      can2ind
                          DCD      can_data+0x38
000074  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      can2ind
                          DCD      can_data+0x38
000088  03000040          DCB      0x03,0x00,0x00,0x40
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      can2ind
                          DCD      can_data+0x38
00009c  04000080          DCB      0x04,0x00,0x00,0x80
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      can2ind
                          DCD      can_data+0x38
                  filter1
                          DCD      0x00000004
                          DCD      0x00000001
                          DCD      filter1item
                  filter2
                          DCD      0x00000004
                          DCD      0x00000001
                          DCD      filter2item
                  can_data
                          DCD      ||.conststring||
                          DCD      filter1
0000d0  06000000          DCB      0x06,0x00,0x00,0x00
                          %        32
                          DCD      ||.conststring||+0x8
                          DCD      filter2
0000fc  05000000          DCB      0x05,0x00,0x00,0x00
                          %        32
                  inited
                          DCD      0x00000000

                          AREA ||.rti_fn.3||, DATA, READONLY, ALIGN=2

                  __rt_init_can_bus_hook_init
                  ||__tagsym$$used||
                          DCD      can_bus_hook_init

                          AREA ||.rti_fn.6||, DATA, READONLY, ALIGN=2

                  __rt_init_rt_can_app_init
                  |symbol_number.27|
                          DCD      rt_can_app_init

;*** Start embedded assembler ***

#line 1 "applications\\canapp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_canapp_c_49f1687d____REV16|
#line 129 "..\\..\\components\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_canapp_c_49f1687d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_canapp_c_49f1687d____REVSH|
#line 144
|__asm___8_canapp_c_49f1687d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
